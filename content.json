{"meta":{"title":"小李工作站","subtitle":"小李工作站","description":"","author":"工程小李","url":"https://lilongxin178.github.io","root":"/"},"pages":[{"title":"404","date":"2018-09-30T09:25:30.000Z","updated":"2023-11-24T11:16:27.807Z","comments":true,"path":"404.html","permalink":"https://lilongxin178.github.io/404.html","excerpt":"","text":""},{"title":"categories","date":"2023-11-24T08:52:39.000Z","updated":"2023-11-24T08:53:04.706Z","comments":true,"path":"categories/index.html","permalink":"https://lilongxin178.github.io/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2023-11-24T11:11:53.000Z","updated":"2023-11-24T11:12:07.187Z","comments":true,"path":"about/index.html","permalink":"https://lilongxin178.github.io/about/index.html","excerpt":"","text":""},{"title":"contact","date":"2023-11-24T11:12:23.000Z","updated":"2023-11-24T11:12:41.803Z","comments":true,"path":"contact/index.html","permalink":"https://lilongxin178.github.io/contact/index.html","excerpt":"","text":""},{"title":"friends","date":"2023-11-24T11:13:30.000Z","updated":"2023-11-24T11:13:40.864Z","comments":true,"path":"friends/index.html","permalink":"https://lilongxin178.github.io/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-11-24T11:11:23.000Z","updated":"2023-11-24T11:11:40.723Z","comments":true,"path":"tags/index.html","permalink":"https://lilongxin178.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"TMS320F280049C主控的DSP入门设计（学习笔记一）  搭建可移植的CCS工程","slug":"TMS320F280049C主控的DSP入门设计（学习笔记一）  搭建可移植的CCS工程","date":"2024-12-01T06:00:00.000Z","updated":"2024-01-12T12:41:45.006Z","comments":true,"path":"2024/12/01/TMS320F280049C主控的DSP入门设计（学习笔记一）  搭建可移植的CCS工程/","permalink":"https://lilongxin178.github.io/2024/12/01/TMS320F280049C%E4%B8%BB%E6%8E%A7%E7%9A%84DSP%E5%85%A5%E9%97%A8%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%89%20%20%E6%90%AD%E5%BB%BA%E5%8F%AF%E7%A7%BB%E6%A4%8D%E7%9A%84CCS%E5%B7%A5%E7%A8%8B/","excerpt":"","text":"TMS320F280049C主控的DSP入门设计（学习笔记一） 搭建可移植的CCS工程 前言​ 本篇笔记将介绍如何搭建可移植的CCS工程，以便于开发TMS320F280049C主控的DSP入门设计。本篇笔记将详细介绍如何创建CCS工程、添加源文件和库文件、配置编译选项等步骤。 一、工程文件的复制CCS新建空白工程​ 首先打开CCS软件，点击project-&gt;New CCS Project，并按照所需功能自行配置工程名、芯片等信息。 ​ 除此之外，在Project type and tool-chain中配置Output foemat为eabi（ELF） ​ 点击Finish后弹出代码编辑器如下： ​ 此时，我们所选择的工作文件夹目录下应有下列文件： 拷贝支持文件进入工程文件夹​ 首先，进入C2000Ware的默认下载文件夹，如：D:\\ti\\c2000\\C2000Ware_5_01_00_00（笔者为5.01版本，同时，本文出现的所有文件地址均为笔者自己工作环境下的地址）。并找到： ​ D:\\ti\\c2000\\C2000Ware_5_01_00_00\\device_support\\f28004x\\common ​ 此文件夹下为F280049的DSP支持文件，接下来对该文件夹内文件进行复制，并粘贴到工作文件夹中。 首先，将source整个文件夹复制到工作文件夹中。 再将D:\\ti\\c2000\\C2000Ware_5_01_00_00\\device_support\\f28004x\\headers\\source文件夹下的文件复制到现在工程文件夹下的source中 将D:\\ti\\c2000\\C2000Ware_5_01_00_00\\device_support\\f28004x\\common中的include文件夹全部复制到工程文件夹中。 再将D:\\ti\\c2000\\C2000Ware_5_01_00_00\\device_support\\f28004x\\headers\\include中的所有文件复制到工作文件夹的include文件夹下 将D:\\ti\\c2000\\C2000Ware_5_01_00_00\\device_support\\f28004x\\common\\cmd中的四个cmd文件复制到工程文件夹。 接下来对库函数进行复制，首先找到路径地址为D:\\ti\\c2000\\C2000Ware_5_01_00_00\\driverlib\\f28004x\\driverlib的文件夹，该文件夹中含有两个文件夹和.c、.h文件（库函数文件） 首先，对该文件夹下.h文件进行复制，并粘贴到include文件夹中。 再对.c文件进行复制，此时可以先在工作文件夹中创建文件夹“C_library”，然后将.c文件全部粘贴到该文件夹下。 最后将剩余的两个文件夹复制到工程文件夹中，到此，库文件复制完毕。 添加数学运算库及f28004x_headers_nonbios.cmd文件 找到D:\\ti\\c2000\\C2000Ware_5_01_00_00\\libraries\\math\\FPUfastRTS\\c28\\lib和D:\\ti\\ccs1250\\ccs\\tools\\compiler\\ti-cgt-c2000_22.6.1.LTS\\lib（该文件夹为下载CCS后的文件夹），将该文件夹下复制数学运算库到工程文件夹中 再对f28004x_headers_nonbios.cmd文件进行添加找到D:\\ti\\c2000\\C2000Ware_5_01_00_00\\device_support\\f28004x\\headers\\cmd文件夹，对该文件进行复制粘贴。 删除多余文件，整理库文件由于使用eabi输出，所以可将ccs中与COFF输出相关的文件都删除掉。 二 、对文件进行编辑修改​ 1.删除source文件夹f28004x_usdelay.asm文件中函数声明的下划线。这步主要是为了适应eabi输出的需要，也即函数名前不加下划线。​ 修改前： 12345678 .def _F28x_usDelay .sect &quot;.TI.ramfunc&quot; .global __F28x_usDelay_F28x_usDelay: SUB ACC,#1 BF _F28x_usDelay,GEQ ;; Loop if ACC &gt;= 0 LRETR ​ 修改后： 12345678 .def F28x_usDelay .sect &quot;.TI.ramfunc&quot; .global __F28x_usDelayF28x_usDelay: SUB ACC,#1 BF F28x_usDelay,GEQ ;; Loop if ACC &gt;= 0 LRETR ​ 2.include文件夹下的f28004x_lin.h文件需要修改一个变量名，该变量名可以任意修改，修改原因是命名重复。​ 修改前： 1bp_16 IDLE:1; ​ 修改后： 1bp_16 LIN_IDLE:1; ​ 3.include文件夹下的f28004x_globalprototypes.h和source文件夹的f28004x_sysctrl.c均需要修改IDLE函数名，该变量名可以任意修改，修改原因也是命名重复。​ 修改前： 123void IDLE(void); //（f28004x_globalprototypes.h）IDLE() //（f28004x_sysctrl.c） ​ 修改后： 123void IIDLE(void); //（f28004x_globalprototypes.h）IIDLE() //（f28004x_sysctrl.c） 三、从RAM执行程序时的软件配置​ 此时已经形成了完整的CCS工程文件夹，下面将对工程文件进行索引，而一般debug时希望工程从RAM中进行运行，所以在这里进行RAM中运行的配置。​ 首先，右键项目浏览器的项目名，打开Properties（属性栏），设置成Debug，这里名字可以任意修改。 ​ 后续添加文件路径的时候会涉及到一些缩写，这些缩写在如下位置做了定义： 添加索引路径​ 右键点击项目浏览器中的项目名，打开Properties（属性）。找到Include Options。按照下图中操作，创建相对路径。直接在对话框中输入 ${PROJECT_ROOT}&#x2F;include，表示工程文件夹中的include文件夹（绝对路径）。 添加数学库文件路径同样右键点击项目浏览器中的项目名，打开Properties（属性）进行设置。加入下列路径。${PROJECT_ROOT}&#x2F;rts2800_fpu32_eabi.lib ${PROJECT_ROOT}&#x2F;rts2800_fpu32_fast_supplement_eabi.lib 其中默认的库文件是libc.a，根据本文开头提到的官网文档，可以直接删除。 ​ 快速运行库rts2800_fpu32_fast_supplement.lib是rts2800_fpu32.lib的一个函数子集，它是对rts2800_fpu32.lib中一些函数进行重写，提高运算速度，所以添加是有次序要求，需要进行设置如下：​ Link order中添加这两个库，排序rts2800_fpu32_fast_supplement.lib在前rts2800_fpu32.lib在后 启用FPU和TMU同样右键点击项目浏览器中的项目名，打开Properties（属性）进行设置。 关于编译器–fp_mode的设置等信息可以参考文献[4]的2.3节。目前不推荐启用–idiv_support，在本工程中启用该选项会导致程序无法正确运行。 四、总结 ​ 到此，CCS的TMS320F280049C主控模板文件创建完毕。​ 下节将进行仿真器的配置以及程序下载流程。","categories":[{"name":"DSP设计","slug":"DSP设计","permalink":"https://lilongxin178.github.io/categories/DSP%E8%AE%BE%E8%AE%A1/"}],"tags":[{"name":"DSP设计","slug":"DSP设计","permalink":"https://lilongxin178.github.io/tags/DSP%E8%AE%BE%E8%AE%A1/"},{"name":"工具","slug":"工具","permalink":"https://lilongxin178.github.io/tags/%E5%B7%A5%E5%85%B7/"}],"author":"工程小李"},{"title":"关于负电阻的原理及应用的探究","slug":"关于负电阻的原理及应用的探究","date":"2023-11-30T02:00:00.000Z","updated":"2024-01-12T12:40:23.861Z","comments":true,"path":"2023/11/30/关于负电阻的原理及应用的探究/","permalink":"https://lilongxin178.github.io/2023/11/30/%E5%85%B3%E4%BA%8E%E8%B4%9F%E7%94%B5%E9%98%BB%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8%E7%9A%84%E6%8E%A2%E7%A9%B6/","excerpt":"","text":"关于负电阻的原理及应用的探究一、负电阻是什么 一般来说，电压随电流变化的情形在纯电阻电路中可使用微分电阻R进行表示：$$R&#x3D;{dV\\over dI}$$ ​ 由该图可看出，隧道二极管在A-B的阶段是符合前文所说的负微分效应的，但由于隧道二极管的该区域伏安特性并非线性所以该区域并不能称之为负电阻。 ​ 接下来，我们再对负电阻做更加细致的定义： ​ 根据欧姆定律可知电阻二端的电压和电流成正比，其电流-电压关系的图形斜率为正，且会通过原点。 ​ 那么就可推导理想负电阻其电流-电压关系的图形斜率为负，且会通过原点，因此只在图中的第二和第四象限出现。 ​ 故可对该理想负电阻进行绘制伏安特性曲线： ​ 由以上推论及实际现象定义负电阻，即可简单定义为理想的负电阻应该为伏安特性曲线为线性且为斜率为负并经过原点的一种元件。 ​ 历史以往研究时有注意到气体放电元件及一些真空管（例如负耗阻性管）会有负阻效应。不过实用且有经济效益的元件一直到固态电子技术普及后才出现。典型的负阻抗电路—负阻抗变换器—是由约翰·林维尔在1953年发明。而典型差动电阻为负值的元件—隧道二极管—则是由江崎玲于奈在1958年发明。 二、实际负电阻元件构建 ​ 集成电路兴起后，运算放大器由于其”虚短“”虚断“的特性，为构建一些理论中的器提供了巨大帮助，负电阻也在此应运而生。 负电阻实际元件 ​ 该图像为较为典型的负阻抗电路，其阻抗为：$$Z_i &#x3D; {V\\over A} &#x3D;-Z$$​ 现在规定图中电流电压方向为正，由于运算放大器“虚断“的性质，我们可知该电路输入阻抗的绝对值为： $$|Z|&#x3D;R_3$$​ 那再由运放的”虚短“性质可知，可以看出该电路形成了一个放大倍数为两倍的同向放大器，所以当输入端设置电压为V时，输出端电压为2V所以此时R3上的电流在我们设定的状态下应该为-A。所以此时有：$$-A&#x3D;{V\\over R}$$​ 该公式可直接推出该电路阻抗为$$Z_i &#x3D; {V\\over A} &#x3D;-Z$$​ 从本质上来看，我们会发现这里是通过改变电流方向实现的一种模拟负电阻的电路。那我们该如何验证其是否是负电阻呢？接下来进行仿真。 三、仿真验证 ​ 使用 LTspice的直流扫描分析，设置V2从0V开始到2.5V步进0.1V，并给负电阻并联一个正电阻，那么由叠加定理可知，在理想电流源的情况下，正电阻与负电阻上所经过的电流应当相反。那么，开始仿真，测量两个电阻上所经过的电流。 ​ 由测试直流分析可以看出，正电阻与负电阻的电流相反，且电流绝对值都为线性上升，所以，在该理想状态下，负电阻能够完美符合我们在前文中的标准。 四、负电阻应用场景4.1 负阻抗缓冲器​ 实际使用运算放大器时，我们往往会遇到运放驱动能力不足的情况，这种情况下，我们总是达不到我们所期望的电路效果。通常，当我们遇到这种情况时，我们通常使用一级跟随器（单位增益缓冲）。在这里我们可以尝试使用另外一种方式，即负阻抗缓冲器。当负载阻抗较小时，我们可以通过计算在输出端并联一负阻抗，此时输出阻抗趋于∞，且电路输出信号不会出现衰减的情况。​ 与传统跟随器方案相比，该方案具有一重要优点，其使负载阻抗变得很大，几乎消除了负载电阻对电路的影响。 4.2 高输入阻抗放大电路​ 在进行运放电路的使用时，我们知道同相放大器具有输入阻抗高的特点，而反相放大器具有运放输入端虚地，电路工作稳定的特定。所以，我们是否能通过负阻抗缓冲器的原理类比出高阻抗的反向放大电路呢？答案是可以实现的，通过反向在输入端并联负阻抗电路，即可有效提高输入阻抗。设计方案如下： 4.3 负电阻在LC振荡电路中的应用​ RLC二阶电路的响应具有振荡的特性,特别地,当R &#x3D; 0 时,电路的响应为无阻尼振荡。为了得到无阻尼振荡特性,可用负电阻来“中和”电路中的正电阻。 ​ 通过修改R4，可观察输出端波形幅值的衰减、稳定、增长的现象。 ​ 仿真文件地址：img&#x2F;负阻抗LC振荡仿真.ms14 at master · LILONGXIN178&#x2F;img (github.com)","categories":[{"name":"硬件探讨","slug":"硬件探讨","permalink":"https://lilongxin178.github.io/categories/%E7%A1%AC%E4%BB%B6%E6%8E%A2%E8%AE%A8/"}],"tags":[{"name":"运放的运用","slug":"运放的运用","permalink":"https://lilongxin178.github.io/tags/%E8%BF%90%E6%94%BE%E7%9A%84%E8%BF%90%E7%94%A8/"}],"author":"工程小李"},{"title":"基于Typora的Markdown使用","slug":"基于Typora的Markdown使用","date":"2023-11-26T04:00:00.000Z","updated":"2024-01-12T12:40:40.399Z","comments":true,"path":"2023/11/26/基于Typora的Markdown使用/","permalink":"https://lilongxin178.github.io/2023/11/26/%E5%9F%BA%E4%BA%8ETypora%E7%9A%84Markdown%E4%BD%BF%E7%94%A8/","excerpt":"","text":"基于Typora的Markdown使用 一、简介 ​ Word文件是目前我们日常生活中较为常用的文字文件，但我们会发现我们在使用中经常出现排版变化的问题。那为了将排版进行统一规范，我们可能需要一种统一的软件或者文件格式来进行规范。 ​ 那我们会发现，有这样的一种标记语言——Markdown。 ​ 那么既然我们想要去使用Markdown进行文件的书写，我们自然需要一个编辑器工具对其进行编辑使用。学习之初，有我的学长向我推荐了Typora这款编辑器，而我本人也对这款编辑器较为熟悉，所以，本篇博文将基于Typora对Markdown的使用进行探讨。 二、Typora的快捷键设置 2.1 常用快捷键 加粗： Ctrl + B 撤销： Ctrl + Z 字体倾斜 ：Ctrl+I 下划线：Ctrl+U 多级标题： Ctrl + 1~6 有序列表：Ctrl + Shift + [ 无序列表：Ctrl + Shift + ] 降级快捷键 ：Tab 升级快捷键：Shift + Tab 插入链接： Ctrl + K 插入公式： Ctrl + Shift + M 行内代码： Ctrl + Shift + K 插入图片： Ctrl + Shift + I 返回Typora顶部：Ctrl+Home 返回Typora底部 ：Ctrl+End 创建表格 ：Ctrl+T 选中某句话 ：Ctrl+L 选中某个单词 ：Ctrl+D 选中相同格式的文字 ：Ctrl+E 搜索: Ctrl+F 搜索并替换 ：Ctrl+H 删除线 ：Alt+Shift+5 引用 ：Ctrl+Shift+Q 生成目录：[TOC]+Enter 2.2 部分功能演示&#x2F;介绍2.2.1 目录​ 输入[TOC]加Enter生成目录。该目录可随用户使用时自动更新，并且具有跳转功能，使用较为简单。 2.2.2 段落​ 使用换行键[Enter]可以建立新的一行,而使用Shift+Enter可以创建一个比段落间距更小的行间距。 2.2.3 代码块​ 使用快捷键Ctrl + Shift + K，创建代码块。示例如下： 1print(&quot;hello,python!&quot;&quot;) 2.2.4 数学公式打开Typora选择数学模块 点击“段落”—&gt;“公式块”（不推荐） 快捷键Ctrl+Shift+m (快捷方式) “$$”+回车 （Markdown语法） 以上三种方式都能打开数学公式的编辑栏。 示例： 2.2.5 上下标及高亮使用​ 进入偏好设置： ​ 勾选以上的拓展语法，并进行使用。 三、Typora图床设置 ​ 使用Typora时如果不使用图床，我们插入的图片将会保存至本地，那么当我们发往博客或CSDN时就无法直接显示图片。因此我们需要设置一个图床，将图片上传至图床。这里我们可以使用PicGo+Gitee的方式，无需任何费用且上传速度也不错，唯一缺点就是上传再Gitee上私密性不强。 3.1 Gitee使用及配置​ Gitee和GitHub都是较为常用的代码托管平台，和GitHub相比最大的都是就是其访问速度在国内环境下相对较快。所以我们将我们的图床远程仓库设置在Gitee上。​ Gitee地址：*https://gitee.com/* 新建仓库： ​ 此处仓库名自己可任意填写。下面两个标出的红色框中的信息直接按照图中所示配置。 创建私人令牌： ​ 回到主页，然后点击自己的头像，选择账号设置。 ​ 打开后，找到私人令牌 ​ 进入后点击生成新令牌 ​ 简单对项目进行简述，并勾选图中所勾选选项。并输入密码进行验证。 ​ 将私人令牌的token进行复制保存。 3.2 Picgo安装下载及使用​ PicGo是一款开源免费且支持多平台。 ​ 下载并打开Picgo进行安装。安装完成后进入主界面。 ​ 此处可以选择链接格式（markdown、HTML、URL、UBB、Custom等），另外也需要对图床进行设置，为了使用Gitee作为图床，我们应当先进入插件设置来添加Gitee。 下面在图床设置中对Gitee进行配置。 3.3 Typora设置​ 进入Typora，打开“文件”进入“偏好设置” ​ 在该设置中选择其用以下几种功能，并将上传服务选择为Picgo（app），并将应用程序地址填入绝对路径。 ​ 现在只要我们在typora中粘贴任意一张图片，Gicgo就会自动将图片上传到我们的gitee仓库中，肥肠的方便好用。","categories":[{"name":"工具使用","slug":"工具使用","permalink":"https://lilongxin178.github.io/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://lilongxin178.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"Markdown","slug":"Markdown","permalink":"https://lilongxin178.github.io/tags/Markdown/"},{"name":"Typora","slug":"Typora","permalink":"https://lilongxin178.github.io/tags/Typora/"}],"author":"工程小李"}],"categories":[{"name":"DSP设计","slug":"DSP设计","permalink":"https://lilongxin178.github.io/categories/DSP%E8%AE%BE%E8%AE%A1/"},{"name":"硬件探讨","slug":"硬件探讨","permalink":"https://lilongxin178.github.io/categories/%E7%A1%AC%E4%BB%B6%E6%8E%A2%E8%AE%A8/"},{"name":"工具使用","slug":"工具使用","permalink":"https://lilongxin178.github.io/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"}],"tags":[{"name":"DSP设计","slug":"DSP设计","permalink":"https://lilongxin178.github.io/tags/DSP%E8%AE%BE%E8%AE%A1/"},{"name":"工具","slug":"工具","permalink":"https://lilongxin178.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"运放的运用","slug":"运放的运用","permalink":"https://lilongxin178.github.io/tags/%E8%BF%90%E6%94%BE%E7%9A%84%E8%BF%90%E7%94%A8/"},{"name":"Markdown","slug":"Markdown","permalink":"https://lilongxin178.github.io/tags/Markdown/"},{"name":"Typora","slug":"Typora","permalink":"https://lilongxin178.github.io/tags/Typora/"}]}