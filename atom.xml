<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小李工作站</title>
  
  <subtitle>小李工作站</subtitle>
  <link href="https://lilongxin178.github.io/atom.xml" rel="self"/>
  
  <link href="https://lilongxin178.github.io/"/>
  <updated>2024-10-22T09:06:42.624Z</updated>
  <id>https://lilongxin178.github.io/</id>
  
  <author>
    <name>工程小李</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>晶振基础知识</title>
    <link href="https://lilongxin178.github.io/2024/08/15/%E6%99%B6%E6%8C%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://lilongxin178.github.io/2024/08/15/%E6%99%B6%E6%8C%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2024-08-15T06:00:00.000Z</published>
    <updated>2024-10-22T09:06:42.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="晶振基础知识"><a href="#晶振基础知识" class="headerlink" title="晶振基础知识"></a>晶振基础知识</h1><h3 id="晶振振动方式"><a href="#晶振振动方式" class="headerlink" title="晶振振动方式"></a>晶振振动方式</h3><p>石英晶体单元的振动类型分为<strong>弯曲振动，扩张振动，表面切变振动和厚度切变振动</strong>。基频和泛音可以在任何类型的谐振器中工作。最常用的是基频，但对于厚度型器件也常用泛音。</p><p><strong>PS:晶振基频是指晶体振荡器产生的基本频率，而泛音是晶体振荡器产生的高频谐波。</strong></p><h3 id="频率-温度特性"><a href="#频率-温度特性" class="headerlink" title="频率-温度特性"></a>频率-温度特性</h3><p>​<strong>定义：频率温度特性是指环境温度在规定的范围内按预定的方式改变时，其输出频率产生的相对变化特性</strong></p><p>​石英产品大多作为电路元件用于频率选择和&#x2F;或频率控制，因此器件的频率-温度特性是最重要的参数。这种百万分之一(ppm)级频率-温度特性的稳定性是石英频率器件的另一个优点，是LCR离散分量振荡电路无法在大规模生产中实现的。<br><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240802093920273.png" alt="各种石英切片的频率-温度特性"></p><h3 id="晶体谐振器的等效电路"><a href="#晶体谐振器的等效电路" class="headerlink" title="晶体谐振器的等效电路"></a>晶体谐振器的等效电路</h3><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240802094751194.png" alt="晶振等效电路"></p><p><strong>C0:并联电容     C1：动态电容      L1：动态电感       R1：动态电阻</strong></p><p><strong>C0并联电容：两个电极间形成的寄生电容。</strong></p><p><strong>L1动态等效电感：代表机型振动的惯性。</strong></p><p><strong>C1动态等效电容：代表晶振的弹性。</strong></p><p><strong>R1动态等效电阻：代表电路的损耗。</strong> </p><h3 id="谐振频率"><a href="#谐振频率" class="headerlink" title="谐振频率"></a><strong>谐振频率</strong></h3><p>​一般来说，有三对谐振频率，分别为【<strong>“串联谐振频率（fs）”</strong>，<strong>“并联谐振频率（fp）”</strong>】，【<strong>“谐振频率”（fr），“反谐振”频率（fa）</strong>】，【<strong>“最大和最小总导纳定位”频率（fm和fn）</strong>】</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240802135706966.png" alt="谐振复数导纳"></p><p>​根据晶振的等效模型，将<strong>电阻先忽略不计</strong>（由于反馈系统的影响，晶振最终稳定频率不受电阻影响，故此处忽略电阻简化阻抗表达式），即可得到以下的<strong>晶振阻抗表达式</strong>：<br>$$<br>Z&#x3D;\frac{\mathrm{j}}{\mathrm{w}}\times\frac{\mathrm{w}^2\times\mathrm{L}_1\times\mathrm{C}_1-1}{(\mathrm{C}_0+\mathrm{C}_1)-\mathrm{w}^2\times\mathrm{L}_1\times\mathrm{C}_1\times\mathrm{C}_0}<br>$$<br>​此时可以得出阻抗与频率的关系：</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240802141619896.png" alt="阻抗和频率的关系"></p><p>​<strong>fs</strong>即为Z&#x3D;0时的串联谐振频率，表达式为：<br>$$<br>\mathrm{F_{s}}&#x3D;\frac{1}{2\pi\sqrt{L_1C_1}}<br>$$<br>​而<strong>fp</strong>即为Z&#x3D;∞时（分母为0的点）的并联谐振频率，表达式为：<br>$$<br>\mathrm{F_{p}&#x3D;F_{s}\sqrt{1+\frac{C_1}{2C_0}}}<br>$$<br>​fs和fp之间的区域（图中的阴影区域）是并联谐振的区域。在这一区域晶振工作在并联谐振状态，并且在此区域<strong>晶振呈电感特性</strong>，从而带来了相当于180 °的相移。相对来说，对于评估晶振性能，其fs和fp更为重要，所以下文也以fs和fp为重点进行术语的介绍及推导。</p><h3 id="晶振的各项术语"><a href="#晶振的各项术语" class="headerlink" title="晶振的各项术语"></a>晶振的各项术语</h3><p><strong>(1)标称频率及其公差或校准精度</strong></p><p>​晶体谐振器的频率通常用兆赫(MHz)或千赫(kHz)来指定。正常频率是我们期望从适当匹配的晶体振荡电路中得到的输出频率。在环境温度下(参考25℃)，真实设备的频率与标称频率有一定的偏差。中心频率与标称频率的偏差，作为设备的一个参数，用一个最大值来指定，以百分数(%)或百万分率(ppm)表示。<br>​计算公式为:<br>$$<br>频偏&#x3D;【（实际频率-标称频率）&#x2F;标称频率*10^{6}】ppm<br>$$<br><strong>(2)负载电容</strong></p><p>​负载电容CL是从谐振器两端观察电路时振荡器所展示的负载。负载电容形式上与谐振器串联或并联。在并联负载情况下CL的存在会影响并联谐振频率，并联谐振频率fL由。公式如下所示：<br>$$<br>f_L&#x3D;f_s\sqrt{1+C_1&#x2F;2(Co+CL)}<br>$$<br>​由于负载电容是以并联的形式连接到晶振上，所以，可计算出上表达式。</p><p><strong>（3）频率-温度稳定性</strong><br>    频率-温度稳定性表示的在标准温度环境下(通常25℃)由工作温度变化引起的频率偏差。该参数的曲线体现了频率偏差(单位%或ppm)和工作温度与参考温度(25℃)间偏差的关系。石英器件的温度稳定性取决于切割方式、振动方式和石英毛坯的尺寸。此外，该偏差值与晶体谐振器的工作温度范围、负载电容和驱动功率有关。</p><p><strong>（4）等效串联电阻(ESR)</strong><br>    串联支路中出现的电阻R1可以在串联谐振频率下测量，此时C1和L1的影响相互抵消，R1表示晶体单元和封装的机械性损失。</p><p><strong>（5）运动电容C1和运动电感L1</strong><br>    C1与L1这两个参数与串联谐振频率fs相关，如图10所示，在谐振器设计和表征中fs是一个非常确定的参数。工业标准中只规定了C1的值，L1可以由下方公式推导得出。与振荡电路中通常使用的电容相比，C1的值非常小，可以由晶片和电极的材料和几何参数来评估。<br>$$<br>L_1&#x3D;\frac1{4\pi^2{f_s}^2C_1}<br>$$<br><strong>（6）静态电容Co(在支路中)</strong><br>    Co是一个静态电容，无论晶体是否工作都存在，Co的值可以在很低的频率(小于或约1.0 MHz)测得，计算公式如下，其中A为电极面积，d为切片厚度，e为相应晶体切片的介电常数。在实际应用中，Co不仅包括电镀石英裸片的静态电容，还包括导电结合材料的电容和封装外壳本身的电容<br>$$<br>C_0&#x3D;\varepsilon_{ij}^s.\frac Ad<br>$$<br><strong>（7）驱动功率</strong><br>    谐振器的驱动功率是以纳瓦、微瓦或毫瓦为单位的功率消耗量。运行功率是保证正常启动并保持稳态振荡的合适功率范围。驱动功率应设置在最低功率，以避免长期运行带来的频率漂移和晶体断裂。一般来说，产品越小，在不损坏石英谐振器长期使用的情况下，驱动器功率应该越低。一般来说，驱动级别从10 uW到100 uW对于大多数应用已经足够好了。</p><p><strong>（8）质量因子-Q</strong><br>    作为谐振器，质量因子Q值是一个非常重要的参数。在规格中，指定了空载和有负载情况下的Q值。空载Q，或机械Q，可以表示为，R1是出现在串联支路的电阻。负载值取决于负载电路。<br>$$<br>Q&#x3D;\frac{2 \pi f_sL_1}{R_1}&#x3D;\frac{1}{2 \pi f_sC_1R_1}<br>$$<br><strong>（9）晶振牵引度</strong></p><p>​晶振的牵引度是指工作在正常并联谐振区的晶振频率的变化率。这也用于衡量随负载电容变化而导致的频率变化，负载电容的减少会导致频率的增加，反之负载电容的增加会导致频率的减小。晶振的牵引度表达式如下：<br>$$<br>\text{Pullability}_{(\text{PPM&#x2F;pF})}&#x3D;\frac{\text{C}_1\times10^6}{2\times\left(\text{C}<em>0+\text{C}</em>{\text{L}}\right)^2}<br>$$<br><strong>（10）老化</strong><br>    老化是指工作频率在指定时间段内的相对 变化，在指定时间段内以百万分率(ppm)表示。这种频率变化率通常是指数性质的。老化的第一周老化率是最高的，之后缓慢下降。通常情况下，老化率可以由85℃下放置一个月，或25摄氏度下放置一年测量得出。老化速率取决于许多因素:密封方法、完整性、制造工艺、材料类型、操作温度和频率。</p><p><strong>（11）存储温度范围</strong><br>        该参数规定了晶体在非工作状态下可以存储或暴露的最低和最高温度。晶体在非工作状态下，长时间处于规定的存储温度范围内，再次在规定的工作温度范围内工作时，晶体的各项参数指标应当符合规格书的规定。</p><h3 id="皮尔斯晶体振荡器的计算方式"><a href="#皮尔斯晶体振荡器的计算方式" class="headerlink" title="皮尔斯晶体振荡器的计算方式"></a>皮尔斯晶体振荡器的计算方式</h3><p>皮尔斯晶体振荡器有低功耗、低成本及良好的稳定性等特点，因此常见于应用中。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240805083744079.png" alt="皮尔斯振荡器使用原理图"></p><p>$\begin{aligned}&amp;\text{Inv: 内部反相放大器。}\&amp;\text{Q: 石英或陶瓷晶振。}\&amp;\text{RF: 内部反馈电阻。}\&amp;\text{RExt: 外部限流电阻,限制反相器输出电流。}\&amp;\text{CL1和CL2:两个外部负载电容。}\&amp;\text{CS: 寄生电容: PCB所线,OSC IN和OSC OUT管脚之间的效杂散电容}\end{aligned}$</p><p><strong>皮尔斯晶体振荡器设计</strong></p><p><strong>1、反馈电阻RF</strong></p><p>​RF一般来说是内嵌在芯片内的。它的作用是让反相器作为一个放大器来工作。<br>​Vin和Vout之间增加的反馈电阻使放大器形成反馈，以使其成为闭环的系统，并在工作初期使反相器工作在线性区。该放大器（也可以叫做频率选择器）放大了晶振的正常工作区域内（Fs与Fp之间）的噪声(例如晶振的热噪声)，该噪声从而引发晶振起振（同时由于反馈环路的存在，其不会通过振荡导致输出无限增长）。在某些情况下，起振后去掉反馈电阻RF，振荡器仍可以继续正常工作。</p><p><strong>2、负载电容CL</strong></p><p>​负载电容CL是指连接到晶振上的终端电容。CL值取决于外部电容器CL1和CL2，杂散电容Cs。CL值一般可从芯片手册中查阅到。<br>​调整外部电容器CL1和CL2，使振荡电路实际的负载电容等于晶振制造商标定的负载值CL参数（晶振规格书一般会提供），可以获得标定的振荡频率。<br>​计算公式如下：<br>$$<br>\mathrm{C_L&#x3D;\frac{C_{L1}\times C_{L2}}{C_{L1}+C_{L2}}+C_s}<br>$$<br>​举个栗子：<br>​如果晶振规格书手册中CL ＝15pF，并假定Cs &#x3D; 5pF，则匹配电容CL1，CL2有：<br>$$<br>\mathrm{C_{L}-C_{s}&#x3D;\frac{C_{L1}\times C_{L2}}{C_{L1}+C_{L2}}&#x3D;10<del>pF.</del>That<del>is:</del>C_{L1}&#x3D;C_{L2}&#x3D;20~pF}<br>$$<br><strong>3、振荡器的增益裕量</strong></p><p>​由上述推导，我们可得知该振荡器设计可看作一个闭环的线性系统，根据自动控制原理的理论，闭环的系统的稳定性、增益等受到增益裕量的影响；<br>​按照ST的AN2867中的描述，增益裕度应等于：<br>$$<br>gain_{margin}&#x3D;\frac{g_m}{g_{mcrit}}<br>$$</p><p>$$<br>\mathrm{g_{mcrit}&#x3D;4\times ESR\times(2\pi F)^2\times(C_0+C_L)^2}<br>$$</p><p>​而此处$\mathrm{g_{m}}$为芯片手册内的值，故，可进行计算得出增益值。</p><p>​但ST手册相对来说偏向单片机结构进行设计运算，而在希华和村田的技术文档中，均以负阻的形式进行运算，此时，我们需对晶振的负载电容进行计算：<br>$$<br>R_L&#x3D;R_1\left(1+C_0&#x2F;C_L\right)^{2}<br>$$<br>​</p><p>​为了在恒定频率下保持稳定的振荡，它必须具有足够的负电阻（|-R|）以补偿晶体的电阻。将电阻“VR”串联到晶体单元中，并确保振荡开始或停止。 电路的近似负电阻是将有效电阻“RL”与振荡开始时或停止时的最大电阻“VR”相加得到的值，在逐渐使VR值变大后。负电阻（-R）的最佳值是R1的3~5倍。 如果负电阻 （-R） 太小，可能会使晶体不稳定。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240807105904719.png" alt="-R测试电路"></p><p>参考资料：</p><p><a href="http://www.yoketant.com.tw/yoketant/terms-s.htm">希华 (yoketant.com.tw)</a></p><p><a href="https://www.murata.com.cn/zh-cn/products/timingdevice/crystalu/overview/basic/margin">振荡裕量 测量方法的基础知识 | 晶体谐振器的基础知识 | 村田制作所 (murata.com.cn)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;晶振基础知识&quot;&gt;&lt;a href=&quot;#晶振基础知识&quot; class=&quot;headerlink&quot; title=&quot;晶振基础知识&quot;&gt;&lt;/a&gt;晶振基础知识&lt;/h1&gt;&lt;h3 id=&quot;晶振振动方式&quot;&gt;&lt;a href=&quot;#晶振振动方式&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="硬件探讨" scheme="https://lilongxin178.github.io/categories/%E7%A1%AC%E4%BB%B6%E6%8E%A2%E8%AE%A8/"/>
    
    
    <category term="小知识" scheme="https://lilongxin178.github.io/tags/%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>阻容感基础----电容专题</title>
    <link href="https://lilongxin178.github.io/2024/06/23/%E9%98%BB%E5%AE%B9%E6%84%9F%E5%9F%BA%E7%A1%80----%E7%94%B5%E5%AE%B9%E4%B8%93%E9%A2%98/"/>
    <id>https://lilongxin178.github.io/2024/06/23/%E9%98%BB%E5%AE%B9%E6%84%9F%E5%9F%BA%E7%A1%80----%E7%94%B5%E5%AE%B9%E4%B8%93%E9%A2%98/</id>
    <published>2024-06-23T06:00:00.000Z</published>
    <updated>2024-10-23T13:08:52.342Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阻容感基础—-电容专题"><a href="#阻容感基础—-电容专题" class="headerlink" title="阻容感基础—-电容专题"></a>阻容感基础—-电容专题</h1><p>理想电容器的阻抗Z公式为：<br>$$<br>Z_{ideal}&#x3D;\frac1{j\omega c}&#x3D;\frac1{j2\pi fc} \<br>$$<br>阻抗大小|Z|如下图所示，与频率呈反比，随着频率增大，阻抗减小，由于理想电容器中无损耗，故等效串联电阻(ESR)为零。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/v2-66f3bc06b0f5cd4ca36067fb9b0eb728_b.jpg"></p><h2 id="电容实际等效模型"><a href="#电容实际等效模型" class="headerlink" title="电容实际等效模型"></a><strong>电容实际等效模型</strong></h2><p>理想的电容器在实际中是不存在的，电容的实际模型是一个ESR串联一个ESL，再串联一个电容，ESR是等效串联电阻，ESL是等效串联电感，C是理想的电容。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/v2-47d368683f2133d158d163bcb7442ccb_b.png"></p><p>所以上述模型的复阻抗为：<br>$$<br>Z&#x3D;ESR+j2\pi fESL+\frac1{j2\pi fc}&#x3D;ESR+j(2\pi fESL-\frac1{2\pi fc})\<br>$$</p><p>$$<br>2\pi fESL&lt;&lt;\frac1{2\pi fc}<br>$$</p><p>电容器表现为容性；<br>$$<br>2\pi fESL&gt;&gt;\frac1{2\pi fc}<br>$$<br>电容器表现为感性，因此会有一句话叫高频时电容不再是电容，而呈现为电感，这个电感不是说电容变成了电感，而是指此时的电容拥有了与电感类似的特性。<br>$$<br>2\pi f_{ESL}&#x3D;\frac1{2\pi fc}<br>$$<br>此时容抗矢量等于感抗矢量，电容的总阻抗最小，表现为纯电阻特性，此时的f称为电容的自谐振频率。</p><p>自谐振频率点是区分电容是容性还是感性的分界点，高于谐振点时，“电容不再是电容”，因此退耦作用将下降。实际电容器都有一定的工作频率范围，在工作频率范围内，电容才具有很好的退耦作用。ESL是电容在高于自谐振频率点之后退耦功能被消弱的根本原因。</p><p>下图是实际电容器的频率特性。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20241023171413559.png"></p><h2 id="电容特性"><a href="#电容特性" class="headerlink" title="电容特性"></a>电容特性</h2><p>​电容是由两个导体构成，其本质是对两个导体在一定电压下存储电荷能力的度量。任何两个导体之间都有一定的电容量，电容量C可以简化定义为：储存在单个导体上电荷量（Q）与导体之间电压（V）的比值，<strong>C &#x3D;  Q&#x2F;V</strong>。<br>​——如果两个导体之间没有直流路径（电位不相等），那么它们之间就有电容，其阻抗会随频率的升高而降低，在高频时阻抗非常低；<br>​虽然从电容量的定义中表述了电荷量和电压的关系，但这对导体（电容器）的电容量与外部施加的电压并无关系；电容量取决于这对导体的几何结构和导体之间（电场穿过的）介质材料属性：与电容器极板的有效面积、绝缘介质的介电常数成正比，与极板之间的距离成反比：<br>$$<br>C&#x3D;\varepsilon0*\varepsilon\mathrm{r}*\mathrm{A&#x2F;d}。<br>$$<br>ε0：介质在真空状态下的介电常数( &#x3D;8.85×10-12 F&#x2F;M )；</p><p>εr：相对介电常数；</p><p>A：电极面积（m²）；</p><p>d：介质厚度（m）。</p><p>​对于理想电容器来说，两个导体之间是没有直流通路的，只有当导体之间有电压变化时才可能有电流（位移电流）流经电容器：<strong>I &#x3D; ΔQ&#x2F; Δt &#x3D; C*dV&#x2F;dt</strong>；在给定导体间电压变化率时，电容是：<strong>对相同变化率下导体之间形成电流大小的度量</strong>。</p><h2 id="电容器参数"><a href="#电容器参数" class="headerlink" title="电容器参数"></a>电容器参数</h2><h3 id="1，电容器容值"><a href="#1，电容器容值" class="headerlink" title="1，电容器容值"></a>1，电容器容值</h3><p>​在硬件电路上使用电容器，我们首先关注的便是电容器容值，但是电容容值C会随环境发生改变，也会随外加电压、工作频率以及测量方法的改变而发生变化。不同种类电容器对不同的环境&#x2F;电应力的表现也不同；<br>​例如：<br>​陶瓷电容器容值对外加电压的变化很敏感（陶瓷电容：大家都知道了喔？）；<br>​铝电解电容器容值随工作频率的影响很大。</p><h3 id="2，额定电压"><a href="#2，额定电压" class="headerlink" title="2，额定电压"></a>2，额定电压</h3><p>​<strong>电容器额定工作电压：</strong>该电容器在电路中能够长期可靠地工作而不被击穿所能承受的最大直流电压。</p><p>​当在电容器的两极施加电压之后，电容电介质材料会产生极化，但这些电荷依然受介质本身的束缚而不能自由移动，介质的绝缘性能尚未遭到破坏，只有少数电荷脱离束缚而形成很小的漏电流（这个能量损耗即为“介质损耗”）。如果<strong>外加电压不断加强，最后将使极化电荷大量脱离束缚，引起漏电流大大增加，造成介质材料的绝缘性能遭到破坏，使电容器两极短接，从而完全丧失电容器的作用，这种现象称为介质击穿</strong>。<br>​——电容器的耐压与<strong>电容器的结构、介质材料和介质的厚度</strong>有关；一般来说，对于结构、介质相同，容量相等的电容器，其耐压值越高，体积也越大。</p><h3 id="3，电容器耗散系数"><a href="#3，电容器耗散系数" class="headerlink" title="3，电容器耗散系数"></a>3，电容器耗散系数</h3><p>​<strong>电容器耗散系数：</strong> DF &#x3D; tan δ(损耗角) &#x3D;  ESR &#x2F; Xc  &#x3D; (Rs) * (ωC)；是串联等效电阻（ESR）同电容容抗 （1&#x2F;ωC）（测量频率）之比（电容器每周期损耗能量与储存能量之比）；它随测量频率的增加而变大。</p><h3 id="4，电容器介质损耗因数"><a href="#4，电容器介质损耗因数" class="headerlink" title="4，电容器介质损耗因数"></a>4，电容器介质损耗因数</h3><p>​<strong>介质损耗：</strong>是指绝缘材料在电场作用下，由于介质电导和介质极化的滞后效应，在其内部引起的能量损耗。主要分为如下两部分：</p><ol><li><p><strong>电导损耗：</strong>又称为漏导损耗；实际电介质并非理想的绝缘体，其在外电场的作用下，总会有一些带电粒子（电子、正离子、负离子）会沿电场方向移动而引起微弱的电流，这种微小电流称为漏导电流，漏导电流流经介质时使介质发热而损耗了电能；这种因电导而引起的介质损耗也称为“漏导损耗”。</p></li><li><p><strong>极化损耗：</strong>在介质发生缓慢极化时（松弛极化、空间电荷极化等），带电粒子在电场力的影响下因克服热运动（位置发生了移动）而引起的能量损耗。</p></li><li><p><strong>固体介质损耗：</strong></p></li></ol><p>（1）无极绝缘材料：</p><ul><li>云母：介质损耗很小，主要由电导引起损耗，是理想的电极绝缘材料，但机械性能较差；</li><li>陶瓷：电导损耗 + 极化损耗；</li><li>玻璃：电导损耗 + 极化损耗，损耗与玻璃成分有关。</li></ul><p>（2）有机绝缘材料：</p><ul><li>非极性有机绝缘材料：只有电子式极化，损耗取决于电导；</li><li>极性有机绝缘材料：电导损耗 + 极化损耗。</li></ul><h3 id="5，电容器损耗"><a href="#5，电容器损耗" class="headerlink" title="5，电容器损耗"></a>5，电容器损耗</h3><p>​<strong>电容器损耗：</strong>在单位时间内电容因发热所消耗的能量叫做损耗；</p><ol><li>在直流电场的作用下：电容器的损耗以漏导损耗的形式存在（一般较小）；</li><li>在交变电场的作用下：电容的损耗不仅与漏导有关，而且与周期性的极化建立过程有关。</li></ol><h3 id="6，寄生电阻"><a href="#6，寄生电阻" class="headerlink" title="6，寄生电阻"></a>6，寄生电阻</h3><p>​<strong>ESR：</strong>来源于导电电极结构的特性和绝缘介质的结构特性，ESR随着频率的变化而变化；当电容器工作在自谐振点频率时：电容的容抗和感抗大小相等（符号相反），等效为一个电阻，该电阻就是ESR。</p><p>（1）在低频率范围：电容器阻抗Z与理想电容器相同（与频率呈反向趋势，呈现容性），ESR在低频段取决于电介质极化损耗，呈现极化损耗的频率特性；</p><p>（2）在自谐振频率点f0附近：阻抗Z受到寄生电感的影响，偏离了理想电容阻抗特性曲线，此时Z为最小值：ESR；</p><p>（3） 在高频率范围：阻抗Z与理d想电感器相同（与频率呈正向趋势，呈现感性），由于受到趋肤效应的影响（《信号完整性基础》专题具体分析），电极损耗占主导作用，呈上升趋势。</p><h3 id="7，寄生电感"><a href="#7，寄生电感" class="headerlink" title="7，寄生电感"></a>7，寄生电感</h3><p> <strong>ESL（寄生电感）：</strong>电容的寄生电感主要取决于电容的结构和管脚封装，产生自电容引脚和电容板的电感；</p><ul><li>在低频应用时感抗较小，基本可以不考虑；</li><li>频率较高时，就需要考虑这个电感，它能将容抗变成感抗。</li></ul><h3 id="8，纹波电流、电压"><a href="#8，纹波电流、电压" class="headerlink" title="8，纹波电流、电压"></a>8，纹波电流、电压</h3><p>​<strong>纹波电流和纹波电压：</strong>电容器所能耐受纹波电流&#x2F;电压值；它们和ESR 之间的关系密切：</p><p>Vrms &#x3D; Irms × R。</p><p>Vrms ：纹波电压；</p><p>Irms ：纹波电流；</p><p>R ：电容ESR。</p><h3 id="9，温度特性"><a href="#9，温度特性" class="headerlink" title="9，温度特性"></a>9，温度特性</h3><p>​<strong>电容温度系数：</strong> 电容器的电容量随温度变化的大小用温度系数（在一定温度范围内，温度每变化1℃，电容量的相对变化值）来表示；温度对不同类型电容器容量影响不同，陶瓷II&#x2F;III类电容温度系数较大，需特别关注。</p><h2 id="电容器分类"><a href="#电容器分类" class="headerlink" title="电容器分类"></a>电容器分类</h2><h3 id="1，陶瓷电容器"><a href="#1，陶瓷电容器" class="headerlink" title="1，陶瓷电容器"></a>1，陶瓷电容器</h3><p>​<strong>陶瓷电容器：</strong>是以陶瓷材料为介质的电容器的总称。<br>​<strong>陶瓷介质有非常多的优点：</strong>使用温度较高，比容量大，耐潮湿性好，介质损耗较小，电容温度系数可在大范围内选择等。</p><p>​根据陶瓷介质的不同进行分类：<strong>I类瓷介电容器和II类瓷介电容器。</strong></p><ol><li><p><strong>I类瓷介电容器：</strong>主要包括NPO，SL0，COG；其电容容量的稳定性非常好，基本不随温度、电压、时间等变化而变化，但是一般电容量都很小。<br>——这类电容精度高、温度系数小，适合高精度应用场景使用；举个栗子，晶体起震电路中的匹配电容器（pF级），使用的就是NP0&#x2F;COG电容器。</p></li><li><p><strong>II类瓷介电容：</strong>X7R，X5R，Y5U，Y5V；其容量稳定性相对较差，随着温度、电压、时间变化幅度较大，一般用在对容量稳定性要求不高的场合。<br>——这类电容主要优点在于价格便宜，容量大、体积小、寄生电阻&#x2F;电感小，能满足单板上绝大多数的信号隔直、低电压电源滤波&#x2F;耦合等应用需求。</p></li></ol><h4 id="（1）瓷片电容器"><a href="#（1）瓷片电容器" class="headerlink" title="（1）瓷片电容器"></a>（1）瓷片电容器</h4><p>​<strong>瓷片电容器：</strong>又称为圆片瓷介电容器，是在陶瓷表面涂覆一层金属薄膜，再经高温烧结后作为电极而成的电容器；</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20241023195604097.png"></p><p>​瓷片电容器的高频特性比较好，一般在电路中作为<a href="http://www.elecfans.com/tags/%E8%80%A6%E5%90%88/">耦合</a>、滤波、退藕、震荡电容器使用，其典型作用是消除高频干扰。根据应用场景的不同，瓷片电容器分为：高频瓷介电容和低频瓷介电容；又可分为：高压瓷片电容和低压瓷片电容。</p><ol><li><p>高频瓷介电容器具有小的正电容温度系数特性，主要用于高稳定振荡回路中，作为回路、旁路电容器；</p></li><li><p>低频瓷介电容器限于在工作频率较低的回路中作旁路或隔直流用，或对稳定性和损耗要求不高的场合；</p></li><li><p>高压陶瓷电容器应用在大功率、高压领域，要求具有小型、高耐压和频率特性好等特点。</p></li></ol><h4 id="（2）MLCC电容器"><a href="#（2）MLCC电容器" class="headerlink" title="（2）MLCC电容器"></a>（2）MLCC电容器</h4><p>​<strong>MLCC电容器：</strong>多层陶瓷电容器（Mul<a href="http://www.elecfans.com/tags/%E5%BE%B7%E5%B7%9E%E4%BB%AA%E5%99%A8/">ti</a>-Layer Ceramic Capacitor），是由印好电极（内电极）的陶瓷介质膜片以相互错位交替的方式叠合起来，经过一次性高温烧结形成陶瓷芯片，再在芯片的两端封上金属层（外电极）的电容结构。<br>​它具有：小型化（0402、0201）、大容量（相对瓷片电容）、低成本、寿命长，高可靠性、低功耗（低ESR）、高频率（低ESL）以及适合贴片安装、优良的耐热、腐蚀性等特点。</p><p>根据MLCC电容器所使用的陶瓷粉料的不同可分为如下三大类：</p><ol><li><p><strong>温度补偿类NPO电介质（Ⅰ类）：</strong>这类电容器电气性能最稳定，基本不随温度、电压、时间等各种应力而改变，属超稳定型、低损耗电容材料类型，适用在对稳定性、可靠性要求较高的高频、特高频、甚高频电路中。<br>NPO&#x2F;C0G电容器：Negative-Positive-Zero，最常用的具有温度补偿特性的单片陶瓷电容器，以氧化钛（TiO2）为主要成分（介电常数小于150），具有最稳定的性能；或者通过添加少量其他（铁电体）氧化物（CaTiO3或SrTiO3），构成“扩展型”温度补偿陶瓷电容，表现我近似线性的温度系数（介电常数达到500）；<br>——C0G代表电容器的温度系数：C 表示电容温度系数的有效数字为：0 ppm&#x2F;℃；0 表示有效数字的倍乘因数为： -1（10的0次方）；G 表示随温度变化的容差为：±30ppm。<br> 但NPO&#x2F;C0G电容器容值比较小，通常不超过1nF（最大100nF），主要用于谐振电路和滤波，频率可以达到10MHz至30GHz之间。</p></li><li><p><strong>高介电常数类X7R电介质（Ⅱ类）：</strong>也称铁电陶瓷电容器，是一种强电介质，容量比NPO更大，性能比较稳定（相对NP0差），会随温度、电压、时间而改变，但性能变化并不显著，属稳定电容材料类型，使用在隔直、耦合、旁路、滤波电路及可靠性要求较高的中高频电路中；<br>其中Ⅱ类陶瓷电容器又分为稳定级和可用级：X5R、X7R属于Ⅱ类陶瓷的稳定级，Y5V和Z5U等属于可用级；<br>X:低温极限；7：高温极限；R：电容变化范围；X7R表示：温度在-55℃到+125℃时其容量变化为15%（电容器容量变化非线性）；（具体如下图所示）</p></li></ol><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20241023200617429.png"></p><h4 id="（3）电容啸叫"><a href="#（3）电容啸叫" class="headerlink" title="（3）电容啸叫"></a>（3）电容啸叫</h4><p>​MLCC电容器发生啸叫主要是由陶瓷的压电效应引起的，MLCC电容器由于其特殊的结构，当施加在两端的电场变换时，可以引起成比例的机械应力的变化，此为<strong>逆压电效应</strong>，当振动频率落入人耳听觉范围内时，就会产生噪音，即所谓的“啸叫”。正压电效应相反，是受到力的作用，产生电场的过程。</p><ol><li><p><strong>正压电效应：</strong>对具有压电特性的介质材料施加机械压力的作用而变形时，其内部会产生极化现象，同时在两个相对表面上出现正负相反的电荷，其电荷密度与外机械力成正比；当外力去掉后，它又会恢复到不带电的状态；</p></li><li><p><strong>逆压电效应：</strong>当在电介质的极化方向上施加电场，这些电介质也会发生变形，电场去掉后，电介质的变形随之消失。</p></li></ol><p> MLCC设计制造陶瓷介质材料主要：顺电介质和铁电介质两大类；</p><ol><li><p>I类顺电介质（NPO&#x2F;C0G）伸缩形变很小，不会产生啸叫声；</p></li><li><p>II类铁电介质（X7R&#x2F;X5R）具有强烈的压电效应，会产生明显噪声：X7R&#x2F;X5R类中高容量电容器，会产生明显的啸叫（开关电源、高频电源等应用），频率在20Hz~20kHz之间便能被人耳感知到；</p></li></ol><p>​解决啸叫问题，有如下几种方案：</p><ol><li>将出现啸叫的电容器更换为NP0&#x2F;钽电容&#x2F;薄膜电容等；</li><li>调整电路去除交变电压或调整频率移出人耳范围（20Hz~20KHz）；</li><li>优化PCB布局及PCB板规格，降低啸叫水平。</li></ol><h3 id="2，电解质电容器"><a href="#2，电解质电容器" class="headerlink" title="2，电解质电容器"></a>2，电解质电容器</h3><p>​<strong>电解质电容器：</strong>用铝、钽、铌、钛等阀金属表面采用阳极氧化法生成一层氧化物作为介质层，以电解质作为阴极构成的电容器。</p><ol><li><p><strong>按电解质的状态可分为：</strong>液态电解电容器，固态电解质电容器。</p></li><li><p><strong>按阀金属材料可分为：</strong>铝、钽、铌等电解电容器。</p></li><li><p><strong>按阳极呈现状态可分为</strong>：箔式卷绕型，烧结型电解电容器。</p></li><li><p><strong>按特性可分为：</strong>通用型、宽温型、长寿命型、无极性型（背靠背电容器）、低漏电流型、低阻抗（ESR）型、高频特低阻抗型和耐高纹波型</p></li></ol><h4 id="（1）铝电解电容"><a href="#（1）铝电解电容" class="headerlink" title="（1）铝电解电容"></a>（1）铝电解电容</h4><p>​<strong>铝电解电容器：</strong>以铝金属箔为阳极，介质是在阳极金属箔表面上形成的阀金属氧化膜（AL2O3），阴极为多孔性电解纸所吸附的工作电解质（液体或固体）<br>​——根据C&#x3D;εr*A&#x2F;d，电解电容器介质非常薄（金属氧化物，d很小，nm~um级别），同时通过卷绕式将电容两极面积做的非常大（A很大），所以电容量可以做的非常大。<br>​铝电解电容器电容量大、价格便宜、性能优异，在市场占有率非常高，通用铝电解电容主要是卷绕型铝容器。</p><p>​<strong>铝电解电容器有如下特点：</strong></p><ol><li><p><strong>介质层：</strong>铝氧化膜AL2O3具有单向导电性，所以铝电解电容有正负极之分。</p></li><li><p><strong>高电场强度：</strong>利用化学方法在腐蚀过的阳极铝箔表面生成一层极薄（0.01~1um）的铝氧化膜作为电解电容器介电质，与铝箔阳极结合成为一体；</p></li><li><p><strong>阴极是电解质：</strong>根据其物理状态分为：液体电解质和固体电解质；为了使电容器的阴极与外部电路相连接，必须从结构上加一阴极引出板（阴极箔）成为一完整的结构。</p></li></ol><p>​<strong>液态铝电解电容器主要参数：</strong></p><ol><li><p><strong>额定电压：</strong>电容器在额定温度范围内所允许的连续工作最大直流电压或脉冲电压峰值。</p></li><li><p><strong>浪涌电压：</strong>短时间内电容可以承受的最大电压值，一般为：1.15x额定电压。</p></li><li><p><strong>电容量(uF)及误差(%)：</strong>液态铝电解电容器一般电容标称误差为20%；</p></li></ol><p>（1）电容量与外加电压强度成反比，大约电压提高1倍，电容量下降1~3倍；<br>（2）电容量与环境温度成正比，需关注低温应用下容值的变化；<br>（3）电容量与工作频率成反比；</p><ol start="4"><li><strong>ESR：</strong>电容器等效串联电阻，ESR会影响到产品的功率损耗，高频特性以及滤波效果；</li></ol><p>（1）ESR随温度的升高，ESR减小，在温度高的环境有利于功耗减小；<br>（2）ESR随频率的增加也逐渐减小。</p><ol start="5"><li><p><strong>额定纹波电流：</strong>在规定频率下最大允许交流电流的有效值，该电流下电容器可在规定下的上限温度下连续工作；<br>——最大允许纹波电流的大小与环境温度，电容表面积，耗散因数（ESR），以及交流电频率相关；纹波电流产生的热量是影响使用寿命的重要因数，超过铝电解电容器的额定纹波电流，导致电容器温度太高而大大减小寿命甚至被烧坏。</p></li><li><p><strong>损耗：</strong>用损耗角正切表示，在规定频率的正弦电压下：P有&#x2F;P无；<br>——电解电容器的损耗：在直流电压下主要为漏导损耗，在交流电压下为漏导损耗和介质极化损耗；电容器因为消耗能量而发热。</p></li><li><p><strong>温度范围：</strong>电容器设计所确定的能够连续工作的环境温度范围。<br>——热应力对液态铝电解电容寿命有决定性作用，器件资料给出的寿命为额定温度条件下的最小工作寿命；工作温度每下降10℃寿命增加2倍。</p></li></ol><h4 id="（2）聚合物（Polymer）电容器"><a href="#（2）聚合物（Polymer）电容器" class="headerlink" title="（2）聚合物（Polymer）电容器"></a>（2）聚合物（Polymer）电容器</h4><p>​<strong>固体电解质：</strong>导电聚合物（PEDT），在导电性、热稳定性，化学稳定性方面均有明显的优势，是目前可选用的综合性能最好的固体电解质。</p><p>​<strong>聚合物（Polymer）电解电容器的特点：</strong></p><ol><li><p>聚合物铝&#x2F;钽电解电容器通过以多层铝&#x2F;钽箔结构为阳极、固体导电聚合物为阴极实现低ESR、低阻抗和高静电容量；</p></li><li><p>具有无偏压特性和稳定的温度特性，在纹波吸收、滤波和瞬态响应方面具有优异性能，堪称各类应用的理想之选；</p></li><li><p>Polymer电容器可以无降额使用（理论上，正常使用降额90%）；</p></li><li><p>退化机理主要是由于高分子有机体在高温下会分解导致导电率下降，半永久失效。</p></li></ol><p>​不同形态的聚合物电容器：贴片型聚合物铝&#x2F;钽电解电容器，卷型聚合物铝电解电容器，卷型聚合物铝混合型电容器。<br>​——聚合物电容器除了传统卷型之外，还更加容易被制造成贴片型电容器，外形类似二氧化锰钽电容器，其最大的优点是：小型化、大容量、低ESR&#x2F;ESL。</p><p>​<strong>聚合物固态铝&#x2F;钽电解电容器的参数及特性比较：</strong></p><p>​聚合物固态铝电容器（MLPC：片式叠层铝电解电容器）相比聚合物固态钽电容器，有更低的ESR和更大的容量；聚合物固态铝电解电容特点如下：</p><ul><li><p>高频低阻抗：在100K~1MHz的宽频范围内都具有很低的阻抗，特别适合作为滤波电容器去除电路的开关电源纹波、音频噪声等；</p></li><li><p>优良的温度特性：ESR在-55c~105c温度范围内几乎保持不变；特别适合低温恶劣条件下电子设备；</p></li><li><p>高温长寿命：聚合物没有液态电解液易挥发现象，寿命更长：寿命遵循工作温度每下降20℃，寿命增加10倍（液态电解电容每下降10℃，寿命增加2倍）；</p></li><li><p>高额定纹波电流：由于更低的ESR，允许通过较大纹波电流（P&#x3D;I2xR）；</p></li><li><p>安全高可靠：由于采用固体电解质，不会出现电容电解液漏液，干枯，爆浆等事故（如上“聚合物电解电容特点”所述）；由于产品内部结构凝聚固定，产品的抗震性好，可靠性高。</p></li></ul><h4 id="（3）聚合物混合铝电容器"><a href="#（3）聚合物混合铝电容器" class="headerlink" title="（3）聚合物混合铝电容器"></a>（3）聚合物混合铝电容器</h4><p>​<strong>聚合物混合铝电解电容器：</strong>在电解质中融合了导电性聚合物和电解液，兼备导电性聚合物和电解液的特点：有大静电容量、低LC（Leakage Current）、大纹波电流、低ESR、耐湿性优、高可靠性的优点；但是聚合物混合铝电容的温度寿命与液态铝电解电容一样，工作温度每下降10℃寿命增加2倍。</p><h4 id="（4）钽电解电容器（Mn02）"><a href="#（4）钽电解电容器（Mn02）" class="headerlink" title="（4）钽电解电容器（Mn02）"></a>（4）钽电解电容器（Mn02）</h4><p>​<strong>钽电解电容器：</strong>电解电容器的一种，由充当阳极的钽金属制成，由一层充当电介质的氧化物覆盖，并被导电阴极包围。<br>​相同体积下同样结构的钽电容相比铝电解电容：容量更大，耐压较小。钽电容跟聚合物钽电容结构差不多，不同的是阴极把导电聚合物换成MnO2。</p><ol><li>钽电解电容价格高：是相同容量陶瓷电容器的10倍以上；</li><li>钽电解电容器的失效模式：大多为强发热、发光（爆炸，具体原因如“聚合物电容器”节所述），容易引起火灾；</li><li>大容量低耐压钽电解电容的替代产品：高分子聚合物固体铝&#x2F;钽电解电容器；</li><li>钽电解电容器在大容量、小封装、低ESR的应用场景仍然有优势。</li></ol><h4 id="（5）铌电解电容器（没见到过，没用过）"><a href="#（5）铌电解电容器（没见到过，没用过）" class="headerlink" title="（5）铌电解电容器（没见到过，没用过）"></a>（5）铌电解电容器（没见到过，没用过）</h4><p>​<strong>铌电解电容器：</strong>与钽电解电容器类似，用铌及其氧化物代替钽；铌氧化物（五氧化二铌）的介电常数比钽氧化物（五氧化二钽）更高，性能更加稳定，可靠性更高；主要用于：小体积、大容量、低耐压、低ESR应用场景的电容器产品。</p><h3 id="3，薄膜电容器"><a href="#3，薄膜电容器" class="headerlink" title="3，薄膜电容器"></a>3，薄膜电容器</h3><p>​<strong>薄膜电容器：</strong>是以金属箔当电极，将其和聚乙酯，聚丙烯，聚苯乙烯或聚碳酸酯等塑料薄膜从两端重叠后，卷绕成圆筒状构造的电容器。薄膜电容器被大量使用在模拟电路上。尤其是在信号交连的部分，必须使用频率特性良好，介质损失极低的电容器，才能确保信号在传送时，不致于有太大的失真发生。</p><ol><li>按薄膜种类分类：聚乙酯电容（Mylar电容），聚丙烯电容（PP电容&#x2F;CBB），聚苯乙烯电容（PS电容）和聚碳酸酯电容；</li></ol><p>（1）pp与ps电容器是众多薄膜电容中性能最好，也是所有薄膜电容中价钱最贵的电容器；<br>（2）聚酯（PET）薄膜电容的介电常数较高，体积小，容量大，稳定性较好，适宜做旁路电容。</p><ol start="2"><li>按电极分类：金属箔薄膜电容（Film&#x2F;Foil）和金属化薄膜电容（Metallized Film）。</li></ol><p>（1）金属箔薄膜电容器：直接在塑料膜上加一层薄金属箔，通常是铝箔，作为电极；<br>    ——制造工艺相对简单，而且耐电流强度高，无自愈能力，峰值耐压查。<br>（2）金属化薄膜电容器：是在塑料薄膜上以真空蒸镀上一层很薄的金属以做为电极。<br>    ——电极厚度薄（相同体积叠层更多，容量更大），耐压能力强，但耐电流能力差。</p><p>薄膜电容器相对陶瓷电容器和电解电容器：</p><ol><li><p>更低的频率损耗，介质吸收（Dielectric absorption）效应更小；</p></li><li><p>更高的电容精度（可与NPO相比，但电容量更大）；</p></li><li><p>随外加电压、频率及环境温度的稳定性非常高，无直流偏压损耗，无压电效应（啸叫）；</p></li><li><p>非常好的耐热及机械应力冲击能力；<br>——不易被外部热和机械应力而损坏，大封装（&gt;1206）陶瓷电容器对机械应力非常敏感。</p></li><li><p>具有自我恢复（自愈）功能，开路的失效模式（陶瓷和电解电容是短路），可靠性更高。</p></li></ol><h3 id="4，其他电容器"><a href="#4，其他电容器" class="headerlink" title="4，其他电容器"></a>4，其他电容器</h3><h4 id="（1）纸介质电容器"><a href="#（1）纸介质电容器" class="headerlink" title="（1）纸介质电容器"></a>（1）纸介质电容器</h4><p>​<strong>纸介电容器：</strong>是由介质厚度很薄的纸作为介质，铝箔作为电极，经掩绕成圆柱形，再经过浸渍用外壳封装或环氧树脂灌封组成的电容器。</p><p>​纸质电容器主要应用于直流及低频电路，有如下特点：</p><ol><li>成本低，电容量范围宽 ， 工作电压高 ；</li><li>热稳定性较差(电容量稳定性不高)， 工作温度低，易吸潮、老化，高频损耗（tgδ）较大。</li></ol><h4 id="（2）云母电容器"><a href="#（2）云母电容器" class="headerlink" title="（2）云母电容器"></a>（2）云母电容器</h4><p>​<strong>云母电容器：</strong>在云母片上喷涂银层或用金属箔做电极板，极板和云母一层一层叠合后，再压铸在胶木粉或封固在环氧树脂中制成（结构类似MLCC）。</p><p>​<strong>云母电容特点：</strong></p><ol><li>介质损耗小、耐压高、绝缘电阻大、温度系数小（耐热性好）；</li><li>寄生电感小、频率特性稳定，不易老化，适用高频电路；</li><li>体积大、容量小，价格贵。</li></ol><h4 id="（3）玻璃釉电容器"><a href="#（3）玻璃釉电容器" class="headerlink" title="（3）玻璃釉电容器"></a>（3）玻璃釉电容器</h4><p>​玻璃釉电容器：介质是玻璃釉粉加压制成的薄片。玻璃釉电容特点：</p><ol><li>介质介电常数大、体积小、损耗小，耐温性和抗湿性较好；</li><li>适合半导体电路和小型电子仪器中的交、直流电路或脉冲电路使用。</li></ol><h4 id="（4）涤纶电容器"><a href="#（4）涤纶电容器" class="headerlink" title="（4）涤纶电容器"></a>（4）涤纶电容器</h4><p>​涤纶电容器：是指用两片金属箔做电极，夹在极薄绝缘介质中，卷成圆柱形或者扁柱形芯子，介质是涤纶。有如下特点特点：</p><ol><li>额定工作电压大：金属化涤纶电容器工作电压可达上万伏；</li><li>电容量范围宽：从几皮法到几百微法；</li><li>介电常数较高、体积小、容量大，稳定性好，工作温度可达120~130℃；</li><li>损耗角正切值较大，一般用于直流及脉动电路中，不宜在高频电路中使用。</li></ol><h2 id="电容器应用"><a href="#电容器应用" class="headerlink" title="电容器应用"></a>电容器应用</h2><h3 id="1，滤波器"><a href="#1，滤波器" class="headerlink" title="1，滤波器"></a>1，滤波器</h3><p>​<strong>滤波：</strong>是指滤除不需要频率的波形，滤波器的类型有<strong>低通、高通、带通、带阻</strong>。</p><p>​<strong>滤波电容：</strong>是安装在整流电路两端用以降低交流脉动波纹系数，从而提升高效平滑直流输出的一种储能器件。无源滤波电路分为好多种，主要是结合其它器件（电阻、磁珠、电感），构成L型、T型以及π型滤波器，对特定频段电源噪声进行滤波。滤波电路的原理主要根据滤波电路中：电容阻抗：Xc &#x3D; 1&#x2F;jωC &#x3D; 1&#x2F;sC，电感阻抗：XL &#x3D; jωL &#x3D; sL的组合计算出组合电路对不同频率的阻抗，实现滤波的功能。</p><h3 id="2，电子电力-开关电源"><a href="#2，电子电力-开关电源" class="headerlink" title="2，电子电力&#x2F;开关电源"></a>2，电子电力&#x2F;开关电源</h3><p>​我们平时用到的各种类型电容器，大多数用在了电源上。<br>​电容器是一种储能元件，与电感结合形成的功率滤波电路能够使开关电源&#x2F;电力电子中的功率信号变为平滑的直流信号。</p><h3 id="3，储能、旁路和去耦"><a href="#3，储能、旁路和去耦" class="headerlink" title="3，储能、旁路和去耦"></a>3，储能、旁路和去耦</h3><p>​<strong>储能电容器：</strong>用在电源输入口或大功率器件旁边，为减少因功率器件突然工作产生时，开关电源响应速度不够，而带来电压波动。</p><p>​<strong>旁路电容器：</strong>接在靠近器件的电源与地之间，产生一个交流分路，除去器件端电源不需要的能量。</p><ol><li><p>通常电解电容器或大容量陶瓷电容器比较适合作旁路电容；</p></li><li><p>电容值取决于PCB 板上的瞬态电流需求，一般在10uF 至470μF 范围内；</p></li><li><p>旁路电容器是为本地器件提供能量的储能器件，使稳压器的输出均匀化，旁路电容器被充电的同时向器件进行放电；</p></li><li><p>为尽量减少电源回路对地阻抗，旁路电容器尽量靠近负载器件的供电电源管脚和地管脚。</p></li></ol><p>​<strong>去耦电容器：</strong> 根据电容器的实际效果来命名，一般接在器件电源管脚和地之间，起到滤除芯片电源管脚高频噪声的作用。</p><ol><li><p>主要用于滤除&#x2F;减少外部电源平面输入到器件电源管脚端的高频噪声，使得输入器件的电源稳定；</p></li><li><p>有源器件在工作时产生高频的开关噪声，去耦电容器将噪声接到地（对地低阻抗），滤除&#x2F;减少器件的开关噪声传播到单板电源平面上；</p></li><li><p>空间中存在的电磁波会干扰到芯片工作的稳定性，去耦电容器能够很好的滤除这些干扰。</p></li></ol><h3 id="4，信号隔直-耦合"><a href="#4，信号隔直-耦合" class="headerlink" title="4，信号隔直&#x2F;耦合"></a>4，信号隔直&#x2F;耦合</h3><p>​<strong>隔直&#x2F;耦合电容：</strong>利用电容“隔直通交”的性质，使用串联电容器来耦合信号。需要根据频率和负载电阻来选择，隔直电容和负载电阻构成了分压网络，作为高通滤波器。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;阻容感基础—-电容专题&quot;&gt;&lt;a href=&quot;#阻容感基础—-电容专题&quot; class=&quot;headerlink&quot; title=&quot;阻容感基础—-电容专题&quot;&gt;&lt;/a&gt;阻容感基础—-电容专题&lt;/h1&gt;&lt;p&gt;理想电容器的阻抗Z公式为：&lt;br&gt;$$&lt;br&gt;Z_{ideal}&amp;#</summary>
      
    
    
    
    <category term="硬件探讨" scheme="https://lilongxin178.github.io/categories/%E7%A1%AC%E4%BB%B6%E6%8E%A2%E8%AE%A8/"/>
    
    
    <category term="器件类" scheme="https://lilongxin178.github.io/tags/%E5%99%A8%E4%BB%B6%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>阻容感基础----电阻专题</title>
    <link href="https://lilongxin178.github.io/2024/06/20/%E9%98%BB%E5%AE%B9%E6%84%9F%E5%9F%BA%E7%A1%80-%E7%94%B5%E9%98%BB%E4%B8%93%E9%A2%98/"/>
    <id>https://lilongxin178.github.io/2024/06/20/%E9%98%BB%E5%AE%B9%E6%84%9F%E5%9F%BA%E7%A1%80-%E7%94%B5%E9%98%BB%E4%B8%93%E9%A2%98/</id>
    <published>2024-06-20T06:00:00.000Z</published>
    <updated>2024-10-23T08:57:49.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阻容感基础—-电阻专题"><a href="#阻容感基础—-电阻专题" class="headerlink" title="阻容感基础—-电阻专题"></a>阻容感基础—-电阻专题</h1><h2 id="前言基础"><a href="#前言基础" class="headerlink" title="前言基础"></a>前言基础</h2><h3 id="关于虚数"><a href="#关于虚数" class="headerlink" title="关于虚数"></a>关于虚数</h3><p>先看这样一个表达式x<em>²</em> &#x3D; 1，它有两个解：1和-1；那么若有方程x<em>²</em> &#x3D; -1呢？其在实数范围内无解，那将其进行简单的数学变换，将x<em>²</em> &#x3D; -1，改写成1* <em>x</em>* <em>x</em> &#x3D; -1。那么此时，x便成为了一个“步骤”，从1经过两次变换变为了-1。唉，那是不是可以将从1到-1这个过程看成角度的变换。<br>    那么在如下图中包含两个正交轴的坐标系上，就能够实现1到-1的转变。如下左图所示，构成的正交坐标平面称为“复平面”，其横轴为实数（Real dimension），纵轴为虚数（Imaginary dimension），并将x² &#x3D; -1的解用字母i表示，其特指逆时针旋转90°。那如果要顺时针旋转90°呢？那就乘以-i；而且乘以两次-i，结果同乘以两次i一样，都得到了-1。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20241023092242339.png" alt="image-20241023092242339"></p><p>对于阻、容、感的阻抗，我们知道电阻：R是实数部分（能量消耗），而容抗：Xc&#x3D;1jωC，和感抗XL&#x3D;jωL是虚数部分（能量的虚消耗，就是没有能量消耗，能量只是做着储存&#x2F;释放的工作），所以阻抗同样可以用复数平面来表示，任何器件阻抗都能写成实部与虚部之和：Z &#x3D; R +j*Im （公式中的“j”即虚数“i”）；对于容抗来说是顺时针旋转90°，感抗是逆时针旋转了90°（电容与电感的阻抗特性对偶）。</p><p>我们将阻抗R用幅值和相角进行重构：</p><p>阻抗的幅值：|Z| &#x3D; √(R²+I²m)  （复数的模）</p><p>阻抗的相角： &#x3D; tan⁻¹(Im&#x2F;R) rad  （复数的幅角）</p><p>通过对上述阻抗幅值的公式，可从理论上得到电容器自谐振时（由于Xc &#x3D; -XL，那么Im &#x3D; 0）的阻抗为电容器的ESR。</p><h3 id="电子电路物理参数"><a href="#电子电路物理参数" class="headerlink" title="电子电路物理参数"></a>电子电路物理参数</h3><p>​电子电路学有4个基本物理量：<strong>电压V，磁通量φ，电流I，电量Q</strong>；而这4个物理量构成了电路的理论基础，我们平时所使用的阻、容、感器件特性均从这些基本量中推理得到。由电磁学理论可知V &amp; φ和Q &amp; I之间的如下关系：</p><ol><li><p>根据麦克斯韦方程组的第三方程-法拉第定律：曲面磁通量的变化率等于感应生成电场的环流（记住：磁场跟电流是强相关的）；简单表述即：感应电场等于单位时间磁通量的变化，即： V&#x3D;dφ&#x2F;dt或dφ&#x3D;V*dt。</p></li><li><p>电磁学上将：单位时间（t）内通过导体任一横截面的电量（q）叫做电流强度（I），即I&#x3D;dq&#x2F;dt；或dq&#x3D;i*dt。</p></li></ol><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20241023092648063.png" alt="image-20241023092648063"></p><ol><li>电阻：从本质来说是载流子（自由电子是载流子的一种，当然在半导体中，空穴也是另外一种载流子）在受电场作用而位移过程中受到的阻力。</li></ol><p>——在理想情况下，电场力作用于自由电子，使电子朝电场的反向加速运动，根据牛顿第二定律，自由电子应当一直被加速（只要时间足够长，就可以将电子速度达到接近光速），电流随时间持续增大；但实际上电流到达一个定值后就不会再增大，说明存在一个“摩擦力”反抗着电子的加速；而“摩擦力”主要来自于晶体晶格的热振动，晶体中的杂质、位错、点缺陷会使电子受到散射，而散射事件使得电子失去动能并改变运动方向，从而失去前进方向上的速度分量，这就是金属有电阻的原因。</p><p>——对于横截面恒定材料的电阻R &#x3D; ρ*Len&#x2F;A，R：电阻值； ρ：体电阻率；Len：材料长度；A：材料横截面积。后续在“电阻器原理专题”中详细讲解。</p><ol start="2"><li>电容：由两个导体构成，任何两个导体之间都有一定的电容量，其本质是对两个导体在一定电压下存储电荷能力的度量；在一定电压下，能够存储的电荷越多，则这对导体的电容量就越大。</li></ol><p>——只要是两个不短路的导体，且加电压后会有电荷积累，那么它们之间就会有电容；一定要记住这个条件，后面不同电容的出现方式会超出想象，这是唯一遵循的准则。后续在“电容器原理” 以及“信号完整性基础专题”中详细讲解。</p><p>——C&#x3D;ε0<em>εr</em>A&#x2F;d，C：电容量；ε0：真空介电常数；εr：相对介电常数；A：电极面积；d：电极距离。</p><ol start="3"><li><p>电感必须需要一个有一个的圈圈么？其实并非如此，判断标准有点抽象？抽象就对了：</p><p>  1，电感周围会形成闭合磁力线圈。</p><p>  2，电感量是导体电流1A时周围的磁力线匝数（Wb）。</p><p>  3，周围磁力线匝数改变时导体两端产生感应电压（感应电动势）。——电感器涉及到了电场与磁场能量的转换，理解上更加复杂一点，后续“电感器原理”分析。</p></li></ol><p>——任何有电流流过的导体都有电感（自感），与导体的几何结构及磁导率强相关；电感将是我们后续大部分专题中的绝对主角，同学们需要学会欣赏它的精彩演绎，从而有更深入的认知。后续在“电感器原理”以及“信号完整性基础专题”中详细讲解。</p><ol start="4"><li><p>电容要发挥其作用，就必须电极两端的电荷数量（电势差）发生变化，如果电容两个电极电荷数量不变（电极两端电压保持不变），那么电容就相当于一根导线。</p></li><li><p>同理，电感要产生作用，必须流过电感的电流发生变化，如果电流没有变化，那么电感也相当于是一根导线。</p></li></ol><h3 id="理想电阻器、电容器、电感器的特性"><a href="#理想电阻器、电容器、电感器的特性" class="headerlink" title="理想电阻器、电容器、电感器的特性"></a>理想电阻器、电容器、电感器的特性</h3><p>我们已经知道了电阻器是阻碍电流通过的作用；而根据能量守恒定律，电阻器将电能转化为了热能；如果用一个字来描述电阻器的特性，那就是：阻（肉盾）。在电阻器的两端加电压会产生一定的电流，而这部分电能（I2*R）被电阻所消耗，所以大手一挥给它定个性吧：电阻器是一种耗能元件。</p><p>我们通过两种电压模式来观察电阻器的特性：直流电压和交流电压；</p><ol><li><p>在直流电压条件下，通过电阻器的电流是恒定的。</p></li><li><p>在交流电压条件下，通过电阻器的电流跟随着电压变化而变化，而电阻器阻值保持不变（理想电阻器不随电压&#x2F;电流而变化），所以电压和电流保持线性关系：I&#x3D;V&#x2F;R。</p></li></ol><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20241023095158048.png" alt="image-20241023095158048"></p><p>2，理想电容器<br>电容器是一种储能元件，将能量以静电场能（电场能量）的形式进行储存。理想电容器两端电压不能突变，我们同样通过两种电压模式来看电容器的特性：直流电压和交流电压；</p><ol><li><p>在电容器两端加直流电压（中间串有电阻R）时：</p><p>  1，上电瞬间，电容器在电路中呈现低阻抗状态，对电容器进行快速（大电流）充电，电容器两端等效于短路；</p><p>  2，随后电容器两端电压非线性（指数曲线）增加，RC充电时间常数为τ &#x3D; R*C；——RC充电时间常数时电容器两端电压达到0.63倍外加电压。</p><p>   3，电容器两端电压等于外加直流电压（理论上电容器两端电压永远小于外加直流电压，即永远充不满），此时流经电容器的电流为 0，电容器等效于开路；</p><p>   4，此时电源释放的电能，以静电场能的形式（电容器两端增加电荷）储存在电容里。</p></li><li><p>在电容器两端加交流电压，电流相位超前电压相位90°。</p></li><li><p>电容器阻抗Xc&#x3D;1&#x2F; jωC；通过电容器阻抗的计算，我们知道电容器阻抗与电容器容值及信号频率成反比，从而直观的得到电容器实际应用：大电容器用于“隔直通交”，而小电容器用于“通高阻低”。</p></li></ol><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20241023095212683.png" alt="image-20241023095212683"></p><p>3，理想电感器<br>电感器也是一种储能元件，它并不消耗电场能量，而是将电场能量转换成磁场能量，以磁场能量形式储存起来；流经理想电感器电流不能突变，通过电感的电流会产生自感电动势，其变化趋势与外加电压变化的方向相反（负反馈）。</p><p>通过两种电压模式来看电感器的特性：直流电压和交流电压；</p><p>在电感器两端加直流电压（中间串有电阻R）时：<br> 上电瞬间，电感器产生强大自感电动势与外加电压相等（后续在“电感器原理”中再来具体扯一扯这一特性）、方向相反，在电路中呈高阻抗状态（断路）；<br>随着电流增加速率慢慢减小，自感电动势也随之减小；<br>直到电流趋于稳定时，自感电动势为0，电感器在电路中相当于短路；此时电源释放的能量完全转化为电感器的磁场能量。<br>在电感器两端加交流电压，自感电动势落后于电流相位90°，外加电压超前于电流相位90°，自感电动势与外加交流电压相位完全相反；<br>电感器阻抗XL&#x3D;jωL；通过电感器阻抗的计算，我们知道了电感器阻抗与电感器感值及信号频率成正比，从而直观的得到电感器的应用：大电感器用于“通直阻交”，小电感器用于“通低阻高”，与电容器刚好相反。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20241023095251851.png" alt="image-20241023095251851"></p><h3 id="关于阻抗"><a href="#关于阻抗" class="headerlink" title="关于阻抗"></a>关于阻抗</h3><p>​电阻器是耗能元件而电容器和电感器是储能元件。所以电阻是真实的消耗电场能量：阻抗的实数部分，而电容和电感是假的电磁能量“消耗”：是阻抗的虚数部分。所以我们将阻抗Z的实部称为：电阻，虚部称为：电抗。电阻对直流电的阻碍作用我们称为电阻；电容的对交流电的阻碍作用（电抗）称为：容抗；电感的对交流电的阻碍作用（电抗）称为：感抗。当然，我们可以将电阻、容抗、感抗统统都称为阻抗。</p><h2 id="电阻器模型"><a href="#电阻器模型" class="headerlink" title="电阻器模型"></a>电阻器模型</h2><h3 id="1，电阻器理想模型"><a href="#1，电阻器理想模型" class="headerlink" title="1，电阻器理想模型"></a>1，电阻器理想模型</h3><p>​电阻器是电子系统中最常用的元件，对于理想电阻器来说，其频响特性应该是对于所有的频率下的电阻值都不变，而且相角为0°。<br>$$<br>Z&#x3D;R\angle0^{\circ}<br>$$<br><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20241023095633621.png" alt="image-20241023095633621"></p><h3 id="2，电阻器实际模型"><a href="#2，电阻器实际模型" class="headerlink" title="2，电阻器实际模型"></a>2，电阻器实际模型</h3><p>​然而实际电阻器在高频时的阻值必然会偏离其理想阻值，因为真实的电阻器必然不会只有电阻特性本身，而是由电阻、复杂的寄生电容和寄生电感所组成；虽然寄生电容值和寄生电感都非常小，但在高频时具有明显的电感或电容效应（即电感或电容对电阻器的阻抗影响较大）。实际模型如下：</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20241023095913100.png" alt="image-20241023095913100"></p><p>​根据上图可得电阻的实际等效阻抗为：<br>$$<br>Z_{real}&#x3D;\frac{(j\omega L+R)*\frac{1}{j\omega C}}{(j\omega L+R)+\frac{1}{j\omega C}}<br>$$<br>​化简可得：<br>$$<br>Z_{real}&#x3D;\frac{j\omega L+R}{(1-\omega^2LC)+j\omega RC} \<br>$$<br>​实际电阻器的阻抗和频率曲线，有两个节点，分别为<br>$$<br>f1&#x3D;\frac1{2\pi RC} \f2&#x3D;\frac1{2\pi \sqrt{LC}} \<br>$$<br>​在频率小于f1时，呈现电阻特性，在f1和f2之间，呈现电容减少阻抗，频率大于f2时，呈现电感增加阻抗的特性。</p><p>f1和f2分别对应RC滤波器的截止频率点和容抗和感抗相等时的频率点。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/v2-652fc42d11e9479f8dab18c80d6bf1ef_1440w.webp" alt="img"></p><p>​寄生电容和寄生电感与电阻器本身的器件结构、封装、尺寸等都有很大的关系，如果想要尽量减小寄生电容、电感，最好使用小封装、贴片的电阻器。<br>​在大多数数字电路中，我们可以将金属厚膜贴片电阻器（例如常用的0402封装电阻器）看成一个“理想电阻器”来应用</p><h3 id="3，电阻器特性及参数"><a href="#3，电阻器特性及参数" class="headerlink" title="3，电阻器特性及参数"></a>3，电阻器特性及参数</h3><h4 id="（1）电阻率"><a href="#（1）电阻率" class="headerlink" title="（1）电阻率"></a>（1）电阻率</h4><p>​材料 “体阻率” 的概念：<strong>是材料的固有特性，用来表示材料电阻特性的物理量，反映了材料对电流阻碍作用的属性。</strong></p><ol><li>与材料尺寸无关。<br>——它表明的是这种物质本身的导电特性，但这并不是说不会受到环境的影响，例如温度。</li><li>材料导电性能越差，其体阻率越高。<br>那我们如何通过电阻率来计算电阻值呢？对于横截面恒定材料的电阻值，可以用如下公式计算：R &#x3D; ρ*Len&#x2F;A；R：电阻值； ρ：体电阻率；Len：材料长度；A：材料横截面积。<br>对电阻的另一个描述是电导，它描述了导体导电性能的物理量，即对于某一种导体允许电流通过它的容易性的量度。它是电阻的倒数G&#x3D;1&#x2F;R，单位是S（<a href="https://so.csdn.net/so/search?q=%E8%A5%BF%E9%97%A8%E5%AD%90&spm=1001.2101.3001.7020">西门子</a>）。相应的也就有电导率：用来描述物质中<a href="https://baike.baidu.com/item/%E7%94%B5%E8%8D%B7">电荷</a>流动难易程度的参数；用字母σ表示，σ&#x3D;1&#x2F;ρ，单位是：S&#x2F;m。<br>——电阻表现的是材料对电流导通的阻力，而电导表现的是材料对电流的导通容易性；</li></ol><h4 id="（2）电阻温度系数"><a href="#（2）电阻温度系数" class="headerlink" title="（2）电阻温度系数"></a>（2）电阻温度系数</h4><p>​<strong>电阻温度系数（Temperature Coefficient of Resistance</strong>）：表示电阻当温度改变1℃时，电阻值的相对变化，单位为ppm&#x2F;℃；<br>​<strong>平均电阻温度系数定义式：</strong>TCR(平均)&#x3D; [(R2-R1)&#x2F;R1]*[1&#x2F;(T2-T1)]。</p><h4 id="（3）电阻额定功率"><a href="#（3）电阻额定功率" class="headerlink" title="（3）电阻额定功率"></a>（3）电阻额定功率</h4><p>​<strong>电阻额定功率：</strong>该参数体现了电阻器的散热能力，与电阻器的封装、尺寸相关；如下为片状电阻的尺寸及对应封装功耗。</p><ol><li><strong>稳态功率降额</strong>：<br>在相应工作温度下的降额，即器件符合曲线所规定的环境温度下功率的降额，采用P&#x3D;V²&#x2F;R公式进行计算；是器件长期稳定的工作条件</li><li><strong>瞬态功耗降额：</strong><br>电阻器脉冲功耗和稳态功率的转换曲线不同，需要查询转换曲线，将瞬态功率转换为稳态功率，然后在此基础上降额。</li></ol><h4 id="（4）额定电压"><a href="#（4）额定电压" class="headerlink" title="（4）额定电压"></a>（4）额定电压</h4><p>​<strong>额定电压</strong>：电阻器的工作电压一般有两个，需要选择其小值作为电路实际工作电压；</p><ol><li><strong>由阻值和额定功率换算出的电压。</strong><br>——该电压由电阻器封装的最大散热功耗（例如：0402封装，1&#x2F;16w功耗）决定：最大连续工作电压和最大脉冲电压。</li><li><strong>电阻器的封装耐压。</strong><br>——该电压由电阻器封装所能承受的最大击穿电压决定。</li></ol><h4 id="（5）老化系数"><a href="#（5）老化系数" class="headerlink" title="（5）老化系数"></a>（5）老化系数</h4><p>​<strong>老化系数：</strong>电阻器在额定功率的长期负荷下，阻值相对变化的百分数，表示电阻器寿命长短的参数。</p><h4 id="（6）电压系数"><a href="#（6）电压系数" class="headerlink" title="（6）电压系数"></a>（6）电压系数</h4><p>​<strong>电压系数：</strong>在规定的电压范围内，电压每变化1V，电阻器阻值的相对变化量。</p><h4 id="（7）噪声"><a href="#（7）噪声" class="headerlink" title="（7）噪声"></a>（7）噪声</h4><p>​<strong>噪声：</strong>产生于电阻器中的一种不规则的电压起伏，包括热噪声和电流噪声两部分。</p><ol><li><strong>热噪声：</strong>由于导体内部不规则的电子自由运动，使导体任意两点的电压不规则变化，属于电阻器的本征噪声。</li><li><strong>电流噪声：</strong>来源于电阻器内部结构不连续性和非完整性，与电阻器类型有非常大关系。</li></ol><h3 id="4，电阻器分类"><a href="#4，电阻器分类" class="headerlink" title="4，电阻器分类"></a>4，电阻器分类</h3><p>从不同角度，可以对电阻器的种类作不同划分，如下图所示：</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20241023150808674.png" alt="image-20241023150808674"></p><h4 id="（1）按用途分类（这种分类方式侧重于电阻的实际电路设计应用）"><a href="#（1）按用途分类（这种分类方式侧重于电阻的实际电路设计应用）" class="headerlink" title="（1）按用途分类（这种分类方式侧重于电阻的实际电路设计应用）"></a>（1）按用途分类（这种分类方式侧重于电阻的实际电路设计应用）</h4><ol><li><strong>通用型：</strong>适应一般技术要求的电阻，功率在0.06W-1W之间，阻值在1Ω-22MΩ之间，允许误差为1%~10%之间；<br>——应用于一般的数、模电路：分压、阻抗匹配、上下拉等应用。</li><li><strong>精密型：</strong>高精密度及高稳定性（低温漂：低至2ppm&#x2F;℃）电阻，功率一般不大于2W；阻值在0.01Ω~20MΩ之间，允许误差小至0.01%；相对普通电阻有更高的精度、长期稳定性、温度系数小的特性；­<br>——应用于精密仪器：医疗、量测、电信设备等，汽车电子电路，高精度电压采样电路，电源电流&#x2F;功耗监测（金属箔电阻器）电路等。</li><li><strong>功率型：</strong>又被称为发热电阻&#x2F;负荷电阻，在电路中主要起到降压和限流的作用，通常具有较高额定功率，功率可达3KW以上；主要分为三类：线绕功率电阻，膜式功率电阻，实心陶瓷电阻；<br>——应用于为大电源电路提供假负载，检测电源输出能力。</li><li><strong>高压型：</strong>能够承受瞬间的高温、高压冲击，通常用于高压装置中，功率可达100W，额定电压可达100kV，标称值可达lGΩ；通常由玻璃釉膜和合成炭膜制成；——应用于高压装置中用作分压器和吸收器，也可供整流滤波电容器的放电和熄弧用。</li><li><strong>高频型：</strong>自身电感量非常小，常被称为无感电阻，阻值一般小于1KΩ，功率范围宽，最大可达1W；在射频和微波电路中应用的主要是薄膜贴片式电阻</li></ol><h4 id="（2）按特殊用途分类，这些器件对外呈现电阻的特性，但不属于一般电阻的应用："><a href="#（2）按特殊用途分类，这些器件对外呈现电阻的特性，但不属于一般电阻的应用：" class="headerlink" title="（2）按特殊用途分类，这些器件对外呈现电阻的特性，但不属于一般电阻的应用："></a>（2）按特殊用途分类，这些器件对外呈现电阻的特性，但不属于一般电阻的应用：</h4><ol><li><strong>热敏电阻：</strong>一种传感器电阻，其电阻值随着温度的变化而改变；分为NTC（负温度系数）和PTC（正温度系数）；<br>——主要应用于对外通信接口的电路防护（例如：POTS），温度监测等；</li><li><strong>压敏电阻：</strong>具有非线性伏安特性的电阻器件，主要用于在电路承受过压时进行电压钳位（电源电路防护），吸收多余的电流以保护敏感器件（VDR）；</li><li><strong>光敏电阻：</strong>利用半导体光电效应制成的一种电阻值随入射光强弱而改变的电阻器；<br>——主要用于光控调光，光控开关等；</li><li><strong>力敏电阻：</strong>利用半导体材料的压力电阻效应制成的，能将机械力转换为电信号的特殊元件（即电阻值随外加力大小而改变）；<br>   ——用于各种矩力计、半导体传声器及各种压力传感器中。</li><li><strong>磁敏电阻：</strong>一种对磁敏感、具有磁阻效应（利用半导体的磁阻效应制造的，常用InSb材料加工而成）的电阻元件；<br>——阻值随穿过其磁通量密度的变化而变化，用于磁场强度、漏磁、制磁的检测。</li><li><strong>湿敏电阻：</strong>利用湿敏材料吸收空气中的水分而导致本身电阻值发生变化这一原理而制成。<br>——基片上覆盖一层用感湿材料制成的膜，当空气中的水蒸气吸附在感湿膜上时，元件的电阻率和电阻值都发生变化，利用这一特性测量湿度。</li><li><strong>气敏电阻：</strong> 一种半导体敏感器件，利用气体的吸附而使半导体本身的电导率发生变化的机理来进行检测。</li></ol><h3 id="5，片状电阻器"><a href="#5，片状电阻器" class="headerlink" title="5，片状电阻器"></a>5，片状电阻器</h3><p>​大多数字电路设计中使用的是片状电阻，它有非常明显的优点，足以在大多数硬件电路设计中成为“理想”电阻器：外观尺寸均匀且小型化（寄生电容、电感小），耐潮湿，耐高温（环境适应性好），可靠度高，精度高且温度系数与阻值公差小等等。</p><p>​片状电阻器按生产工艺，可分为：厚膜（Thick Film）和薄膜（Thin Film）两种。</p><h4 id="（1）薄膜电阻器的特点如下所示："><a href="#（1）薄膜电阻器的特点如下所示：" class="headerlink" title="（1）薄膜电阻器的特点如下所示："></a>（1）薄膜电阻器的特点如下所示：</h4><ol><li><p>材料相对更均匀（便于电阻值的设计），制造工艺更加可控，它还可以通过光刻或者激光修正，产生图案增加电阻路径并校准电阻值，所以薄膜电阻阻值可以做到0.1%甚至0.01%；</p></li><li><p>可选用非常低温度系数（TCR）的导电材料，使得电阻器阻值随温度变化非常小，阻值稳定可靠；</p></li><li><p>一般应用于精密应用：各类仪器仪表，医疗器械，电源，电力设备，电子数码产品等。</p></li></ol><h4 id="（2）厚膜电阻器的特点如下所示："><a href="#（2）厚膜电阻器的特点如下所示：" class="headerlink" title="（2）厚膜电阻器的特点如下所示："></a>（2）厚膜电阻器的特点如下所示：</h4><ol><li>厚膜电阻通过合金导电材料和绝缘体材料混合的糊状物质，印刷到陶瓷基板上烧制而成；其烧制成后的导电材料类似玻璃，难于切割控制阻值；所以厚膜电阻一般精度较差：10%，5%，1%是常见精度；</li><li>厚膜电阻导电材料为粑状物质，其温度系数(TCR)上很难控制，一般较大；<br>——TCR（ppm&#x2F;℃）是一个不容忽视的微小参数，1%的普通电阻的TCR系数在几千ppm&#x2F;°C范围内，整体阻值的变化与电阻的材料、实际功率以及物理尺寸相关。</li><li>但是厚膜电阻成本非常低，迄今为止电气和电子设备中使用最多的电阻器。<br>   ——单板上常用的0402&#x2F;0603&#x2F;0805&#x2F;1206等封装贴片电阻器，一般都是厚膜电阻</li></ol><h4 id="（3）薄膜电阻与厚膜电阻对比"><a href="#（3）薄膜电阻与厚膜电阻对比" class="headerlink" title="（3）薄膜电阻与厚膜电阻对比"></a>（3）薄膜电阻与厚膜电阻对比</h4><ol><li>薄膜电阻器相对于厚膜电阻器的电阻层更加均匀，容易制作高精度、稳定的电阻；</li><li>薄膜电阻器的电阻层有其最佳厚度的要求，如果薄膜电阻的电阻层太薄则更容易被氧化，并严重影响其温度系数（TCR）；<br>——薄膜电阻器对电阻层厚度的要求严重影响了薄膜电阻的阻值范围，且大阻值薄膜电阻的退化率也非常高。</li><li>厚膜电阻依靠玻璃基体中金属粒子间的接触形成电阻，这些触点构成完整电阻；<br>——工作中的热应变会中断接触，阻值会随着时间和温度持续增加，其稳定性较差。</li><li>厚膜电阻结构中成串的电荷运动，粒状结构使厚膜电阻产生较高的电流噪声，相同尺寸下，电阻值越高（金属成分越少），噪声越高，稳定性越差；<br>——因为厚膜电阻中的自由电子受到电场力的作用下，在运动过程中碰撞的概率（杂质颗粒多）远大于薄膜电阻，所以电子运动更加杂乱，噪声更大。</li><li>厚膜电阻结构中的玻璃成分在电阻加工过程中形成玻璃相保护层，因此厚膜电阻的抗湿性高于薄膜电阻，更不容易被氧化。</li></ol><p>​薄膜电阻一般是作为精密型电阻和高频型电阻的选择。而厚膜电阻器价格便宜，小型化，寄生电感&#x2F;电容相对小，足以满足一般的数字电路硬件设计中对于电阻器的要求。</p><h3 id="6，金属膜电阻器"><a href="#6，金属膜电阻器" class="headerlink" title="6，金属膜电阻器"></a>6，金属膜电阻器</h3><p>​金属箔电阻器的各个方面表现来看，它都是目前最接近完美的电阻器，或则说是在众多电阻器中最像“电阻器”的电阻器，是理想的精密电阻器。</p><p>​<strong>金属箔电阻：</strong>通过真空熔炼形成镍铬合金，然后通过滚碾的方式制作成金属箔，再将金属箔黏合在氧化铝陶瓷基底上，再通过光刻工艺来控制金属箔的形状，从而控制电阻大小的电阻器。</p><p>特点：</p><ol><li><p><strong>高精度：</strong>调阻分辨率可达0.0005%（5ppm）；</p></li><li><p><strong>低功率系数（PCR）：</strong>对电阻施加额定功率，阻值变化单位为ppm&#x2F;W；</p></li><li><p><strong>低TCR：</strong>极低温度漂移（0.2ppm&#x2F;c）；</p></li><li><p><strong>高负载寿命稳定性：</strong>50ppm；</p></li><li><p><strong>低噪声：</strong>金属箔电阻器产生的噪音最小，电流通过金属合金的内部微粒边界导通电路；微粒间的电流路径经过一个或者更多的金属晶体包括多层，更长的路径穿过分界线，减少了噪音产生的几率；</p></li><li><p><strong>低寄生电感&#x2F;电容：</strong> 在平面形电阻中，电阻路径图案有意设计成为平行的几何直线以抵消电抗：蛇形平面电阻阻值路径如右下图所示 ，邻近反方向电流的互感减小了线路电感，也减小了电容。</p></li></ol><p>、</p><h3 id="7，绕线电阻器"><a href="#7，绕线电阻器" class="headerlink" title="7，绕线电阻器"></a>7，绕线电阻器</h3><p>​<strong>绕线电阻器：</strong>是将合金（例如：镍铬&#x2F;锰铜合金）导线绕在氧化铝的陶瓷基板上，用圈圈的圈数来控制电阻值大小的电阻器；其表面通常涂有保护漆或则玻璃釉。</p><p>优点：</p><ol><li><p><strong>高精度：</strong>容差小至0.005%，可以用作精密电阻；</p></li><li><p><strong>小电流噪声：</strong>合金材料本身是均匀、细致的晶体；</p></li><li><p><strong>低TCR：</strong>合金材料的温度系数（TCR）很小；<br>——铜的电阻温度系数非常大（约4000ppm&#x2F;℃），其它纯金属的电阻温度系数都非常大，只有几款金属合金温度系数小、电阻率大，才适合做线绕电阻（具体数据参考上章）。</p></li><li><p><strong>大功率：</strong>电阻散热性能好，体积做大后外加散热器，功率能做的很高；</p></li><li><p>工作稳定、可靠性高，能承受高温工作环境（可达300℃）。</p></li></ol><p>缺点：</p><ol><li>由于采用绕线方式，所以寄生电感和电容都相对较大，不能应用于高频电路中；</li><li>相对片状电阻器更大的体积以及封装；</li><li>电阻器阻值范围受限，一般不超过100KΩ。</li></ol><h3 id="8，膜式电阻"><a href="#8，膜式电阻" class="headerlink" title="8，膜式电阻"></a>8，膜式电阻</h3><h4 id="（1）碳膜电阻"><a href="#（1）碳膜电阻" class="headerlink" title="（1）碳膜电阻"></a>（1）碳膜电阻</h4><p>​<strong>碳膜电阻器：</strong>采用高温真空镀膜技术将碳紧密附在瓷棒表面形成碳膜，然后加适当接头切割，并在其表面涂上环氧树脂密封保护而成的，通过碳膜的厚度和碳浓度可以控制电阻的大小。</p><p>特点：</p><ol><li><p>工艺相对碳合成电阻（采用碳棒）更加复杂一点，精度更高：±5%，±2%；<br>——为了更加精确的控制电阻，在碳膜上加工出螺旋沟槽，螺旋越多电阻越大；最后加金属引线，树脂封装成型。</p></li><li><p>阻值范围广（2.1Ω~10MΩ）、极限电压较高、功率范围宽（可达10W）；</p></li><li><p>有极好的长期稳定性，电压的改变对阻值的影响极小，且具有负温度系数；</p></li><li><p>电阻原料价格低，制作容易，生产成本低，碳膜电阻价格便宜，但体积较大；</p></li><li><p>由于碳质材料本身的原因，温度特性相对较差。</p></li></ol><h4 id="（2）金属膜电阻器"><a href="#（2）金属膜电阻器" class="headerlink" title="（2）金属膜电阻器"></a>（2）金属膜电阻器</h4><p>​<strong>金属膜电阻器：</strong>利用真空沉积技术在白陶瓷棒上形成一层镍铬合金镀膜，然后在镀膜上加工出螺旋沟槽来精确控制电阻。</p><p>优点：</p><ol><li><p>精度高达0.1%（精密电阻），同时由于制造简单，可以随意的调整材料成分与镀膜厚度，电阻范围很宽（1Ω~10MΩ），可以做E192系列；<br>——E192系列有192种数字，E192系列的电阻格误差很小，有192个基本数，有0.5%，0.2%，0.1% 共3种精度；看到这种规格的精度，就知道价格就不低了，多用于对精度有较高要求的场合。</p></li><li><p>电压稳定性好，温度特性（TCR，约100ppm&#x2F;℃）好；<br>——采用高稳定性的特种合金作为电阻材料（翻译一下：这是合金材料本身的特性，跟其它没毛关系），经过真空加热、蒸发获得，具有较好的耐热性，各项性能稳定。</p></li><li><p>耐热性好，额定工作温度为70℃，最高工作温度达155℃；</p></li><li><p>采用高热传导瓷心，散热能力强，功率负荷大，最高可达25W；</p></li><li><p>工作频率范围宽，噪音小，可以应用于高频电路中（高频电阻）；</p></li><li><p>在相同功率下，体积相对碳膜更小，约为碳膜电阻的一半，但成本更高；</p></li><li><p>应用非常广泛，适用于交流、直流及脉冲电路。</p></li></ol><h4 id="（3）玻璃釉电阻器"><a href="#（3）玻璃釉电阻器" class="headerlink" title="（3）玻璃釉电阻器"></a>（3）玻璃釉电阻器</h4><p>​<strong>玻璃釉电阻器：</strong>是由金属银、铑、钌等金属氧化物和玻璃釉粘合剂混合成浆料，涂复在陶瓷骨架体上，经高温烧结而成。</p><p>金属玻璃釉电阻器特点：</p><ol><li><p>耐高温，耐湿性好，稳定性好；</p></li><li><p>噪声小，高频特性好；</p></li><li><p>温度系数小；</p></li><li><p>阻值范围大，阻值范围为4.7Ω~200 MΩ；</p></li><li><p>额定功率有1&#x2F;8 W、l&#x2F;4 W、l&#x2F;2 W、1 w、2 W，大功率有 500 W；</p></li><li><p>耐高压，最高电压高达50KV。</p></li></ol><h3 id="9，电阻器应用"><a href="#9，电阻器应用" class="headerlink" title="9，电阻器应用"></a>9，电阻器应用</h3><ol><li><p>在相同电压下，使用不同阻值的电阻器可以得到不同的电流：I &#x3D; U&#x2F;R；</p></li><li><p>在相同电流下，使用不同阻值的电阻器可以得到不同的电压：U &#x3D; I*R。</p></li></ol><p>​我们根据U&#x3D;I*R公式可以看到：在实际应用中电阻器必须通过其电压降或电流大小，才能体现其作用，而“电阻”特性本身并不能参与信息处理、传输、存储。</p><p>电阻器应用：</p><ol><li>保持信号状态稳定：上&#x2F;下拉应用；</li><li>限制线路电流大小：限流应用；</li><li>调整线路信号质量（例如：匹配特征阻抗）：线路匹配应用；</li><li>电源电路中监测功耗：电流监测应用。</li></ol><h4 id="（1）上拉-下拉应用"><a href="#（1）上拉-下拉应用" class="headerlink" title="（1）上拉&#x2F;下拉应用"></a>（1）上拉&#x2F;下拉应用</h4><p>​<strong>上拉&#x2F;下拉：</strong>是将不确定的信号通过一个电阻器钳位在高&#x2F;低电平，电阻器同时起限流作用；上&#x2F;下拉电阻器的基本原理是：提供被上下拉的电路一定的电流驱动能力。</p><ol><li>上拉是对电路注入电流，即拉电流；</li><li>下拉是对电路输出电流，即灌电流。</li></ol><p>​电阻器的上拉&#x2F;下拉应用非常广泛，在不同硬件电路设计中，其作用也有所不同：</p><ol><li>保证器件输入管脚状态的稳定：</li></ol><ul><li><p>边沿触发的输入管脚，如果器件内部没有内置上&#x2F;下拉电阻，需外接上&#x2F;下拉电阻器，使维持管脚不被误触发；——例如中断、复位等可能为边沿触发的重要信号，必须保证其在工作期间的状态稳定。</p></li><li><p>有些应用场合不希望出现高阻状态，可以通过上拉&#x2F;下拉电阻器的方式使处于稳定状态；——一些器件在上&#x2F;下电瞬间的输出不受控（高阻），为保证输入器件管脚的稳定，外接上&#x2F;下拉保证其正确状态；例如输入MOS管G极的信号，如果是高阻状态，则G极电荷积聚可能导致MOS管误导通。</p></li><li><p>确保端口常态时有确定电平，例如：检测低电平的输入管脚，接上拉电阻器，使其常态就为高电平（适用一般设计原则）；——端口上&#x2F;下拉的默认状态是否为管脚触发状态，取决于其应用需求，例如：单板上某个器件的启动有特定要求，初始默认要一直处于复位状态（假设低电平复位），那么其复位信号需下拉。</p></li><li><p>解决总线驱动能力不足：上拉电阻提升管脚输出拉电流，下拉电阻提升管脚输出灌电流大小；——例如，有些单片机的高电平驱动能力不足（一般器件管脚的低电平驱动电流大于高电平驱动电流），需要增加上拉电阻。</p></li><li><p>悬空输入管脚比较容易受外界的电磁干扰（天线）， 外部上&#x2F;下拉可以提高总线的抗电磁干扰能力。</p></li></ul><p>​2.用于输出&#x2F;输出信号电平的转换或匹配：</p><ul><li>电平匹配：输出、输入信号不同电平之间的转换；<br>——（1）TTL电平输出驱动CMOS电平管脚，由于高电平电压判断不同，需要上拉电阻器用于提升驱动电压；<br>    （2）不同差分电平（LVPEC,HSTL等）的共模电压有差别，采用AC耦合后再输入端电阻上&#x2F;下拉分压得到满足输入共模电压要求的电平。</li><li>用于传输线终端匹配（例：戴维南匹配）。</li></ul><p>​3.用于对CMOS结构器件输入管脚的保护：</p><ul><li>保护CMOS结构输入管脚内的保护二极管，防止保护二极管过流损坏；<br>  ——有些器件输入管脚内置保护二极管，防止输入信号电压超出管脚允许电压范围后破坏输入管脚内部结构，上下拉电阻有一定的分流能力，利于信号电平的稳定。</li><li>COMS结构输入管脚中不用的管脚不能悬空，一般接上&#x2F;下拉电阻降低输入阻抗，提供泄荷通道，防止静电造成损坏。  ——由于CMOS结构管脚的输入阻抗非常大，积聚在管脚上的电荷不容易泄放，容易损坏输入管脚。</li></ul><p>​4.上拉电阻为OD&#x2F;OC门提供驱动电流：</p><ul><li>根据IIC总线协议，上拉电阻的取值和I2C总线的频率及负载电容有关，电阻的大小对时序有一定影响，对信号的上升时间和下降时间也有影响；</li><li>电阻计算公式：Rmin＝{Vdd(min)-0.4V}&#x2F;3mA；Rmax &#x3D; (T&#x2F;0.874) *C。</li></ul><h5 id="取值原则"><a href="#取值原则" class="headerlink" title="取值原则"></a>取值原则</h5><ol><li>从节约功耗及芯片的灌电流能力考虑：电阻值应当足够大；</li></ol><p>——电阻大，电流小，损耗小。</p><ol start="2"><li>从确保足够的驱动电流考虑应：电阻值当足够小；</li></ol><p>——电阻小，电流大，驱动能力大。</p><ol start="3"><li>过大的上拉电阻阻值，可能会使边沿变平缓（例如OD&#x2F;OC门，靠上拉提供驱动电流）。</li></ol><p>综合考虑以上三点原则，一般在数字电路的上&#x2F;下拉电阻设计中选取：1k到10k之间。</p><h4 id="（2）限流运用"><a href="#（2）限流运用" class="headerlink" title="（2）限流运用"></a>（2）限流运用</h4><ol><li><p>LED点灯电路：电阻器用于限制发光二极管的电流，控制发光量；</p></li><li><p>三极管&#x2F;MOS管电路，电阻用于控制三极管&#x2F;MOS管所处的工作状态。</p></li><li><p>按键、开关电路：串接电阻器用于限制电容器短路瞬间时的大电流冲击，避免电容器损坏和产生过冲脉冲；</p></li><li><p>ESD防护电路：人容易触碰到的板内器件，可插拔连接器（单端信号线），面板接口（复位按键，指示灯等）等，这些位置更容易由接触而引入ESD，导致器件损坏，串接大电阻（百欧姆级别）用于ESD防护；</p></li><li><p>开关电源脉冲尖峰吸收电路（RCD）：MOS管开关瞬间存在电压尖峰，RCD电路用来吸收漏感能量，减缓电压尖峰。</p></li></ol><h4 id="（3）0Ω电阻使用"><a href="#（3）0Ω电阻使用" class="headerlink" title="（3）0Ω电阻使用"></a>（3）0Ω电阻使用</h4><ol><li>模拟地与数字地单点接地：如果将模拟地和数字地大面积直接相连，会导致数模之间的互相干扰；单点接地有很多种方式：阻、容、感（包括磁珠），单过孔，金属化机械孔等等，它们有不同的优缺点，根据实际需求进行设计；</li></ol><ul><li><p>磁珠连接：带阻限波器，抑制某一频段（高频段）的噪声，预先评估噪声频点，并选择合适磁珠；</p></li><li><p>电容连接：隔直通交流，没有直流通路，会累计电荷造成浮地；</p></li><li><p>电感连接：抑制低频段噪声干扰；</p></li><li><p>0Ω连接：相当于很窄的电流通路（类似单点接地），能够有效地限制环路电流，使噪声得到抑制。</p></li></ul><ol start="2"><li>为调试方便或电路兼容设计需求；</li></ol><ul><li>作跳线使用；例如：IIC控制器二选一电路；</li><li>匹配电路中参数不确定，用0Ω替代，调试后再替换；</li><li>PCB布线时走线困难，用0Ω跳过；</li><li>方便调试；</li><li>用于电流回路平面不连续时的跨接：</li><li>替代跳线座&#x2F;拨码开关：使用选焊确定不同单板&#x2F;应用场景的不同配置，避免拨码开关&#x2F;跳线帽的失效风险。</li></ul><h4 id="（4）其它应用"><a href="#（4）其它应用" class="headerlink" title="（4）其它应用"></a>（4）其它应用</h4><ol><li>降压应用：电流经过电阻器时必然会产生电压降，电阻值越大，电压降越大（U&#x3D;I*R）；</li></ol><ul><li>放大器的负载电阻：应用了电阻器的降压作用；</li><li>电阻器R1和R2构成一个分压器：经过这两个电阻的电流I相等。</li><li>RC滤波网络：一种特殊的分压器。</li></ul><ol start="2"><li><p>电源电流监测应用：采用精密大功率电阻（例如：金属箔电阻器）串接在电源电路上，缓启动芯片监测电阻两端电压，从而监控电源功率；</p></li><li><p>提供负载电路：一些开关电源&#x2F;LDO有最小工作负载的要求，此时在电源输出端增加并接电阻，用于提升电源模块工作的稳定性（与LDO整体传递函数有关，一般可选用电容ESR充当负载）；</p></li><li><p>传输线阻抗匹配应用：传输线阻抗匹配电阻是一种非常普遍的应用；一般分为：源端串联匹配和终端并联匹配两种，示意图如下所示。</p></li></ol><h3 id="10，电阻器失效机理"><a href="#10，电阻器失效机理" class="headerlink" title="10，电阻器失效机理"></a>10，电阻器失效机理</h3><ol><li><p>开路（主要失效）：主要失效机理为电阻膜烧毁或大面积脱落（电应力），基体断裂、引线帽与电阻体脱落（机械应力）；</p></li><li><p>阻值漂移超规范（次要失效）：电阻膜有缺陷或退化，基体有可动钠离子，保护涂层不良；</p></li><li><p>引线断裂：电阻体焊接工艺缺陷，焊点污染，引线机械应力损伤；</p></li><li><p>短路：银的迁移，电晕放电。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;阻容感基础—-电阻专题&quot;&gt;&lt;a href=&quot;#阻容感基础—-电阻专题&quot; class=&quot;headerlink&quot; title=&quot;阻容感基础—-电阻专题&quot;&gt;&lt;/a&gt;阻容感基础—-电阻专题&lt;/h1&gt;&lt;h2 id=&quot;前言基础&quot;&gt;&lt;a href=&quot;#前言基础&quot; class=&quot;</summary>
      
    
    
    
    <category term="硬件探讨" scheme="https://lilongxin178.github.io/categories/%E7%A1%AC%E4%BB%B6%E6%8E%A2%E8%AE%A8/"/>
    
    
    <category term="器件类" scheme="https://lilongxin178.github.io/tags/%E5%99%A8%E4%BB%B6%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>锁相环结构及原理探究</title>
    <link href="https://lilongxin178.github.io/2024/04/13/%E9%94%81%E7%9B%B8%E7%8E%AF%E7%BB%93%E6%9E%84%E5%8F%8A%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6/"/>
    <id>https://lilongxin178.github.io/2024/04/13/%E9%94%81%E7%9B%B8%E7%8E%AF%E7%BB%93%E6%9E%84%E5%8F%8A%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6/</id>
    <published>2024-04-13T06:00:00.000Z</published>
    <updated>2024-10-22T09:05:36.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="锁相环结构及原理探究"><a href="#锁相环结构及原理探究" class="headerlink" title="锁相环结构及原理探究"></a>锁相环结构及原理探究</h1><h2 id="一、锁相环基本工作原理及常见PLL"><a href="#一、锁相环基本工作原理及常见PLL" class="headerlink" title="一、锁相环基本工作原理及常见PLL"></a>一、锁相环基本工作原理及常见PLL</h2><h3 id="1-1锁相环基本工作原理"><a href="#1-1锁相环基本工作原理" class="headerlink" title="1.1锁相环基本工作原理"></a>1.1锁相环基本工作原理</h3><p>PLL 的起始部分是稳定晶体参考频率， XTAL。它被 R 计数器分频到较低频率。这一经分频后的频率被称为比较频率（Fcomp），并输入到鉴相器。鉴频鉴相器输出电流，其直流均值与比较频率和经 N 分频器后的输出频率的相位差成比例。这个比例常数为 KФ，它就是电荷泵能流出或吸入电流的幅度。理论上，这一项除以 2π 是正确的，但没有必要在本书所有公式中这样做，因为它会被 VCO 中带来的 2π 所抵消。所以， KФ 单位是 m A &#x2F; (2π 弧)。将鉴相器输出的直流均值电流乘以环路滤波器阻抗 Z(s)，就得到 VCO（压控振荡器）输入电压。 VCO是电压到频率的转换器，具有比例系数 KVCO 。环路滤波器是低通滤波器，通常用分离器件实现。 环路滤波器随应用而各异。 调谐电压调节 VCO的输出相位。这样 VCO 的输出相位经 N 分频后就与比较频率相位相等。因为相位是频率的积分，所以也就意味着， VCO 的输出频率经 N 分频后与比较频率相等。输出频率可由下式表达：$$F_{out}&#x3D;\frac{N}{R}*XTAL$$</p><h3 id="1-2常见PLL类型"><a href="#1-2常见PLL类型" class="headerlink" title="1.2常见PLL类型"></a>1.2常见PLL类型</h3><p>第一个 PLL 集成芯片大约出现在 1965 年，是一个纯粹的模拟器件。采用一个模拟乘法器(四象限乘法器)作为鉴相器;环路滤波器用无源或者有源 RC 滤波器实现，利用大家熟知的压控振荡器 VCO产生 PLL的输出信号。今天,我们称这种类型的 PLL为“线性PLL”(LPLL)。在接下来的几年里,PLL 缓慢而稳定地转移到数字领域。大约在 1970年出现了第一个数字 PLL(DPLL),实际上,它是一个混合器件,仅仅鉴相器采用数字电路实现，即使用一个 EXOR门或者一个JK 触发器,剩下的模块仍然是模拟电路。几年以后,发明了“全数字”PLL(ADPLL)。ADPLL毫无例外地全部由数字功能模块组成，因此不包含任何无源元件,如电阻和电容等。类似滤波器,PLL 也可以用软件实现。在这种情况下,PLL 的功能不再用一些专用的硬件实现，而是用计算机程序完成。我们称这种 PLL为SPLL</p><p>​总结:线性PLL（LPLL）、数字PLL（DPLL)、全数字PLL（ADPLL）、程控PLL（SPLL）</p><p>​</p><h2 id="二、PLL各组件组成及其传递函数"><a href="#二、PLL各组件组成及其传递函数" class="headerlink" title="二、PLL各组件组成及其传递函数"></a>二、PLL各组件组成及其传递函数</h2><p>​我们把PLL分成几个子模块，分别是PD（PFD+CP）、环路滤波器（Loop Filter，LPF）、VCO和分频器Divider。首先推导各子模块的传递函数。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240413200256452.png"></p><h3 id="2-1-PD（PFD-CP）（带有电荷泵输出的鉴相器）"><a href="#2-1-PD（PFD-CP）（带有电荷泵输出的鉴相器）" class="headerlink" title="2.1 PD（PFD+CP）（带有电荷泵输出的鉴相器）"></a>2.1 PD（PFD+CP）（带有电荷泵输出的鉴相器）</h3><p>​PD的输入是参考时钟和反馈时钟的相位差，输出是CP的电流Icp。实际上，PLL的锁定过程中，PD并不是一个连续的模型，CP的电流仅在有相位差的时间段内会打开，因此它是一个离散的信号。但是为了简化计算，我们构建PLL线性模型中，把PD看作一个连续输出电流信号的模块。为了保证这个结论近似成立，必须要有一定的条件约束。这个条件就是：PLL环路的响应要远小于参考时钟的频率，也就是说环路带宽要小于1&#x2F;10~1&#x2F;15的参考时钟频率。<br><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240413200331218.png"></p><p>PD的函数图像如上图所示，在-2π~2π的区间内，都有相位差和Icp的线性关系，其斜率为<img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/eq">，即PD的传递函数：$$K_{PD}&#x3D;\frac{I_{cp}}{2\pi}$$</p><p>鉴相器种类总结：1.模拟乘法器鉴相  2.EXOR（异或门）鉴相  3.JK触发器鉴相  4.PFD鉴相器</p><p>PFD鉴相器：<img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240413200837410.png"></p><h3 id="2-2-LPF（环形滤波器）"><a href="#2-2-LPF（环形滤波器）" class="headerlink" title="2.2 LPF（环形滤波器）"></a>2.2 LPF（环形滤波器）</h3><p>LPF是由电阻电容构成的，输入为CP的电流Icp，输出为控制VCO的电压Vctrl，传递函数Z(s)的推导比较容易。下图列出了一阶、二阶、三阶环路滤波器的电路图。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240413200917020.png"></p><p>由上图可知，一阶环路滤波器的传递函数为：<br>$$<br>Z(s)&#x3D;\frac{1+RC_1s}{C_1s}<br>$$<br>二阶环路滤波器的传递函数为：<br>$$<br>Z(s)&#x3D;\frac{s+\frac{1}{RC_1}}{C_2s(s+\frac{1}{R(C_1|C_2))})}<br>$$<br>三阶环路滤波器的传递函数为：<br>$$<br>Z(s)&#x3D;\frac{\frac{1}{C_{3}s}}{\frac{1}{C_{3}s}+R_{3}}\times[(\frac{1}{C_{1}s}+R)\parallel\frac{1}{C_{2}s}\parallel(\frac{1}{C_{3}s}+R_{3})]<br>$$</p><h3 id="2-3-VCO-CCO（受控振荡源）"><a href="#2-3-VCO-CCO（受控振荡源）" class="headerlink" title="2.3 VCO&#x2F;CCO（受控振荡源）"></a>2.3 VCO&#x2F;CCO（受控振荡源）</h3><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240413202234758.png"></p><p>VCO是PLL的核心模块，主要分为Ring-VCO和LC-VCO两大类，有很多巧妙复杂的具体电路结构，但在PLL线性模型中，我们把它看成一个理想的积分器，其输出频率随输入电压线性变化，即：</p><p>$$<br>\omega_{out}&#x3D;\omega_0+K_{VCO}\cdot V_{ctrl}<br>$$<br>其中斜率为Kvco。VCO的输入为LPF的输出电压Vctrl，输出为相位，上述公式两侧对时间进行积分（忽略），即：</p><p>$$<br>\int\omega_{out}dt&#x3D;K_{VCO}\cdot\int V_{ctrl}dt<br>$$<br>频率对时间的积分为相位，整理可得其传递函数为：</p><p>$$<br>\frac{\phi_{out}}{V_{ctrl}}&#x3D;\frac{K_{VCO}}{s}<br>$$<br>因为 VCO是一个模拟电路,它的参数(比如$\omega_{0}$）易受到器件偏差温度漂移和老化等问题的影响。大多数 VCO的数据中都会标明的温度系数通常是以 ppm&#x2F;C 为单位给出。</p><h3 id="2-4-Divider（分频器）"><a href="#2-4-Divider（分频器）" class="headerlink" title="2.4 Divider（分频器）"></a>2.4 Divider（分频器）</h3><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240413202658262.png"> </p><p>分频器的模型比较简单，其输入为VCO的输出相位，输出为反馈时钟相位，传递函数为<br>$$<br>\frac{\phi_{div}}{\phi_{out}}&#x3D;\frac{1}{N}<br>$$<br>​若 VCO频率较高， 用纯 CMOS 计数器则难以处理较高频率。 为避免这种困境， 常用预分频器将 VCO频率分频到较低频率区处理。预分频器常由二的幂次方来分频，这样易于实现。常用的预分频器件有：单模、双模、四模预分频器。其中，双模预分频器最为常用。  </p><h3 id="2-5-PLL的环路增益、闭环传递函数"><a href="#2-5-PLL的环路增益、闭环传递函数" class="headerlink" title="2.5 PLL的环路增益、闭环传递函数"></a>2.5 PLL的环路增益、闭环传递函数</h3><p>根据我们上述推导的PLL各模块的传递函数，我们可以很容易的写出PLL的环路增益、闭环传递函数（LPF以二阶为例），分别是：</p><p>有传递函数：<br>$$<br>H_(s)&#x3D;K_{PD}\cdot Z(s)\cdot\frac{K_{VCO}}{s}&#x3D;\frac{K_{PD}\cdot K_{VCO}\cdot(s+\frac{1}{RC_{1}})}{C_{2}s^{2}(s+\frac{1}{R(C_{1}|C_{2}))})}<br>$$<br>环路增益即环路上PD、LPF、VCO和Divider传递函数的乘积：</p><p>$$<br>H_{loop}(s)&#x3D;\frac{K_{PD}\cdot Z(s)\cdot K_{VCO}}{N\cdot s}&#x3D;\frac{K_{PD}\cdot K_{VCO}\cdot(s+\frac{1}{RC_1})}{N\cdot C_2s^2(s+\frac{1}{R(C_1|C_2))})}<br>$$<br>闭环传递函数即：</p><p>$$<br>H_{close}(s)&#x3D;\frac{H_{open}(s)}{1+H_{loop}(s)}&#x3D;\frac{\frac{K_{PD}\cdot K_{VCO}}{C_{2}\cdot}\cdot(s+\frac{1}{RC_{1}})}{s^{3}+\frac{1}{R(C_{1}|C_{2})}\cdot s^{2}+\frac{K_{PD}\cdot K_{VCO}}{N\cdot C_{2}}\cdot s+\frac{K_{PD}\cdot K_{VCO}}{N\cdot R\cdot C_{1}\cdot C_{2}}}<br>$$</p><h3 id="2-6-PLL各模块的噪声对PLL输出相位噪声的贡献"><a href="#2-6-PLL各模块的噪声对PLL输出相位噪声的贡献" class="headerlink" title="2.6 PLL各模块的噪声对PLL输出相位噪声的贡献"></a>2.6 PLL各模块的噪声对PLL输出相位噪声的贡献</h3><p>输入参考时钟的输出噪声为相位噪声；PD的输出噪声为CP的电流噪声；LPF的输出噪声为Vctrl上的电压噪声；VCO的输出噪声为相位噪声；Divider的输出噪声为相位噪声。各模块的输出噪声到PLL输出端的传递函数，即各模块的输出端到PLL输出端的开环增益，除以1加环路增益，各模块的传递函数及其噪声到PLL输出端的传递函数总结如下表：<br><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240413203145865.png"></p><p>可以看出输入参考时钟、PD和Divider的噪声为低通特性，LPF的噪声为带通特性，VCO的噪声为高通特性。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240413203232584.png"></p><p>值得注意的是，这里没有讨论PD的输出噪声对PLL的影响，我的理解是，因为在PLL锁定或者近似锁定的情况下，相位差占整个周期的比例很小，也就是说，每个周期内，只有很小比例的时间CP会开启并引入电流噪声，因此可以忽略。 </p><p>对于不同模块引入的噪声，除了在设计上降低其本身的噪声外，也可以通过PLL系统参数的调整来抑制噪声，如下图所示。减小PLL的环路带宽，可以抑制低通的带内噪声，如输入参考时钟的噪声、CP的噪声和Divider的噪声；增大PLL的环路带宽，可以抑制高通的带外噪声，即VCO的噪声。当然，通过减小（增大）带宽，来抑制带内（带外）噪声，势必也会导致带外（带内）的噪声贡献增大。</p><p>这里有一个重要的结论：PLL的相位噪声，等于各模块输出噪声乘以其到PLL输出端的传递函数的平方加和。如下：</p><p>$$<br>\varphi_{n,all}&#x3D;\varphi_{n,ref}(N\cdot\frac{L\left(s\right)}{1+L\left(s\right)})^{2}+i_{n,rp}^{2}(\frac{N}{K_{PD}}\cdot\frac{L\left(s\right)}{1+L\left(s\right)})^{2}+v_{n,ctri}^{2}(\frac{K_{VCO}}{s}\cdot\frac{1}{1+L\left(s\right)})^{2}+\varphi_{n,rco}(\frac{1}{1+L\left(s\right)})^{2}+\varphi_{n,div}(-N\cdot\frac{L\left(s\right)}{1+L\left(s\right)})^{2}<br>$$<br>这里有一个有意思的点，如果CP的电流噪声较大，应该如何优化呢？正常来说电流噪声与电流值成正比，因此减小Icp可以降低CP本身的电流噪声，但是可以看到，其到PLL输出端的传递函数中，Kpd在分母上，并且是平方关系，一约分的话，还有一个Icp在分母上，也就是说，尽管减小Icp降低了CP本身的电流噪声，但是却导致对PLL输出端的噪声贡献增大。正确的方法应该是增大Icp。当然，考虑到实际情况Icp打开的时间占比很短，这个噪声的贡献实际应该很小。</p><h2 id="三、-PLL关键参数"><a href="#三、-PLL关键参数" class="headerlink" title="三、 PLL关键参数"></a>三、 PLL关键参数</h2><h3 id="3-1-PLL参数"><a href="#3-1-PLL参数" class="headerlink" title="3.1 PLL参数"></a>3.1 PLL参数</h3><p>设计时需要考虑的参数因子</p><p>1.参考(或输人)信号 $u_1(t)$<br>2.参考信号的角频率$\omega_{1}$<br>3.VCO 的输出信号 $u_2(t)$<br>4.一 输出信号的角频率 $\omega_{2}$<br>5.鉴相器的输出信号 $u_{\mathrm{d}}(t)$<br>6.环路滤波器的输出信号 $u_{\mathrm{f}}(t)$<br>7.相位误差 $\theta$<br>8.定义为信号 $u_{\mathrm{i}}(t)$ 和信号 $u_{2}(t)$之间的相位差</p><p>重要参数（用以确定锁相环稳定性）：</p><p>1.环路带宽（应在输入频率的1&#x2F;10—1&#x2F;15左右）</p><p>2.阻尼系数</p><p>3.固有频率（自然频率）</p><h3 id="3-2-PLL重要参数推导"><a href="#3-2-PLL重要参数推导" class="headerlink" title="3.2 PLL重要参数推导"></a>3.2 PLL重要参数推导</h3><p>已知：<br>$$<br>H_{close}(s)&#x3D;\frac{H_{open}(s)}{1+H_{loop}(s)}&#x3D;\frac{\frac{K_{PD}\cdot K_{VCO}}{C_{2}\cdot}\cdot(s+\frac{1}{RC_{1}})}{s^{3}+\frac{1}{R(C_{1}|C_{2})}\cdot s^{2}+\frac{K_{PD}\cdot K_{VCO}}{N\cdot C_{2}}\cdot s+\frac{K_{PD}\cdot K_{VCO}}{N\cdot R\cdot C_{1}\cdot C_{2}}}<br>$$<br>将该传递函数分母写成归一化形式（电路及控制理论）</p><p>分母：$$s^{2}+2\zeta\omega_{\mathrm{n}}s+\omega_{\mathrm{n}}^{2}$$</p><p>所以有$$H(s)&#x3D;\frac{2s\zeta\omega_\mathrm{n}+\omega_\mathrm{n}^2}{s^2+2s\zeta\omega_\mathrm{n}+\omega_\mathrm{n}^2}$$</p><p>此时有固有频率及阻尼系数为：<br>$$<br>\omega_{n}&#x3D;\sqrt{\frac{K_{loop}}{N}},\xi&#x3D;\frac{\omega_{n}}{2\cdot\omega_{Z}}<br>$$<br>及环路带宽：<br>$$<br>\omega_{3dB}&#x3D;\omega_n\cdot\sqrt{a+\sqrt{a^2+1}},a&#x3D;2\xi^2+1-\frac{\omega_n\cdot N}{K_{PD}\cdot K_{VCO}}\cdot(4\xi-\frac{\omega_n\cdot N}{K_{PD}\cdot K_{VCO}})<br>$$<br>为保证环路的稳定和快速锁定，阻尼系数<img src="https://latex.csdn.net/eq?%5Cxi" alt="\xi">取值范围一般为0.5~1，如下图，取值过大或者过小，都会在时域上引起震荡。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240413210656661.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;锁相环结构及原理探究&quot;&gt;&lt;a href=&quot;#锁相环结构及原理探究&quot; class=&quot;headerlink&quot; title=&quot;锁相环结构及原理探究&quot;&gt;&lt;/a&gt;锁相环结构及原理探究&lt;/h1&gt;&lt;h2 id=&quot;一、锁相环基本工作原理及常见PLL&quot;&gt;&lt;a href=&quot;#一、锁相</summary>
      
    
    
    
    <category term="硬件探讨" scheme="https://lilongxin178.github.io/categories/%E7%A1%AC%E4%BB%B6%E6%8E%A2%E8%AE%A8/"/>
    
    
    <category term="小知识" scheme="https://lilongxin178.github.io/tags/%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>LDO工作原理简单探讨</title>
    <link href="https://lilongxin178.github.io/2024/01/20/LDO%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E7%AE%80%E5%8D%95%E6%8E%A2%E8%AE%A8/"/>
    <id>https://lilongxin178.github.io/2024/01/20/LDO%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E7%AE%80%E5%8D%95%E6%8E%A2%E8%AE%A8/</id>
    <published>2024-01-20T06:00:00.000Z</published>
    <updated>2024-10-23T08:57:03.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LDO工作原理简单探讨"><a href="#LDO工作原理简单探讨" class="headerlink" title="LDO工作原理简单探讨"></a>LDO工作原理简单探讨</h1><h2 id="一、LDO介绍"><a href="#一、LDO介绍" class="headerlink" title="一、LDO介绍"></a>一、LDO介绍</h2><p>​LDO英文名：low dropout regulator，低压差线性稳压器。<br>​电源的分类有很多种，比如<strong>开关电源</strong>、<strong>逆变电源</strong>、<strong>交流电源</strong>等等。在移动端消费类电子产品中，常用的有<strong>DCDC电源</strong>和<strong>LDO电源</strong>两种，DCDC的优点是效率高，但是噪声大；LDO正相反，它是效率低，噪声小。<br>​这两种电源具体在什么场景下使用不能一概而论，通常而言，对于噪声不太敏感的数字电路多可以优先考虑DCDC，而对于模拟电路，由于对噪声比较敏感，可以优先考虑LDO，但在大部分系统中，我们为了获得较好的电源效率以及稳定的电源系统，在进行设计时我们常常将两款电源系统进行混合使用。</p><h2 id="二、LDO模型及工作原理探讨"><a href="#二、LDO模型及工作原理探讨" class="headerlink" title="二、LDO模型及工作原理探讨"></a>二、LDO模型及工作原理探讨</h2><h3 id="先列举出我们可能较为常见的一些LDO模型"><a href="#先列举出我们可能较为常见的一些LDO模型" class="headerlink" title="先列举出我们可能较为常见的一些LDO模型"></a>先列举出我们可能较为常见的一些LDO模型</h3><p><strong>三极管型LDO：</strong><br><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240319163743031.png" alt="三极管型LDO"></p><p><strong>PMOS型LDO：</strong><br><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/bccbaed39a891cee1fa2c4675802d51d.jpg" alt="NMOS型LDO"></p><p><strong>NMOS型LDO：</strong></p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/8ec246cee8ebb24437b130ac68e7a7ef.jpg" alt="PMOS型LDO"></p><p>​此时，我们发现三种结构大同小异，只有在管子的选择上略有不同，那么我们就将其分成两种结构（<strong>三极管结构、MOS管结构</strong>）进行分析。</p><h3 id="三极管型原理推导："><a href="#三极管型原理推导：" class="headerlink" title="三极管型原理推导："></a>三极管型原理推导：</h3><p>​我们对三极管型的结构进行剖析，首先，我们能看到由电阻R和二极管Dz组成的稳定电压源（Vref），以及R1、R2、R3组成的分压网络，以及RL所代表的输出负载电阻。那么此时三级管以及运放所组成的应该是什么呢？<br>​我们回到LDO的名字上，为什么要叫<strong>低压线性稳压器</strong>，那我在此先进行简单的猜测，暂且认为<strong>LDO</strong>是<strong>线性</strong>的一种元件（暂定）。<br>​那么运放在此处又是什么作用呢？有正有负，又没有反馈用的电阻，那么它是不是<strong>比较器</strong>呢，我们都知道运放开环使用就是比较器嘛。但是仔细想想，好像无法将此处的运放当作比较器来使用。运算放大器的开环增益普遍在80dB以上，并且我们在实际使用LDO时都知道我们的输出会有“纹波”，假设纹波5mV，经过分压网络后有2mV，此时运算放大器以80dB的开环增益计算，输出最高都可以达到20V。一般来说，哪怕运放输出电压轨足够高，可以令输出最高达到20V，但此时三极管或者MOS管在大部分时间是处于导通状态的，那导通了就与我们上面的假设背道而驰了，并且我们知道开关电源正因为管子做开关使用，在导通和截止两个状态变换，那此时这种状态显然也不是LDO该有的工作状态，那我就只能将运放用法进行变换。<br>​那我们给它加上反馈呢?加上反馈后，我们可以得到以下结构：</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240319162945677.png" alt="LDO误差放大器结构"></p><p>​此处反馈所使用的是复阻抗，具体为何下文在进行解释。<br>​当加入反馈后，运放便由比较器变成了误差放大器，那么此时我们就可以更简单的去分析LDO的原理了。再上一张图：</p><p>​<img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240319163637437.png" alt="三极管型LDO内部电流电压关系"></p><p>​由于运算放大器在开环增益足够大且具有负反馈电路的工作条件下，会具有虚短的特性，所以当误差放大器在系统稳定时，有：<br>$$<br>VFB&#x3D;Vref<br>$$<br>​此时，误差放大器有一稳定输出Vc&#x2F;Vb，此时三极管在Vb的作用下，有：<br>$$<br>Ie&#x3D;Ib*β<br>$$</p><h4 id="负载变化时，有两种情况："><a href="#负载变化时，有两种情况：" class="headerlink" title="负载变化时，有两种情况："></a>负载变化时，有两种情况：</h4><h5 id="1-当负载变大时"><a href="#1-当负载变大时" class="headerlink" title="1.当负载变大时"></a>1.当负载变大时</h5><p>​负载变大时，RL变小，此时由于电流IL不变，Vout随之下降，误差放大器同相反相之间产生误差，输出Vc+∆Vc,此时三极管基极电压增加，Ib增加，Ie增加，电流增加后，由于<br>$$<br>Vout&#x3D;RL*IL<br>$$<br>​所以，Vout会逐渐上升直到稳定到输出值</p><h5 id="2-当负载变小时"><a href="#2-当负载变小时" class="headerlink" title="2.当负载变小时"></a>2.当负载变小时</h5><p>​负载变小时，RL变大，此时由于电流IL不变，Vout随之上升，误差放大器同相反相之间产生误差，输出Vc-∆Vc,此时三极管基极电压下降，Ib减小，Ie减小，电流减小后，由于<br>$$<br>Vout&#x3D;RL*IL<br>$$<br>​所以，Vout会逐渐下降直到稳定到输出值</p><p>​<strong>负载变化调整输出的过程，也可以看作电路系统反馈稳定的过程，通过反馈环路的设计以达到一个稳定的输出环境。</strong></p><h4 id="三极管型LDO中三极管的工作区"><a href="#三极管型LDO中三极管的工作区" class="headerlink" title="三极管型LDO中三极管的工作区"></a>三极管型LDO中三极管的工作区</h4><p>​可以看到，在上述推导中进行了合理假设，并验证了假设的理论可能性。<br>​三极管在上述的探讨中，Ib与Ie始终具有着倍数关系，我们知道这种状态是三极管的放大区。<br>​以下是三极管的工作区特点，以及输出特性曲线，以便理解对比。</p><p><strong>(1)截止区：三极管工作在截止状态，当发射结电压Ube小于0.6—0.7V的导通电压，发射结没有导通集电结处于反向偏置，没有放大作用。</strong><br><strong>(2)放大区：三极管的发射极加正向电压，集电极加反向电压导通后，Ib控制Ic，Ic与Ib近似于线性关系，在基极加上一个小信号电流，引起集电极大的信号电流输出。</strong><br><strong>(3)饱和区：当三极管的集电结电流IC增大到一定程度时，再增大Ib，Ic也不会增大，超出了放大区，进入了饱和区。饱和时，Ic最大，集电极和发射之间的内阻最小，电压Uce只有0.1V~0.3V，Uce&lt;ube，发射结和集电结均处于正向电压。三极管没有放大作用，集电极和发射极相当于短路，常与截止配合于开关电路。</strong></p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240319212529344.png" alt="三极管输出特性曲线"></p><h4 id="三级管型LDO简单仿真"><a href="#三级管型LDO简单仿真" class="headerlink" title="三级管型LDO简单仿真"></a>三级管型LDO简单仿真</h4><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240319213629802.png" alt="三极管型LDO仿真"></p><h3 id="MOS管型LDO原理推导："><a href="#MOS管型LDO原理推导：" class="headerlink" title="MOS管型LDO原理推导："></a>MOS管型LDO原理推导：</h3><p>​MOS管型LDO与三极管型LDO的差别在于它所使用的管子不同。在结构相同的条件下，可直接替换管子进行分析。</p><h4 id="MOS管的漏源电流工作区特性"><a href="#MOS管的漏源电流工作区特性" class="headerlink" title="MOS管的漏源电流工作区特性"></a>MOS管的漏源电流工作区特性</h4><p>​在拉扎维中，对MOS管的讨论在三极管区和饱和区。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240319215652655.png" alt="MOS管的三极管区"></p><p>​<strong>此时电流公式为：</strong><br>$$<br>I_D&#x3D;\mu\cdot\frac{\epsilon_{ox}}{t_{ox}}\cdot\frac WL\cdot\left[(V_{GS}-V_{TH})\cdot V_{DS}-\frac12V_{DS}^2\right]<br>$$<br><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240319215527746.png" alt="MOS管的饱和区"></p><p>​<strong>此时电流公式为：</strong><br>$$<br>I_D&#x3D;\frac12\beta\frac W{L^{\prime}}(V_{GS}-V_{TH})^2<br>$$<br>​由上图可以发现两个工作区的漏源电流公式只有VGS一个变量，那么从这里就可以看出MOS管的LDO原理依旧是依靠误差放大器所带来的<strong>电压变化</strong>引起功率输出级的<strong>电流变化</strong>。</p><h4 id="MOS管型LDO中MOS管的工作区"><a href="#MOS管型LDO中MOS管的工作区" class="headerlink" title="MOS管型LDO中MOS管的工作区"></a>MOS管型LDO中MOS管的工作区</h4><p>​从上文中的MOS管漏源电流公式以及电流输出图像，可以看出MOS管的漏源电流输出并不像三极管的电流输出机制。<br>​MOS管的工作区需要从VGS和VDS两个方面进行分析，MOS管型的LDO可能会工作在三极管区或者饱和区。但为了达到一个较为良好的工作环境（低压降）设计师常常将工作区设置在饱和区中，只有在特殊条件下LDO才会工作在三极管区。<br>​压降小时工作在线性区，损耗由导通电阻和电流决定；压降大时工作在饱和区，损耗由压降和电流决定，工作在饱和区时，环路性能比线性区好，但压降损耗增大。<br>​线性区由于其增益比饱和区小，所以环路相对较差。但在补偿的条件下现在的确已经可以控制，并正常使用。</p><h4 id="MOS管型LDO简单仿真"><a href="#MOS管型LDO简单仿真" class="headerlink" title="MOS管型LDO简单仿真"></a>MOS管型LDO简单仿真</h4><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240319223126591.png" alt="MOS管型LDO仿真"></p><h2 id="三、LDO输出公式推导"><a href="#三、LDO输出公式推导" class="headerlink" title="三、LDO输出公式推导"></a>三、LDO输出公式推导</h2><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240320102813834.png" alt="环路控制"></p><p>​如图，将mos管到输出负载电阻部分的传递函数设为H(S),再将误差放大器的反馈环的传递函数设为G(s)，那么，此时系统整体传递函数流程图为：</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240320102625921.png" alt="传递函数流程图"></p><p>​但在该系统中，当Vin为定值时，可以暂且不以Vin为系统输入。那么我们可以看到此时Q1处MOS管三个引脚，D为Vin(定值)，S为Vout（输出），那么我们只能从G级看起，将Vc作为新的输入。<br>​那么此时有新的传递函数，为：</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240320103406712.png" alt="功率级传递函数"></p><p>​又已知：<br>$$<br>Vc(s)&#x3D;Verr(s)×G(s)<br>$$<br>​<br>$$<br>Verr(s)&#x3D;Vref(s)-\alpha Vout(s) 此处\alpha为电阻分压系数<br>$$<br>​那么加以转换，可得到新的系统传递函数为（此处Zout可看作MOS管漏源电阻）：</p><p>​<img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240320103530327.png"></p><p>​那么，此时的闭环输出公式为：<br>$$<br>V_{\mathrm{out}}(s)&#x3D;\frac{V_{\mathrm{ref}}(s)}{\alpha}\frac{G(s)H(s)}{1+G(s)H(s)}-\frac{Z_{\mathrm{out},0\mathrm{l}}(s)}{1+G(s)H(s)}I_{\mathrm{out}}(s)<br>$$<br>​显然可得，当开环增益G(s)H(s)足够大时，有公式为：<br>$$<br>V_{\mathrm{out}}&#x3D;\frac{V_{\mathrm{ref}}}\alpha<br>$$</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;LDO工作原理简单探讨&quot;&gt;&lt;a href=&quot;#LDO工作原理简单探讨&quot; class=&quot;headerlink&quot; title=&quot;LDO工作原理简单探讨&quot;&gt;&lt;/a&gt;LDO工作原理简单探讨&lt;/h1&gt;&lt;h2 id=&quot;一、LDO介绍&quot;&gt;&lt;a href=&quot;#一、LDO介绍&quot; c</summary>
      
    
    
    
    <category term="硬件探讨" scheme="https://lilongxin178.github.io/categories/%E7%A1%AC%E4%BB%B6%E6%8E%A2%E8%AE%A8/"/>
    
    
    <category term="小知识" scheme="https://lilongxin178.github.io/tags/%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>TI——C2000芯片自动代码生成及示例（二）——从机ADC采集配置及主机串口采集</title>
    <link href="https://lilongxin178.github.io/2024/01/10/TI%E2%80%94%E2%80%94C2000%E8%8A%AF%E7%89%87%E8%87%AA%E5%8A%A8%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%8F%8A%E7%A4%BA%E4%BE%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E4%BB%8E%E6%9C%BAADC%E9%87%87%E9%9B%86%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E6%9C%BA%E4%B8%B2%E5%8F%A3%E9%87%87%E9%9B%86/"/>
    <id>https://lilongxin178.github.io/2024/01/10/TI%E2%80%94%E2%80%94C2000%E8%8A%AF%E7%89%87%E8%87%AA%E5%8A%A8%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%8F%8A%E7%A4%BA%E4%BE%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E4%BB%8E%E6%9C%BAADC%E9%87%87%E9%9B%86%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%B8%BB%E6%9C%BA%E4%B8%B2%E5%8F%A3%E9%87%87%E9%9B%86/</id>
    <published>2024-01-10T06:00:00.000Z</published>
    <updated>2024-02-25T12:55:24.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TI——C2000芯片自动代码生成及示例（二）——从机ADC采集配置及主机串口采集"><a href="#TI——C2000芯片自动代码生成及示例（二）——从机ADC采集配置及主机串口采集" class="headerlink" title="TI——C2000芯片自动代码生成及示例（二）——从机ADC采集配置及主机串口采集"></a>TI——C2000芯片自动代码生成及示例（二）——从机ADC采集配置及主机串口采集</h1><h2 id="一、搭建从机向主机发送ADC采集数据的代码模型"><a href="#一、搭建从机向主机发送ADC采集数据的代码模型" class="headerlink" title="一、搭建从机向主机发送ADC采集数据的代码模型"></a>一、搭建从机向主机发送ADC采集数据的代码模型</h2><h3 id="（1）代码模型功能"><a href="#（1）代码模型功能" class="headerlink" title="（1）代码模型功能"></a>（1）代码模型功能</h3><p>​该代码模型先由ADC进行电压采集，再进行数据的判断。在1.65V及以上，闪烁F280049评估版上的LED5，反之闪烁LED4。</p><h3 id="（2）添加所需模块，以及部分模块设置"><a href="#（2）添加所需模块，以及部分模块设置" class="headerlink" title="（2）添加所需模块，以及部分模块设置"></a>（2）添加所需模块，以及部分模块设置</h3><h4 id="1-添加一个ADC模块，其参数按默认设置"><a href="#1-添加一个ADC模块，其参数按默认设置" class="headerlink" title="1.添加一个ADC模块，其参数按默认设置"></a>1.添加一个ADC模块，其参数按默认设置</h4><h4 id="2-添加一个SCITransmit模块，其参数按默认设置"><a href="#2-添加一个SCITransmit模块，其参数按默认设置" class="headerlink" title="2.添加一个SCITransmit模块，其参数按默认设置"></a>2.添加一个SCITransmit模块，其参数按默认设置</h4><h4 id="3-添加两个CompareToConstant模块-按照下图的参数进行配置"><a href="#3-添加两个CompareToConstant模块-按照下图的参数进行配置" class="headerlink" title="3.添加两个CompareToConstant模块,按照下图的参数进行配置"></a>3.添加两个CompareToConstant模块,按照下图的参数进行配置</h4><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240225201345884.png"></p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240225201353863.png"></p><h4 id="4-添加一个Rate-Transition模块"><a href="#4-添加一个Rate-Transition模块" class="headerlink" title="4.添加一个Rate Transition模块"></a>4.添加一个Rate Transition模块</h4><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240225202117277.png"></p><h4 id="5-添加两个-Digital-Output-模块（配置LED所在的GPIO进行翻转）"><a href="#5-添加两个-Digital-Output-模块（配置LED所在的GPIO进行翻转）" class="headerlink" title="5.添加两个 Digital Output 模块（配置LED所在的GPIO进行翻转）"></a>5.添加两个 Digital Output 模块（配置LED所在的GPIO进行翻转）</h4><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240225202238625.png"></p><h4 id="6-完成从机（F280049）板载程序的代码模型"><a href="#6-完成从机（F280049）板载程序的代码模型" class="headerlink" title="6.完成从机（F280049）板载程序的代码模型"></a>6.完成从机（F280049）板载程序的代码模型</h4><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240225202356536.png"></p><p>​最后进行下载即可。</p><h2 id="二、通过使用SCI模块在主机（Simulink）上显示ADC模块所采集到的数据"><a href="#二、通过使用SCI模块在主机（Simulink）上显示ADC模块所采集到的数据" class="headerlink" title="二、通过使用SCI模块在主机（Simulink）上显示ADC模块所采集到的数据"></a>二、通过使用SCI模块在主机（Simulink）上显示ADC模块所采集到的数据</h2><h3 id="（1）主机模型功能"><a href="#（1）主机模型功能" class="headerlink" title="（1）主机模型功能"></a>（1）主机模型功能</h3><p>​该代码模型由SCI Setup模块和SCI Receive模块进行数据的采集，并对采集回的数据进行处理对电压进行计算并输出在Scope模块上。</p><h3 id="（2）搭建主机模型"><a href="#（2）搭建主机模型" class="headerlink" title="（2）搭建主机模型"></a>（2）搭建主机模型</h3><h4 id="1-添加模块与参数设置"><a href="#1-添加模块与参数设置" class="headerlink" title="1.添加模块与参数设置"></a>1.添加模块与参数设置</h4><h5 id="1-添加一个-Host-SCI-Setup-模块（由于从机SCI未进行设置，此处可直接使用默认设置）。"><a href="#1-添加一个-Host-SCI-Setup-模块（由于从机SCI未进行设置，此处可直接使用默认设置）。" class="headerlink" title="(1)添加一个 Host&#x2F;SCI Setup 模块（由于从机SCI未进行设置，此处可直接使用默认设置）。"></a>(1)添加一个 Host&#x2F;SCI Setup 模块（由于从机SCI未进行设置，此处可直接使用默认设置）。</h5><p><strong>PS:如果用户的C2000 LaunchPad XL实验板的串口号不是1-4，请先行将串口号修改为1-4，然后才能进行下面的工作。</strong></p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240225203046915.png"></p><h5 id="2-添加一个-Host-SCI-Receive-模块。"><a href="#2-添加一个-Host-SCI-Receive-模块。" class="headerlink" title="(2)添加一个 Host&#x2F;SCI Receive 模块。"></a>(2)添加一个 Host&#x2F;SCI Receive 模块。</h5><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240225204758006.png"></p><h5 id="3-添加一个-Gain-模块（因为电压轨为3-3V，ADC为12位为4096，故参数设为3-3-4096）"><a href="#3-添加一个-Gain-模块（因为电压轨为3-3V，ADC为12位为4096，故参数设为3-3-4096）" class="headerlink" title="(3)添加一个 Gain 模块（因为电压轨为3.3V，ADC为12位为4096，故参数设为3.3&#x2F;4096）"></a>(3)添加一个 Gain 模块（因为电压轨为3.3V，ADC为12位为4096，故参数设为3.3&#x2F;4096）</h5><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240225203817740.png"></p><h4 id="（4）主机模型"><a href="#（4）主机模型" class="headerlink" title="（4）主机模型"></a>（4）主机模型</h4><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240225203900878.png"></p><h4 id="（5）进行保存，点击运行"><a href="#（5）进行保存，点击运行" class="headerlink" title="（5）进行保存，点击运行"></a>（5）进行保存，点击运行</h4><p>​可以看到开发板在接入3.3V时，LED5闪烁。当ADC引脚接入GND时，LED4闪烁。</p><p>​使用上位机进行数据检测，当接入3.3V时</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240225204828589.png"></p><p>​从结果看，SCI通信与ADC检测均无误。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="串口号修改"><a href="#串口号修改" class="headerlink" title="串口号修改"></a>串口号修改</h3><h4 id="1-打开设备管理器"><a href="#1-打开设备管理器" class="headerlink" title="1.打开设备管理器"></a>1.打开设备管理器</h4><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240225205058683.png"></p><h4 id="2-右击你需要修改串口号的设备，点击属性"><a href="#2-右击你需要修改串口号的设备，点击属性" class="headerlink" title="2.右击你需要修改串口号的设备，点击属性"></a>2.右击你需要修改串口号的设备，点击属性</h4><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240225205206033.png"></p><h4 id="3-在“端口设置”中选择“高级”"><a href="#3-在“端口设置”中选择“高级”" class="headerlink" title="3.在“端口设置”中选择“高级”"></a>3.在“端口设置”中选择“高级”</h4><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240225205234677.png"></p><h4 id="4-进行修改并确认"><a href="#4-进行修改并确认" class="headerlink" title="4.进行修改并确认"></a>4.进行修改并确认</h4><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240225205303342.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TI——C2000芯片自动代码生成及示例（二）——从机ADC采集配置及主机串口采集&quot;&gt;&lt;a href=&quot;#TI——C2000芯片自动代码生成及示例（二）——从机ADC采集配置及主机串口采集&quot; class=&quot;headerlink&quot; title=&quot;TI——C2000芯</summary>
      
    
    
    
    <category term="DSP设计" scheme="https://lilongxin178.github.io/categories/DSP%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="DSP设计" scheme="https://lilongxin178.github.io/tags/DSP%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="工具" scheme="https://lilongxin178.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>ADC、DAC的理论信噪比计算</title>
    <link href="https://lilongxin178.github.io/2024/01/03/ADC%E3%80%81DAC%E7%9A%84%E7%90%86%E8%AE%BA%E4%BF%A1%E5%99%AA%E6%AF%94%E8%AE%A1%E7%AE%97/"/>
    <id>https://lilongxin178.github.io/2024/01/03/ADC%E3%80%81DAC%E7%9A%84%E7%90%86%E8%AE%BA%E4%BF%A1%E5%99%AA%E6%AF%94%E8%AE%A1%E7%AE%97/</id>
    <published>2024-01-03T06:00:00.000Z</published>
    <updated>2024-10-22T09:04:46.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ADC、DAC的理论信噪比计算"><a href="#ADC、DAC的理论信噪比计算" class="headerlink" title="ADC、DAC的理论信噪比计算"></a>ADC、DAC的理论信噪比计算</h1><h2 id="一、量化噪声模型以及转换器理论信噪比公式推导"><a href="#一、量化噪声模型以及转换器理论信噪比公式推导" class="headerlink" title="一、量化噪声模型以及转换器理论信噪比公式推导"></a>一、量化噪声模型以及转换器理论信噪比公式推导</h2><p>​理想转换器对信号进行数字化时，最大误差为±½ LSB，如图的一个理想N位ADC的传递函数所示。对于任何横跨数个LSB的交流信号，其量化误差可以通过一个峰峰值幅度为q (一个LSB的权重)的非相关锯齿波形来近似计算。对该近似法还可以从另一个角度来看 待，即实际量化误差发生在±1&#x2F;2* q范围内任意一点的概率相等。虽然这种分析不是百分之百 精确，但对大多数应用是足够准确的。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240229221606976.png" alt="理想N位ADC的量化噪声"></p><p>​有一种更详细地显示了量化误差与时间关系的图像。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240229213535383.png" alt="量化噪声与时间的关系"></p><p>​同样，一个简单的锯齿波形就能提供足够准 确的分析模型。锯齿误差的计算公式如下：<br>$$<br>\mathrm{e(t)&#x3D;st,-q&#x2F;2s&lt;t&lt;+q&#x2F;2s}<br>$$<br>​e(t)的均方值可以表示为：<br>$$<br>\overline{\mathrm{e}^2(t)}&#x3D;\frac{\mathrm{s}}{\mathrm{q}}{\int_{-\mathrm{q}&#x2F;2\mathrm{s}}^{+\mathrm{q}&#x2F;2\mathrm{s}}(\mathrm{s}t)}^2\mathrm{dt}<br>$$<br>​进行简单的积分和简化可得：<br>$$<br>\overline{\mathrm{e}^2(t)}&#x3D;\frac{\mathrm{q}^2}{12}.<br>$$<br>​因此，均方根量化误差为：<br>$$<br>均方根量化噪声&#x3D;\sqrt{\mathrm{e}^2(t)}&#x3D;\frac{\mathrm{q}}{\sqrt{12}}<br>$$<br>​锯齿误差波形产生的谐波远远超过DC至f s &#x2F;2的奈奎斯特带宽，然而，所有这些高阶谐波必 须折回(混叠)到奈奎斯特带宽并相加，产生q&#x2F;√12的均方根噪声。</p><p>​量化噪声近似于高斯分布，几乎均匀地分布于从DC至 f s &#x2F;2的奈奎斯特带宽。这里假设量化噪声与输入信号不相关。在某些条件下，当采样时钟和信号通过谐波相关时，量化噪声将与输入信号相关，能量集中在信号的谐波中，但均方 根值仍然约为q&#x2F;√12。理论信噪比现在可以通过一个满量程输入正弦波来计算：<br>$$<br>满量程输入正弦波&#x3D;\mathrm{v(t)&#x3D;\frac{q2^N}2\sin(2\pi ft)}<br>$$<br>​因此，输入信号的均方根值为：<br>$$<br>满量程输入的均方根值&#x3D;\frac{\mathrm{q}2^{\mathrm{N}}}{2\sqrt{2}}<br>$$<br>​因此，理想N位转换器的均方根信噪比为：<br>$$<br>\mathrm{SNR}&#x3D;20\log_{10}\frac{\text{rms value of FS input}}{\text{rms value of quantization noise}}<br>$$</p><p>$$<br>\mathrm{SNR&#x3D;20\log_{10}\left[\frac{q2^N&#x2F;2\sqrt{2}}{q&#x2F;\sqrt{12}}\right]&#x3D;20\log_{10}2^N+20\log_{10}\sqrt{\frac32}}<br>$$</p><p>$$<br>\mathrm{SNR}&#x3D;6.02\mathrm{N}+1.76\mathrm{dB}<br>$$</p><p>​虽然量化噪声的实际频谱相当复杂，难以分析，但推导出的简化分析对大多数应用足够准确。然而，必须再次强调，均方根量化噪声是在DC至fs&#x2F;2的完整 奈奎斯特带宽范围内进行测量。</p><h2 id="二、峰峰值分辨率与有效分辨率"><a href="#二、峰峰值分辨率与有效分辨率" class="headerlink" title="二、峰峰值分辨率与有效分辨率"></a>二、峰峰值分辨率与有效分辨率</h2><p>​低带宽、高分辨率ADC的分辨率为16位或24位。但是，器件的有效位数受噪声限制，而噪声则取决于输出字速率和所用的增益设置。有些公司规定使用有效分辨率来表示该参数。</p><p>​下图显示模拟输入接地时从一个Σ-Δ型ADC获得的典型直方图。理想情况下，对于这一固定的直流模拟输入，输出码应为0。但是，由于噪声影响，恒定模拟输入存在一个码字分布。此噪声包括ADC内部的热噪声和模数转换过程引起的量化噪声。 </p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240229215853416.png" alt="模拟输入接地时的直方图"></p><p>​码字分布一般为高斯分布。均方根噪声是通过从该直方图产生的曲线计算出的，曲线的宽度决定均方根噪声。高斯曲线的分布是从负无穷大到正无穷大。然而，99.99%的码 字出现在6.6倍均方根噪声范围内。因此，峰峰值噪声为均方根噪声的6.6倍。 </p><p>​数据手册一般使用均方根噪声。噪声取决于所用的滤波器 频率和增益设置。通常，当模拟输入范围缩小时，均方根噪声也会变小。但是，由于满量程模拟输入信号也被减 小，因此有效位数降低。</p><p>​假设当模拟输入范围为+2.56 V且，均方根噪声等于1.25μV。根据该数据计算信噪比：<br>$$<br>(20\mathrm{log}((6.6\times1.25\text{E-6})&#x2F;(2.56\times2))&#x3D;-115.85\mathrm dB<br>$$<br>​据此计算峰峰值分辨率：<br>$$<br>115.85&#x3D;6.02\mathrm{N}+1.76&#x3D;&gt;\mathrm{N}&#x3D;(115.85-1.76)&#x2F;6.02&#x3D;19\mathrm Bits<br>$$<br>​因此，在上述条件下，19个MSB中无闪烁位。 有些公司规定使用有效分辨率，而不是峰峰值分辨率。有效分辨率是通过均方根噪声而非峰值噪声计算出的。使用均方根噪声计算信噪比：<br>$$<br>(20\mathrm{log}((1.25\text{Е-}6)&#x2F;(2.56\times2))&#x3D;-132.25\mathrm dB<br>$$<br>​据此计算有效分辨率：<br>$$<br>\begin{aligned}132.25&amp;&#x3D;6.02\mathrm{N}+1.76&#x3D;&gt;\\\mathrm{N}&amp;&#x3D;(132.25-1.76)&#x2F;6.02&#x3D;21.7\mathrm Bits \end{aligned}<br>$$<br>​因此，有效分辨率 &#x3D; 峰峰值分辨率 + 2.7位。 评估ADC时，应当认识到有效分辨率与峰峰值分辨率的计算方法 不同，有效分辨率比峰峰值分辨率大2.7位。此外，有效分辨率没 有突出闪烁位数，峰峰值分辨率则指出了不闪烁的位数，因而能 更好地表示性能。</p><p>​对于一个ADC，其有效分辨率比峰峰值分辨 率高2.7位。因此，对于有效分辨率为22位的器件，其无闪烁分辨率为22 – 2.7 &#x3D; 19.3位。要了解器件对于一项应用的真正性能，必须确定所规定的是峰峰值分辨率还是有效分辨率。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ADC、DAC的理论信噪比计算&quot;&gt;&lt;a href=&quot;#ADC、DAC的理论信噪比计算&quot; class=&quot;headerlink&quot; title=&quot;ADC、DAC的理论信噪比计算&quot;&gt;&lt;/a&gt;ADC、DAC的理论信噪比计算&lt;/h1&gt;&lt;h2 id=&quot;一、量化噪声模型以及转换器</summary>
      
    
    
    
    <category term="硬件探讨" scheme="https://lilongxin178.github.io/categories/%E7%A1%AC%E4%BB%B6%E6%8E%A2%E8%AE%A8/"/>
    
    
    <category term="小知识" scheme="https://lilongxin178.github.io/tags/%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>TI——C2000芯片自动代码生成及示例（一）</title>
    <link href="https://lilongxin178.github.io/2023/12/23/TI%E2%80%94%E2%80%94C2000%E8%8A%AF%E7%89%87%E8%87%AA%E5%8A%A8%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%8F%8A%E7%A4%BA%E4%BE%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://lilongxin178.github.io/2023/12/23/TI%E2%80%94%E2%80%94C2000%E8%8A%AF%E7%89%87%E8%87%AA%E5%8A%A8%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%8F%8A%E7%A4%BA%E4%BE%8B%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2023-12-23T06:00:00.000Z</published>
    <updated>2024-02-18T07:54:26.122Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TI——C2000芯片自动代码生成及示例（一）"><a href="#TI——C2000芯片自动代码生成及示例（一）" class="headerlink" title="TI——C2000芯片自动代码生成及示例（一）"></a>TI——C2000芯片自动代码生成及示例（一）</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>​本文在配置完代码生成环境的基础上，以TI——TMS320F280049芯片为例，介绍建立模型、生成C代码，最后将代码烧写到芯片当中的详细操作过程，以及在使用中的常见问题解决方案。</p><h2 id="二、操作流程及配置使用"><a href="#二、操作流程及配置使用" class="headerlink" title="二、操作流程及配置使用"></a>二、操作流程及配置使用</h2><h3 id="（1）新建工程及模型参数设置"><a href="#（1）新建工程及模型参数设置" class="headerlink" title="（1）新建工程及模型参数设置"></a>（1）新建工程及模型参数设置</h3><p>1.打开Simulink进行新建工程。</p><p>2.点击MODELING（建模）下的Model Settings（或快捷键Ctrl+E）打开模型参数配置页面：</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240218144417820.png"></p><p>3.由于芯片中运行的程序为离散信号，故将求解器中的步长类型设置为定步长，求解算法为离散模式，此处可设置步长时间为0.01s。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240218144528205.png"></p><p>4.在Hardware Implementation（硬件实现）当中选择硬件型号。下拉可见在C2000系列各芯片型号，此处选择280049作为配置的芯片系列。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240218144713966.png"></p><p>5.在Code Generation（代码生成）的Report（报告）处勾选Create Code generation report（创建代码生成报告）和 Open report automatically（自动生成报告），代码生成的过程中将自动生成报告。（其余选项非必选项，可依据需要进行勾选）</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240218145003013.png"></p><h3 id="（2）搭建F280049的GPIO点灯程序"><a href="#（2）搭建F280049的GPIO点灯程序" class="headerlink" title="（2）搭建F280049的GPIO点灯程序"></a>（2）搭建F280049的GPIO点灯程序</h3><p>​1.打开库浏览器</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240218145233528.png"></p><p>2.搜索C2000，并寻找F280049型号芯片（或者你所使用的芯片型号）</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240218145412487.png"></p><p>3.双击打开该模块库，可以对其外设进行图形化设计。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240218145603930.png"></p><p>4.在这里我们使用的是GPIO对LED进行控制，所以，可选择GPIO将其拖至Simulink的图纸上。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240218145934181.png"></p><p>5.对GPIO配置完成后，给其一不断变换的常数，使其GPIO输出电平反转。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240218150247290.png"></p><p>6.保存至工作文件夹</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240218150323755.png"></p><h3 id="（3）代码生成（CCS下载和Simulink直接下载）"><a href="#（3）代码生成（CCS下载和Simulink直接下载）" class="headerlink" title="（3）代码生成（CCS下载和Simulink直接下载）"></a>（3）代码生成（CCS下载和Simulink直接下载）</h3><p>1.在模型搭建完成后，在HARDWARE界面点击Build（快捷键Ctrl+B），自动生成C代码</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240218152937916.png"></p><p>2.在Diagnostic Viewer中出现Build process completed successfully证明代码已自动生成。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240218153007404.png"></p><p>且此时，代码生成的报告也将出现。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240218153035481.png"></p><p>3.此时，如果需要进行下载，可使用两种方式（MATLAB直接下载或者CCS进行下载）<br>    先对此处进行检查，确认该处下载器配置文件存在（若没有可以进入CCS重新配置保存，并导入此处）。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240218153423368.png"></p><p>4.然后依旧在刚才的界面进行下载，使用这个按键<img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240218153607154.png" alt="image-20240218153607154">进行下载（Simulink直接下载)</p><p>4.打开CCS导入你所在的工作文件夹为CCS工程。（CCS下载）</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240218153815072.png"></p><p>导入工程后，使用CCXML文件进行下载。</p><h2 id="三、过程中遇到的问题及注意事项"><a href="#三、过程中遇到的问题及注意事项" class="headerlink" title="三、过程中遇到的问题及注意事项"></a>三、过程中遇到的问题及注意事项</h2><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><p>​1.MATLAB所有文件夹不要放置在存在中文的路径中。</p><p>​2.工作文件夹尽可能不要选择C盘，可能会存在某些文件由于权限不足无法打开的情况。</p><p>​3.Powershell的环境变量配置。（如果在编译时出现<strong>“代码生成文件不存在”</strong>的错误，且报错信息中存在<strong>“Powershell不是内部命令也不是外部命令”</strong>的话，极大可能为此处报错）</p><p>​4.也可能遇到CCS导入工程失败的问题。</p><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>​1、2：改变工作文件夹的位置</p><p>​3.在环境变量path后添加powershell的路径（C:\Windows\System32\WindowsPowerShell\v1.0）</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240218155004593.png"></p><p>.4.CCS无法导入遇到下图情况：</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240218155111409.png"></p><p>​（1）找到工程文件下面给的.cproject文件。<br>​（2）利用记事本或者能打开的工具打开，有一行文字格式为这样的注释</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tool id=<span class="string">&quot;xxxx&quot;</span> name=<span class="string">&quot;xxx&quot;</span> superClass=<span class="string">&quot;xxxxx&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>删除此行。<br>    （3)重新启动软件在此导入即可导入成功。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TI——C2000芯片自动代码生成及示例（一）&quot;&gt;&lt;a href=&quot;#TI——C2000芯片自动代码生成及示例（一）&quot; class=&quot;headerlink&quot; title=&quot;TI——C2000芯片自动代码生成及示例（一）&quot;&gt;&lt;/a&gt;TI——C2000芯片自动代码生成</summary>
      
    
    
    
    <category term="DSP设计" scheme="https://lilongxin178.github.io/categories/DSP%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="DSP设计" scheme="https://lilongxin178.github.io/tags/DSP%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="工具" scheme="https://lilongxin178.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Stateflow 建模基础（1）</title>
    <link href="https://lilongxin178.github.io/2023/12/14/Stateflow%20%E5%BB%BA%E6%A8%A1%E5%9F%BA%E7%A1%80%EF%BC%881%EF%BC%89/"/>
    <id>https://lilongxin178.github.io/2023/12/14/Stateflow%20%E5%BB%BA%E6%A8%A1%E5%9F%BA%E7%A1%80%EF%BC%881%EF%BC%89/</id>
    <published>2023-12-14T06:00:00.000Z</published>
    <updated>2024-02-13T04:20:32.278Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Stateflow基础（1）"><a href="#Stateflow基础（1）" class="headerlink" title="Stateflow基础（1）"></a>Stateflow基础（1）</h1><h2 id="一、简介及Stateflow的特点"><a href="#一、简介及Stateflow的特点" class="headerlink" title="一、简介及Stateflow的特点"></a>一、简介及Stateflow的特点</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>​Stateflow是有限状态机(Finite State Machine，FSM)的图形实现工具，它可以用于解决事件驱动系统中复杂的逻辑问题。Stateflow 通过开发 FSM 和流程图的设计环境扩展Simulink的功能，在系统中可以用图形化的工具来实现各个状态之间的迁移。<br>​Stateflow 图表采用图形建模的方式构建层次化的、并行工作的状态和它们之间由事件驱动的逻辑迁移关系。Stateflow 在传统状态图的基础上扩展了控制流、MATLAB 函数、图形函数、真值表、临时运算符、直接事件广播，并可以集成用户自编 C 代码，而且通过Stateflow Coder 可以为 Stateflow 状态图模型自动生成C代码。</p><h3 id="2-特点"><a href="#2-特点" class="headerlink" title="2.特点"></a>2.特点</h3><p>Stateflow的主要特点如下:<br>    (1)提供层次化、可并行的、具有明确执行语义的建模语言元素，并以自然易懂的形式来描述复杂逻辑系统。<br>    (2)使用流程图定义图形化函数，使用 MATLAB 函数进行编程操作，使用真值表完成表格形式的处理。<br>    (3)采用临时逻辑调度状态迁移与事件<br>    (4)支持Mealy和Moore有限状态机。<br>    (5)可集成用户自定义输人输出变量的C代码<br>    (6)支持向量、矩阵、总线信号和定点数据类型。<br>    (7)可进行静态模型检查，包括病态定义的真值表。<br>    (8)可动态检测迁移冲突、死循环、状态不一致、数据范围错误和溢出问题(9)仿真进行中以动画显示状态图的运行并记录数据，以便于对系统的理解和调试。<br>    (10)集成了一个调试器，采用图形化断点进行单步调试，在调试时浏览其中的数据</p><h2 id="二、构造并运行Stateflow图（设计过零比较器）"><a href="#二、构造并运行Stateflow图（设计过零比较器）" class="headerlink" title="二、构造并运行Stateflow图（设计过零比较器）"></a>二、构造并运行Stateflow图（设计过零比较器）</h2><h3 id="1-打开-Stateflow-编辑器"><a href="#1-打开-Stateflow-编辑器" class="headerlink" title="1.打开 Stateflow 编辑器"></a>1.打开 Stateflow 编辑器</h3><p>​Stateflow 编辑器是一个图形环境，用于设计状态转移图、流程图、状态转移表和真值表。</p><ul><li><p>要建立周期性或连续时间 Simulink 算法的条件、基于事件和基于时间的逻辑模型，请使用 [<strong>sfnew</strong>] 函数创建一个可在 Simulink 模型中作为模块进行仿真的 Stateflow 图。在 MATLAB 命令提示符处，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfnew rectify     % 在simulink中创建一个仿真图表</span><br></pre></td></tr></table></figure><p>Simulink 创建一个名为 <code>rectify</code> 的模型，其中包含一个空的 Stateflow Chart 模块。要打开 Stateflow 编辑器，请双击图模块。</p></li><li><p>要为 MATLAB 应用程序设计可重用的状态机和时序逻辑，请使用 <a href="https://ww2.mathworks.cn/help/matlab/ref/edit.html"><code>edit</code></a> 函数创建可作为 MATLAB 对象执行的独立 Stateflow 图。在 MATLAB 命令提示符处，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit rectify.sfx  % 创建图表执行作为Matlab对象</span><br></pre></td></tr></table></figure><p>如果文件 <code>rectify.sfx</code> 不存在，Stateflow 编辑器将创建名为 <code>rectify</code> 的空图。</p></li></ul><p>​Stateflow 编辑器的主要组件是图画布、对象选项板和<strong>符号</strong>窗格。</p><ul><li>图画布是一个绘图区域，可以在其中通过组合状态、转移和其他图形元素来创建图。</li><li>在画布的左侧有一个对象选项板，其中显示了一组可向图中添加图形元素的工具。</li><li>在画布的右侧有一个<strong>符号</strong>窗格，您可以用它向图添加新的数据、事件和消息并解析任何未定义或未使用的符号。</li></ul><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240211150325306.png"></p><p>PS:在构造 Stateflow 图后，您可以将其内容复制到另一个具有不同执行模式的图中。例如，您可以构造在 MATLAB 中执行的图，并将其内容复制到在 Simulink 中进行仿真的图中。</p><h3 id="2-添加状态和转移"><a href="#2-添加状态和转移" class="headerlink" title="2.添加状态和转移"></a>2.添加状态和转移</h3><ol><li><p>在对象选项板中，点击状态图标并将指针移至图画布。将出现具有默认转移的状态。要放置该状态，请点击画布上的某个位置。在文本提示中，输入状态名称 <code>On</code> 和状态动作 <code>y = x</code>。</p><p><img src="/C:/Users/LLX/AppData/Roaming/Typora/typora-user-images/image-20240213114415574.png"></p></li><li><p>添加另一个状态。右键点击并拖动 <code>On</code> 状态。蓝色图形提示可以帮助您水平或垂直对齐状态。新状态的名称变为 <code>Off</code>。双击该状态并将状态动作修改为 <code>y = 0</code>。</p></li><li><p>重新对齐两个状态并在两个状态之间的空白处停留片刻出现蓝色转移提示指示进行连接。</p></li><li><p>双击每个转移并输入适当的转移条件 <code>x&lt;t0</code> 或 <code>x&gt;=t0</code>。条件出现在方括号内。（选择添加转移表达式）</p><p><img src="/C:/Users/LLX/AppData/Roaming/Typora/typora-user-images/image-20240213114517613.png"></p><p>5.结果如下图：</p><p><img src="/C:/Users/LLX/AppData/Roaming/Typora/typora-user-images/image-20240213114549731.png"></p></li></ol><h3 id="3-解析未定义的符号"><a href="#3-解析未定义的符号" class="headerlink" title="3.解析未定义的符号"></a>3.解析未定义的符号</h3><p>​在执行图之前，必须定义图中使用的每个符号并指定其作用域（例如，输入数据、输出数据或局部数据）。</p><p>​（1）打开<strong>符号</strong>窗格。<br>​（2）在<strong>符号</strong>窗格中，点击<strong>解析未定义的符号</strong></p><p><img src="/C:/Users/LLX/AppData/Roaming/Typora/typora-user-images/image-20240213114810053.png"></p><p>​（3）由于阈值 <code>t0</code> 在仿真过程中不会更改，因此将其作用域更改为常量数据。在<strong>类型</strong>列中，点击 <code>t0</code> 旁边的数据类型图标，然后选择<strong>常量数据</strong>。<br>​（4）设置阈值 <code>t0</code> 的值。在<strong>值</strong>列中，点击 <code>t0</code> 旁边的空白输入框，并输入值 0。<br>​（5）保存Stateflow 图。</p><h3 id="4-进行仿真"><a href="#4-进行仿真" class="headerlink" title="4.进行仿真"></a>4.进行仿真</h3><p>​（1）要返回到 Simulink 编辑器，请在画布顶部的浏览器栏中点击 Simulink 模型的名称：<img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/simulink-model.png"><strong>rectify</strong>。如果浏览器栏不可见，请点击对象选项板顶部的<strong>隐藏&#x2F;显示资源管理器栏</strong>图标 <img src="https://ww2.mathworks.cn/help/stateflow/gs/palette-explorer-bar.png">。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240213115108954.png"></p><p>​（2）执行以下操作以将信源添加到模型中：</p><ul><li>从 Simulink Sources 库中，添加一个 Sine Wave (Simulink) 模块。</li><li>双击 Sine Wave 模块并将<strong>采样时间</strong>设置为 0.2。</li><li>将 Sine Wave 模块的输出连接到 Stateflow 图的输入。</li><li>将信号标记为 <code>x</code>。</li></ul><p>​（3）添加一个示波器。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240213115412488.png"></p><p>​（4）保存 Simulink 模型。</p><p>​（5）开始仿真。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240213115521711.png"></p><p>​可以看到此处小于0的数据被滤除了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Stateflow基础（1）&quot;&gt;&lt;a href=&quot;#Stateflow基础（1）&quot; class=&quot;headerlink&quot; title=&quot;Stateflow基础（1）&quot;&gt;&lt;/a&gt;Stateflow基础（1）&lt;/h1&gt;&lt;h2 id=&quot;一、简介及Stateflow的特点</summary>
      
    
    
    
    <category term="MATLAB学习" scheme="https://lilongxin178.github.io/categories/MATLAB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="工具" scheme="https://lilongxin178.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="MATLAB学习" scheme="https://lilongxin178.github.io/tags/MATLAB%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Simulink建模基础（2）</title>
    <link href="https://lilongxin178.github.io/2023/12/12/Simulink%E5%BB%BA%E6%A8%A1%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/"/>
    <id>https://lilongxin178.github.io/2023/12/12/Simulink%E5%BB%BA%E6%A8%A1%E5%9F%BA%E7%A1%80%EF%BC%882%EF%BC%89/</id>
    <published>2023-12-12T06:00:00.000Z</published>
    <updated>2024-02-08T05:55:51.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Simulink建模基础（2）"><a href="#Simulink建模基础（2）" class="headerlink" title="Simulink建模基础（2）"></a>Simulink建模基础（2）</h1><h2 id="三、数学表达式模型搭建技巧"><a href="#三、数学表达式模型搭建技巧" class="headerlink" title="三、数学表达式模型搭建技巧"></a>三、数学表达式模型搭建技巧</h2><p>​本节对公式：<br>$$<br>y(t)&#x3D;A*e^{-t\over a}+{K\over\alpha}e^{-t\over a}\int_0^tx(\tau)e^{t\over a}d\tau+{\beta\over\alpha}e^{-t\over a}\int_0^tx(\tau^2)e^{t\over a}d\tau<br>$$<br>的数学表达式进行建模。</p><h3 id="1-先将结构进行剖析分解"><a href="#1-先将结构进行剖析分解" class="headerlink" title="1.先将结构进行剖析分解"></a>1.先将结构进行剖析分解</h3><h4 id="（1）将系统划分为几个子系统"><a href="#（1）将系统划分为几个子系统" class="headerlink" title="（1）将系统划分为几个子系统"></a>（1）将系统划分为几个子系统</h4><p>$$<br>y(t)&#x3D;Function1+Function2+Function3<br>$$</p><p>​所以，有<br>$$<br>Function1&#x3D;A*e^{-t\over a}<br>$$</p><p>$$<br>Function2&#x3D;{K\over\alpha}e^{-t\over a}\int_0^tx(\tau)e^{t\over a}d\tau<br>$$</p><p>$$<br>Function3&#x3D;{\beta\over\alpha}e^{-t\over a}\int_0^tx(\tau^2)e^{t\over a}d\tau<br>$$</p><h4 id="（2）此时再将子系统划分为各个小块。如："><a href="#（2）此时再将子系统划分为各个小块。如：" class="headerlink" title="（2）此时再将子系统划分为各个小块。如："></a>（2）此时再将子系统划分为各个小块。如：</h4><p>$$<br>Function1&#x3D;block1+block2<br>$$</p><p>$$<br>Function2 &#x3D; block2 * block3 * block4<br>$$</p><p>$$<br>Function3&#x3D; block2 *block5 *block6<br>$$</p><p>​所以可得出<br>$$<br>block1&#x3D;A<br>$$</p><p>$$<br>block2&#x3D;e^{-t\over a}<br>$$</p><p>$$<br>block3&#x3D;{K\over\alpha}<br>$$</p><p>$$<br>block4&#x3D;\int_0^tx(\tau)e^{t\over a}d\tau<br>$$</p><p>$$<br>block5&#x3D;{\beta\over\alpha}<br>$$</p><p>$$<br>block6&#x3D;e^{-t\over a}\int_0^tx(\tau^2)e^{t\over a}d\tau<br>$$</p><h3 id="2-开始进行建模"><a href="#2-开始进行建模" class="headerlink" title="2.开始进行建模"></a>2.开始进行建模</h3><h4 id="（1）创建上文所使用的六个模块"><a href="#（1）创建上文所使用的六个模块" class="headerlink" title="（1）创建上文所使用的六个模块"></a>（1）创建上文所使用的六个模块</h4><p>​如图，先创建Function1：</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240208120031353.png"></p><p>​再创建Function2，以及Function3</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240208121909088.png"></p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240208122525137.png"></p><h4 id="（2）建立子系统"><a href="#（2）建立子系统" class="headerlink" title="（2）建立子系统"></a>（2）建立子系统</h4><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240208123003149.png"></p><p>​将三个子系统建立完成后：</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240208123129427.png"></p><p>​（3）进行三个子系统的连接</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240208123604094.png"></p><h3 id="3-模型仿真及测试"><a href="#3-模型仿真及测试" class="headerlink" title="3.模型仿真及测试"></a>3.模型仿真及测试</h3><h4 id="（1）添加测试用例及显示设备"><a href="#（1）添加测试用例及显示设备" class="headerlink" title="（1）添加测试用例及显示设备"></a>（1）添加测试用例及显示设备</h4><p>​添加一个正弦信号模块作为测试用例并按默认设置。</p><p>​添加一个示波器模块作为显示设备。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240208125608784.png"></p><p>​双击该模块，在打开后界面的左上角，点击“视图”-&gt;”配置属性”，打开下图界面。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240208125805465.png"></p><p>​设置完成后，为下图样式：</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240208125855458.png"></p><h4 id="（2）对参数进行设置"><a href="#（2）对参数进行设置" class="headerlink" title="（2）对参数进行设置"></a>（2）对参数进行设置</h4><p>​1.按照上文参数设置，对该建模内未定义的参数进行定义并赋值。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240208130036883.png"></p><p>​2.设置仿真停止时间</p><p>​3.设置求解器类型（变步长）；并选择ode23的求解器。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240208130153287.png"></p><p>​4.进行仿真</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240208130647616.png" alt="、"></p><h2 id="四、Simulink仿真的各种波形显示方式"><a href="#四、Simulink仿真的各种波形显示方式" class="headerlink" title="四、Simulink仿真的各种波形显示方式"></a>四、Simulink仿真的各种波形显示方式</h2><h3 id="1-普通示波器Scope"><a href="#1-普通示波器Scope" class="headerlink" title="1.普通示波器Scope"></a>1.普通示波器Scope</h3><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240208132733862.png"></p><p>​调用方式：库浏览器中搜索Scope，拖出使用即可。</p><h3 id="2-Dashboard-Scope示波器"><a href="#2-Dashboard-Scope示波器" class="headerlink" title="2.Dashboard Scope示波器"></a>2.Dashboard Scope示波器</h3><p>（1）添加Dashboard Scope模块,即在模型的空白处单击选中该模型然后键人“dash”接着选中Dashboard Scope</p><p>（2）连接Dashboard Scope模块即双击 Dashboard Scope模块，打开模块参数对话框接着选中需要显示的信号，这些信号将出现在模块参数对话框中。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240208133427148.png"></p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240208133443871.png"></p><h3 id="3-仿真数据检查器（Data-Inspector）"><a href="#3-仿真数据检查器（Data-Inspector）" class="headerlink" title="3.仿真数据检查器（Data Inspector）"></a>3.仿真数据检查器（Data Inspector）</h3><p>​为了在一个页面中显示多个信号的波形，或对某个&#x2F;多个信号的多次测试进行记录，以优化模型中的参数等可使用 Data Inspector。如同时观察x(t)、y(t)、Functionl、Function2和Function3等信号。</p><p>​（1）右击需要的信号选择“记录所选信号”</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240208133804426.png"></p><p>​（2）将所需信号全部按上述操作进行处理</p><p>​（3）找到已经选择的信号，再次右击打开仿真数据检查器。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240208134009254.png"></p><p>​（4）对信号在此进行简单的归位排序，以便查看。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240208134100578.png" alt="image-20240208134100578"></p><p>​（5）记录多次仿真结果。利用该记录功能可对比在不同参数条件下的输出波形，从而选择模型中更符合实际的参数。</p><h3 id="4-逻辑分析仪-Logic-Analyzer-。"><a href="#4-逻辑分析仪-Logic-Analyzer-。" class="headerlink" title="4.逻辑分析仪(Logic Analyzer)。"></a>4.逻辑分析仪(Logic Analyzer)。</h3><p>​对于选中的信号可以一次性将其波形显示出来，特别适用于逻辑关系比较明显的系统其操作方法为:选择 Logic Analyzer 选项即可打开逻辑分析仪对话框。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240208134924139.png"></p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240208134958742.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Simulink建模基础（2）&quot;&gt;&lt;a href=&quot;#Simulink建模基础（2）&quot; class=&quot;headerlink&quot; title=&quot;Simulink建模基础（2）&quot;&gt;&lt;/a&gt;Simulink建模基础（2）&lt;/h1&gt;&lt;h2 id=&quot;三、数学表达式模型搭建技巧</summary>
      
    
    
    
    <category term="MATLAB学习" scheme="https://lilongxin178.github.io/categories/MATLAB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="工具" scheme="https://lilongxin178.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="MATLAB学习" scheme="https://lilongxin178.github.io/tags/MATLAB%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Simulink建模基础（1）</title>
    <link href="https://lilongxin178.github.io/2023/12/11/Simulink%E5%BB%BA%E6%A8%A1%E5%9F%BA%E7%A1%80%EF%BC%881%EF%BC%89/"/>
    <id>https://lilongxin178.github.io/2023/12/11/Simulink%E5%BB%BA%E6%A8%A1%E5%9F%BA%E7%A1%80%EF%BC%881%EF%BC%89/</id>
    <published>2023-12-11T06:00:00.000Z</published>
    <updated>2024-02-06T06:17:34.082Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Simulink建模基础（1）"><a href="#Simulink建模基础（1）" class="headerlink" title="Simulink建模基础（1）"></a>Simulink建模基础（1）</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>​Simulink是动态和嵌人式等系统的建模与仿真工具，也是模型设计的基础。对于机电航空航天、信号处理、自动控制、通信、音视频处理等众多领域，Simulink 提供了交互式可视化开发环境和可定制的模块库，对系统进行建模、仿真与调试等;并可实现与 Stateflow有限状态机的无缝连接，扩展对复杂系统的建模能力。<br>​通过Simulink模块库自带的1000多个预定义模块基本上可快速地创建基于MCU器件应用的系统模型。运用层次化建模、数据管理、子系统定制等手段，即使是复杂的嵌入式MCU应用系统，也能轻松地完成简明精确的模型描述。</p><p>​<strong>主要内容：</strong></p><ul><li>​Simulink基本操作</li><li>Simulink模块库简介</li><li>Simulink建模新方法介绍</li><li>物理建模简介</li></ul><h2 id="二、Simulink基本操作"><a href="#二、Simulink基本操作" class="headerlink" title="二、Simulink基本操作"></a>二、Simulink基本操作</h2><h3 id="2-1模块库和编辑窗口"><a href="#2-1模块库和编辑窗口" class="headerlink" title="2.1模块库和编辑窗口"></a>2.1模块库和编辑窗口</h3><h4 id="2-1-1-打开Simulink的起始页"><a href="#2-1-1-打开Simulink的起始页" class="headerlink" title="2.1.1  打开Simulink的起始页"></a>2.1.1  打开Simulink的起始页</h4><p>​在MATLAB的命令行窗口中输人Simulink指令或单击MATLAB工具栏上的Simulink图标，可打开Simulink的起始页。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240205140320152.png"></p><h4 id="2-1-2-打开模型编辑窗口"><a href="#2-1-2-打开模型编辑窗口" class="headerlink" title="2.1.2  打开模型编辑窗口"></a>2.1.2  打开模型编辑窗口</h4><p>​创建一个新的模型，首先要打开一个模型编辑窗口。可以通过单击“Simulink的起始页”上所需要的模板，这里选择空白模型(Blank Model)来打开编辑窗口。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240205140640287.png"></p><h4 id="2-1-3-打开Simulink库浏览器查看Simulink模块库中包含的子库"><a href="#2-1-3-打开Simulink库浏览器查看Simulink模块库中包含的子库" class="headerlink" title="2.1.3  打开Simulink库浏览器查看Simulink模块库中包含的子库"></a>2.1.3  打开Simulink库浏览器查看Simulink模块库中包含的子库</h4><p>​单击图3.2工具栏上的“库浏览器”图标，可查看Simulink 模块库所包含的子库。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240205141038552.png"></p><h3 id="2-2-建模示例"><a href="#2-2-建模示例" class="headerlink" title="2.2 建模示例"></a>2.2 建模示例</h3><h4 id="2-2-1-有物理含义或微分方程创建模型"><a href="#2-2-1-有物理含义或微分方程创建模型" class="headerlink" title="2.2.1  有物理含义或微分方程创建模型"></a>2.2.1  有物理含义或微分方程创建模型</h4><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240206132011400.png"></p><h5 id="1-求解负载电阻R上消耗功率的数学表达式"><a href="#1-求解负载电阻R上消耗功率的数学表达式" class="headerlink" title="1.求解负载电阻R上消耗功率的数学表达式"></a>1.求解负载电阻R上消耗功率的数学表达式</h5><p>​根据欧姆定律，该电路的电流i可表示为：<br>$$<br>i&#x3D;{V_S\over R_s+R_L}<br>$$<br>​则负载电阻R上消耗的功率为<br>$$<br>P&#x3D;i^2*R_L<br>$$</p><h5 id="2-搭建Simulink-模型"><a href="#2-搭建Simulink-模型" class="headerlink" title="2.搭建Simulink 模型"></a>2.搭建Simulink 模型</h5><h6 id="1-模型所需模块分析"><a href="#1-模型所需模块分析" class="headerlink" title="(1)模型所需模块分析"></a>(1)模型所需模块分析</h6><p>​该模型可由3个 Constant 常数模块、1个Add 加法模块、1个 Divide 除法模块1个Product乘法模块1个Math Function 数学函数模块和1个Display 显示模块来表达。</p><h6 id="2-创建一个Simulink模型。"><a href="#2-创建一个Simulink模型。" class="headerlink" title="(2)创建一个Simulink模型。"></a>(2)创建一个Simulink模型。</h6><p>​D单击工具栏上的图标打开Simulink起始页新建一个空白的Simulink模型并另存为自己的工作文件夹中。<br>​从Simulink 模块库(Commonly Used Blocks、Math Operations 和 Sinks)中添加Constant模块、Add模块、Divide模块、Math Function模块、Product 模块和 Display模块等。</p><h6 id="3-搭建好的模型"><a href="#3-搭建好的模型" class="headerlink" title="(3)搭建好的模型"></a>(3)搭建好的模型</h6><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240206134135298.png"></p><h3 id="2-3参数设置"><a href="#2-3参数设置" class="headerlink" title="2.3参数设置"></a>2.3参数设置</h3><h4 id="1-在“建模”中选择“模型数据编辑器”，此时界面下方出现如下编辑器："><a href="#1-在“建模”中选择“模型数据编辑器”，此时界面下方出现如下编辑器：" class="headerlink" title="1.在“建模”中选择“模型数据编辑器”，此时界面下方出现如下编辑器："></a>1.在“建模”中选择“模型数据编辑器”，此时界面下方出现如下编辑器：</h4><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240206134644517.png"></p><h4 id="2-选择Parameters-选中你要定义的变量位置，点击┇按钮"><a href="#2-选择Parameters-选中你要定义的变量位置，点击┇按钮" class="headerlink" title="2.选择Parameters,选中你要定义的变量位置，点击┇按钮"></a>2.选择Parameters,选中你要定义的变量位置，点击┇按钮</h4><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240206134818400.png"></p><h4 id="3-按照下图进行数据的创建："><a href="#3-按照下图进行数据的创建：" class="headerlink" title="3.按照下图进行数据的创建："></a>3.按照下图进行数据的创建：</h4><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240206134955118.png"></p><h4 id="4-在该界面进行参数的设置"><a href="#4-在该界面进行参数的设置" class="headerlink" title="4.在该界面进行参数的设置"></a>4.在该界面进行参数的设置</h4><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240206135126261.png"></p><h4 id="5-回到matlab中的工作区，发现新增了添加的变量，将他们全部选中，右键，另存为Matlab格式文件，保存"><a href="#5-回到matlab中的工作区，发现新增了添加的变量，将他们全部选中，右键，另存为Matlab格式文件，保存" class="headerlink" title="5.回到matlab中的工作区，发现新增了添加的变量，将他们全部选中，右键，另存为Matlab格式文件，保存"></a>5.回到matlab中的工作区，发现新增了添加的变量，将他们全部选中，右键，另存为Matlab格式文件，保存</h4><h4 id="6-进入保存好的Matlab文件，得到如图所示的配置文件。"><a href="#6-进入保存好的Matlab文件，得到如图所示的配置文件。" class="headerlink" title="6.进入保存好的Matlab文件，得到如图所示的配置文件。"></a>6.进入保存好的Matlab文件，得到如图所示的配置文件。</h4><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240206135433216.png"></p><p>​在这里可以对每个参数的值，类型等进行修改。</p><h4 id="7-在文件的最前方，定义每一个变量的值，然后将值赋给每一个对应变量-Value，如图所示。"><a href="#7-在文件的最前方，定义每一个变量的值，然后将值赋给每一个对应变量-Value，如图所示。" class="headerlink" title="7.在文件的最前方，定义每一个变量的值，然后将值赋给每一个对应变量.Value，如图所示。"></a>7.在文件的最前方，定义每一个变量的值，然后将值赋给每一个对应变量.Value，如图所示。</h4><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240206135946132.png"></p><h4 id="8-点击运行，这样就把sumlink中的值就同步修改了，以后再修改就可以直接使用文件来修改相应变量的值了"><a href="#8-点击运行，这样就把sumlink中的值就同步修改了，以后再修改就可以直接使用文件来修改相应变量的值了" class="headerlink" title="8.点击运行，这样就把sumlink中的值就同步修改了，以后再修改就可以直接使用文件来修改相应变量的值了"></a>8.点击运行，这样就把sumlink中的值就同步修改了，以后再修改就可以直接使用文件来修改相应变量的值了</h4><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240206140109850.png"></p><h4 id="9-选择模型属性，在回调选项中的PreLoadFcn的模型预加载中输入-m文件名-这样每次直接运行simlink文件时，会自动加载一次-m文件"><a href="#9-选择模型属性，在回调选项中的PreLoadFcn的模型预加载中输入-m文件名-这样每次直接运行simlink文件时，会自动加载一次-m文件" class="headerlink" title="9.选择模型属性，在回调选项中的PreLoadFcn的模型预加载中输入.m文件名,这样每次直接运行simlink文件时，会自动加载一次.m文件"></a>9.选择模型属性，在回调选项中的PreLoadFcn的模型预加载中输入.m文件名,这样每次直接运行simlink文件时，会自动加载一次.m文件</h4><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240206140230252.png"></p><h3 id="2-4-模型仿真"><a href="#2-4-模型仿真" class="headerlink" title="2.4 模型仿真"></a>2.4 模型仿真</h3><p>​先对模型中各参数进行赋值，赋值后在simulink中，点击工具栏中的开始图标进行仿真。结果如下：</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240206141323480.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Simulink建模基础（1）&quot;&gt;&lt;a href=&quot;#Simulink建模基础（1）&quot; class=&quot;headerlink&quot; title=&quot;Simulink建模基础（1）&quot;&gt;&lt;/a&gt;Simulink建模基础（1）&lt;/h1&gt;&lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="MATLAB学习" scheme="https://lilongxin178.github.io/categories/MATLAB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="工具" scheme="https://lilongxin178.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="MATLAB学习" scheme="https://lilongxin178.github.io/tags/MATLAB%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Matlab2022a离线安装Embedded Coder Support Package TI C2000</title>
    <link href="https://lilongxin178.github.io/2023/12/10/Matlab2022a%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85Embedded%20Coder%20Support%20Package%20TI%20C2000/"/>
    <id>https://lilongxin178.github.io/2023/12/10/Matlab2022a%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85Embedded%20Coder%20Support%20Package%20TI%20C2000/</id>
    <published>2023-12-10T06:00:00.000Z</published>
    <updated>2024-01-31T06:31:54.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Matlab2022a离线安装Embedded-Coder-Support-Package-TI-C2000"><a href="#Matlab2022a离线安装Embedded-Coder-Support-Package-TI-C2000" class="headerlink" title="Matlab2022a离线安装Embedded Coder Support Package TI C2000"></a>Matlab2022a离线安装Embedded Coder Support Package TI C2000</h1><h2 id="一、了解Embedded-Coder-Support-Package-TI-C2000"><a href="#一、了解Embedded-Coder-Support-Package-TI-C2000" class="headerlink" title="一、了解Embedded Coder Support Package TI C2000"></a>一、了解Embedded Coder Support Package TI C2000</h2><p>​德州仪器 （TI） C2000 处理器的嵌入式编码器®支持包使您能够在 TI C2000™ MCU 上运行 Simulink® 模型。Embedded Coder 会自动为您的算法和设备驱动程序模块生成 C 代码，这些代码可直接在目标硬件上运行。该支持包可用于不同控制应用（包括电机控制和电源转换）的快速原型制作和生产工作流程。</p><p>​<strong>内容</strong></p><ul><li>从 Simulink 模型生成代码并部署到 TI C2000 硬件</li><li>用于 ADC、PWM、SPI、I2C、串行、SDFM、CAN、硬件中断、eCAP、QEP、比较器、DAC 等的设备驱动程序模块。</li><li>支持多核处理器</li><li>支持控制律加速器 （CLA）</li><li>具有处理器在环 （PIL）、监控和调谐（外部模式）、SD 卡记录和实时分析的验证功能</li><li>IQMath 的代码替换库</li><li>电机控制和功率转换应用实例</li></ul><p>​我们可以看到该工具性能十分强大，下面我们来对其进行离线安装。</p><h2 id="二、离线安装Embedded-Coder-Support-Package-TI-C2000"><a href="#二、离线安装Embedded-Coder-Support-Package-TI-C2000" class="headerlink" title="二、离线安装Embedded Coder Support Package TI C2000"></a>二、离线安装Embedded Coder Support Package TI C2000</h2><h3 id="1、首先安装好R2022a，安装目录不要空格（当然别的版本使用应该也没有问题）。"><a href="#1、首先安装好R2022a，安装目录不要空格（当然别的版本使用应该也没有问题）。" class="headerlink" title="1、首先安装好R2022a，安装目录不要空格（当然别的版本使用应该也没有问题）。"></a>1、首先安装好R2022a，安装目录不要空格（当然别的版本使用应该也没有问题）。</h3><h3 id="2、安装TI开发套件及SDK"><a href="#2、安装TI开发套件及SDK" class="headerlink" title="2、安装TI开发套件及SDK"></a>2、安装TI开发套件及SDK</h3><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240131103837453.png"></p><h3 id="3-下载supportsoftwaredownloader-r2022b-win64-exe"><a href="#3-下载supportsoftwaredownloader-r2022b-win64-exe" class="headerlink" title="3.下载supportsoftwaredownloader_r2022b_win64.exe"></a>3.下载<a href="https://ww2.mathworks.cn/supportfiles/downloads/R2022b/ssi_downloader/win64/SupportSoftwareDownloader_R2022b_win64.exe">supportsoftwaredownloader_r2022b_win64.exe</a></h3><h3 id="4-安装并进入登录界面登录（没有的话直接去Matlab官网申请）"><a href="#4-安装并进入登录界面登录（没有的话直接去Matlab官网申请）" class="headerlink" title="4.安装并进入登录界面登录（没有的话直接去Matlab官网申请）"></a>4.安装并进入登录界面登录（没有的话直接去Matlab官网申请）</h3><h3 id="5-选择自己安装的Matlab版本"><a href="#5-选择自己安装的Matlab版本" class="headerlink" title="5.选择自己安装的Matlab版本"></a>5.选择自己安装的Matlab版本</h3><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240131104306723.png"></p><h3 id="6-选择自己需要安装的支持包"><a href="#6-选择自己需要安装的支持包" class="headerlink" title="6.选择自己需要安装的支持包"></a>6.选择自己需要安装的支持包</h3><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240131104655371.png"></p><h3 id="7-选择默认安装路径"><a href="#7-选择默认安装路径" class="headerlink" title="7.选择默认安装路径"></a>7.选择默认安装路径</h3><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240131104727988.png"></p><h3 id="8-下载完成后会自动打开以下文件夹"><a href="#8-下载完成后会自动打开以下文件夹" class="headerlink" title="8.下载完成后会自动打开以下文件夹"></a>8.下载完成后会自动打开以下文件夹</h3><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240131104859096.png"></p><h3 id="9-打开readme，并复制当前文件夹路径"><a href="#9-打开readme，并复制当前文件夹路径" class="headerlink" title="9.打开readme，并复制当前文件夹路径"></a>9.打开readme，并复制当前文件夹路径</h3><p>​readme此处为Windows系统安装方式。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240131105001248.png"></p><h3 id="10-按照readme的方式进行安装"><a href="#10-按照readme的方式进行安装" class="headerlink" title="10.按照readme的方式进行安装"></a>10.按照readme的方式进行安装</h3><p>​win+r打开cmd命令行</p><p>​先进入自己matlab默认安装文件夹–&gt;例如D:\MATLAB\R2022a\bin\win64</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240131105313360.png"></p><p>​再使用readme中的名令打开supportsoftware.exe，进入安装。</p><h3 id="11-跟着系统提示安装即可。"><a href="#11-跟着系统提示安装即可。" class="headerlink" title="11.跟着系统提示安装即可。"></a>11.跟着系统提示安装即可。</h3><h3 id="12-安装完成后，找到MATLAB附加功能管理器，"><a href="#12-安装完成后，找到MATLAB附加功能管理器，" class="headerlink" title="12.安装完成后，找到MATLAB附加功能管理器，"></a>12.安装完成后，找到MATLAB附加功能管理器，</h3><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240131105817667.png"></p><p>13.选择自己需要的支持包</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240131105844752.png"></p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240131105936834.png"></p><p>逐步安装即可</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240131110313408.png"></p><h3 id="13-打开一个示例并生成代码"><a href="#13-打开一个示例并生成代码" class="headerlink" title="13.打开一个示例并生成代码"></a>13.打开一个示例并生成代码</h3><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240131142824990.png"></p><h3 id="14-打开CCS进行编译"><a href="#14-打开CCS进行编译" class="headerlink" title="14.打开CCS进行编译"></a>14.打开CCS进行编译</h3><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240131142926617.png"></p><p>​编译成功</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Matlab2022a离线安装Embedded-Coder-Support-Package-TI-C2000&quot;&gt;&lt;a href=&quot;#Matlab2022a离线安装Embedded-Coder-Support-Package-TI-C2000&quot; class=&quot;hea</summary>
      
    
    
    
    <category term="DSP设计" scheme="https://lilongxin178.github.io/categories/DSP%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="DSP设计" scheme="https://lilongxin178.github.io/tags/DSP%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="工具" scheme="https://lilongxin178.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>TMS320F280049C主控的DSP入门设计（学习笔记二）  TMS280049C评估板下载设置及流程</title>
    <link href="https://lilongxin178.github.io/2023/12/02/TMS320F280049C%E4%B8%BB%E6%8E%A7%E7%9A%84DSP%E5%85%A5%E9%97%A8%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%89%20%20TMS280049C%E8%AF%84%E4%BC%B0%E6%9D%BF%E4%B8%8B%E8%BD%BD%E8%AE%BE%E7%BD%AE%E5%8F%8A%E6%B5%81%E7%A8%8B/"/>
    <id>https://lilongxin178.github.io/2023/12/02/TMS320F280049C%E4%B8%BB%E6%8E%A7%E7%9A%84DSP%E5%85%A5%E9%97%A8%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%89%20%20TMS280049C%E8%AF%84%E4%BC%B0%E6%9D%BF%E4%B8%8B%E8%BD%BD%E8%AE%BE%E7%BD%AE%E5%8F%8A%E6%B5%81%E7%A8%8B/</id>
    <published>2023-12-02T06:00:00.000Z</published>
    <updated>2024-01-13T13:00:44.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TMS320F280049C主控的DSP入门设计（学习笔记二）-TMS280049C评估板下载设置及流程"><a href="#TMS320F280049C主控的DSP入门设计（学习笔记二）-TMS280049C评估板下载设置及流程" class="headerlink" title="TMS320F280049C主控的DSP入门设计（学习笔记二）  TMS280049C评估板下载设置及流程"></a>TMS320F280049C主控的DSP入门设计（学习笔记二）  TMS280049C评估板下载设置及流程</h1><h2 id="一、仿真器配置"><a href="#一、仿真器配置" class="headerlink" title="一、仿真器配置"></a>一、仿真器配置</h2><p>​对于280049C，其官方的LaunchPad开发板使用了XDS110仿真器的两线调试模式，而官方的ControlCard使用的是XDS100V2仿真器，开发时需要注意区分，并分别设置。本文以采用两线制调试的XDS110仿真器为例进行设置。<br>​右键点击工程名，选择New—&gt;TargetConfiguration File，File name取名任意，这里可取名为LaunchPad.ccxml，点击Finish。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240113192342226.png"></p><p>​点击第三步的操作，进入如下图界面，选择JTAG_2_PIN调试模式。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240113192419400.png"></p><h2 id="二、配置FLASH执行"><a href="#二、配置FLASH执行" class="headerlink" title="二、配置FLASH执行"></a>二、配置FLASH执行</h2><p>​当代码调试完毕后，需将代码烧录到FLASH中进行固化，使其掉电程序依旧储存在FLASH中。使DSP可以脱离仿真器运行。</p><h3 id="1-修改至FLASH模式"><a href="#1-修改至FLASH模式" class="headerlink" title="1.修改至FLASH模式"></a>1.修改至FLASH模式</h3><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240113193121668.png"></p><p>然后<strong>重复与RAM中执行类似的配置</strong>，具体包括以下几步：</p><ul><li>添加索引路径</li><li>添加数学库文件路径</li><li>启用FPU和TMU</li><li>定义_LAUNCHXL_F280049C</li><li>文件管理</li></ul><h3 id="2-声明-FLASH和code-start"><a href="#2-声明-FLASH和code-start" class="headerlink" title="2.声明_FLASH和code_start"></a>2.声明_FLASH和code_start</h3><p>为了使程序正确的从flash启动，编程时通常有一些特殊的代码需要运行(通常TI都已经在库函数中提供)。为了确保这些代码能够正确编译，执行本步骤。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240113193234093.png"></p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240113193306714.png"></p><h3 id="3-添加cmd文件"><a href="#3-添加cmd文件" class="headerlink" title="3.添加cmd文件"></a>3.添加cmd文件</h3><p>​将FLASH相关的cmd加进来。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240113194459856.png"></p><h2 id="三、程序烧写与仿真"><a href="#三、程序烧写与仿真" class="headerlink" title="三、程序烧写与仿真"></a>三、程序烧写与仿真</h2><h3 id="1-连接仿真器（对于TMS280049C直接使用电脑供电即可）"><a href="#1-连接仿真器（对于TMS280049C直接使用电脑供电即可）" class="headerlink" title="1.连接仿真器（对于TMS280049C直接使用电脑供电即可）"></a>1.连接仿真器（对于TMS280049C直接使用电脑供电即可）</h3><ul><li><strong>点击View—&gt;Target Configurations,进入以下界面：</strong></li></ul><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240113202338478.png"></p><ul><li><strong>右键单击Target Configurations窗口中工程目录下的“TMS320F28035.ccxml”文件（名称是你刚才新建.ccxml文件时的名称)，并选择“Launch Selected Configuration”</strong></li></ul><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240113204158990.png">、</p><ul><li><strong>这时CCS会自动进入Debug模式</strong></li></ul><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240113204310199.png"></p><ul><li><strong>点击快捷菜单栏的“Connect Target”按下</strong></li></ul><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240113204401245.png"></p><ul><li><strong>按钮呈现为按下状态，并且调试按钮都点亮，则仿真器连接成功</strong></li></ul><h3 id="2-程序烧写"><a href="#2-程序烧写" class="headerlink" title="2.程序烧写"></a>2.程序烧写</h3><ul><li><strong>在仿真器连接成功后，点击快捷菜单栏的“Load”按钮，装载程序</strong></li></ul><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240113204509070.png"></p><ul><li><p><strong>在弹出的“Load Program”对话框中，点击“Browse project”</strong></p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240113204709163.png"></p></li><li><p><strong>在弹出的对话框中，展开你的工程文件夹，选择“Debug”文件夹下的“xxxx.out”文件，点击“OK”</strong></p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240113204807398.png"></p></li><li><p><strong>点击“Load Program”对话框的“OK”</strong></p></li><li><p><strong>这时出现擦写进度条，等进度条完成就烧写成功啦！</strong></p></li></ul><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240113204831512.png"></p><h3 id="3-在线仿真"><a href="#3-在线仿真" class="headerlink" title="3.在线仿真"></a>3.在线仿真</h3><ul><li><strong>程序烧写完成后，点击“Resume”按钮可在线运行程序</strong></li></ul><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240113205258457.png"></p><ul><li><strong>若要添加断点（即让程序运行到某处停下），在对应程序行的左侧列双击，出现小圆点即可。</strong></li></ul><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240113205549773.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TMS320F280049C主控的DSP入门设计（学习笔记二）-TMS280049C评估板下载设置及流程&quot;&gt;&lt;a href=&quot;#TMS320F280049C主控的DSP入门设计（学习笔记二）-TMS280049C评估板下载设置及流程&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="DSP设计" scheme="https://lilongxin178.github.io/categories/DSP%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="DSP设计" scheme="https://lilongxin178.github.io/tags/DSP%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="工具" scheme="https://lilongxin178.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>TMS320F280049C主控的DSP入门设计（学习笔记一）  搭建可移植的CCS工程</title>
    <link href="https://lilongxin178.github.io/2023/12/01/TMS320F280049C%E4%B8%BB%E6%8E%A7%E7%9A%84DSP%E5%85%A5%E9%97%A8%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%89%20%20%E6%90%AD%E5%BB%BA%E5%8F%AF%E7%A7%BB%E6%A4%8D%E7%9A%84CCS%E5%B7%A5%E7%A8%8B/"/>
    <id>https://lilongxin178.github.io/2023/12/01/TMS320F280049C%E4%B8%BB%E6%8E%A7%E7%9A%84DSP%E5%85%A5%E9%97%A8%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%89%20%20%E6%90%AD%E5%BB%BA%E5%8F%AF%E7%A7%BB%E6%A4%8D%E7%9A%84CCS%E5%B7%A5%E7%A8%8B/</id>
    <published>2023-12-01T06:00:00.000Z</published>
    <updated>2024-01-12T13:02:45.048Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TMS320F280049C主控的DSP入门设计（学习笔记一）-搭建可移植的CCS工程"><a href="#TMS320F280049C主控的DSP入门设计（学习笔记一）-搭建可移植的CCS工程" class="headerlink" title="TMS320F280049C主控的DSP入门设计（学习笔记一）  搭建可移植的CCS工程"></a>TMS320F280049C主控的DSP入门设计（学习笔记一）  搭建可移植的CCS工程</h1><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​本篇笔记将介绍如何搭建可移植的CCS工程，以便于开发TMS320F280049C主控的DSP入门设计。本篇笔记将详细介绍如何创建CCS工程、添加源文件和库文件、配置编译选项等步骤。</p><h2 id="一、工程文件的复制"><a href="#一、工程文件的复制" class="headerlink" title="一、工程文件的复制"></a>一、工程文件的复制</h2><h3 id="CCS新建空白工程"><a href="#CCS新建空白工程" class="headerlink" title="CCS新建空白工程"></a>CCS新建空白工程</h3><p>​首先打开CCS软件，点击project-&gt;New CCS Project，并按照所需功能自行配置工程名、芯片等信息。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231215164351477.png" alt="图一  CCS项目创建"></p><p>​除此之外，在Project type and tool-chain中配置Output foemat为eabi（ELF）</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231215164911602.png" alt="图二  Output foemat设置 "></p><p>​点击Finish后弹出代码编辑器如下：</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231215165117052.png" alt="图三  CCS界面展示"></p><p>​此时，我们所选择的工作文件夹目录下应有下列文件：</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231215165328941.png" alt="图四  工作文件夹目录"></p><h3 id="拷贝支持文件进入工程文件夹"><a href="#拷贝支持文件进入工程文件夹" class="headerlink" title="拷贝支持文件进入工程文件夹"></a>拷贝支持文件进入工程文件夹</h3><p>​首先，进入C2000Ware的默认下载文件夹，如：D:\ti\c2000\C2000Ware_5_01_00_00（笔者为5.01版本，同时，本文出现的所有文件地址均为笔者自己工作环境下的地址）。并找到：</p><p>​D:\ti\c2000\C2000Ware_5_01_00_00\device_support\f28004x\common</p><p>​此文件夹下为F280049的DSP支持文件，接下来对该文件夹内文件进行复制，并粘贴到工作文件夹中。</p><ul><li>首先，将source整个文件夹复制到工作文件夹中。</li></ul><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231216160812216.png" alt="图五  工作文件夹及支持文件夹"></p><ul><li>再将D:\ti\c2000\C2000Ware_5_01_00_00\device_support\f28004x\headers\source文件夹下的文件复制到现在工程文件夹下的source中<br><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231216161239400.png" alt="图六  headers文件复制"></li><li>将D:\ti\c2000\C2000Ware_5_01_00_00\device_support\f28004x\common中的include文件夹全部复制到工程文件夹中。</li></ul><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231216161426275.png" alt="图七  include文件夹复制"></p><ul><li>再将D:\ti\c2000\C2000Ware_5_01_00_00\device_support\f28004x\headers\include中的所有文件复制到工作文件夹的include文件夹下</li></ul><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231216162044555.png" alt="图八  headers中include文件复制"></p><ul><li>将D:\ti\c2000\C2000Ware_5_01_00_00\device_support\f28004x\common\cmd中的四个cmd文件复制到工程文件夹。</li></ul><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231216162519092.png" alt="图九  cmd文件复制"></p><ul><li><p>接下来对库函数进行复制，首先找到路径地址为D:\ti\c2000\C2000Ware_5_01_00_00\driverlib\f28004x\driverlib的文件夹，该文件夹中含有两个文件夹和.c、.h文件（库函数文件）</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231216163005242.png" alt="图十  库函数文件夹"></p></li><li><p>首先，对该文件夹下.h文件进行复制，并粘贴到include文件夹中。</p></li></ul><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231216163321887.png" alt="图十一  .h文件的复制"></p><ul><li>再对.c文件进行复制，此时可以先在工作文件夹中创建文件夹“C_library”，然后将.c文件全部粘贴到该文件夹下。</li></ul><p><img src="/C:/Users/LLX/AppData/Roaming/Typora/typora-user-images/image-20231216163630877.png" alt="图十二  .c文件复制"></p><ul><li>最后将剩余的两个文件夹复制到工程文件夹中，到此，库文件复制完毕。</li></ul><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231216163842097.png" alt="图十三  复制结束后文件夹"></p><h3 id="添加数学运算库及f28004x-headers-nonbios-cmd文件"><a href="#添加数学运算库及f28004x-headers-nonbios-cmd文件" class="headerlink" title="添加数学运算库及f28004x_headers_nonbios.cmd文件"></a>添加数学运算库及f28004x_headers_nonbios.cmd文件</h3><ul><li><p>找到D:\ti\c2000\C2000Ware_5_01_00_00\libraries\math\FPUfastRTS\c28\lib和D:\ti\ccs1250\ccs\tools\compiler\ti-cgt-c2000_22.6.1.LTS\lib（该文件夹为下载CCS后的文件夹），将该文件夹下复制数学运算库到工程文件夹中</p><p><img src="/C:/Users/LLX/AppData/Roaming/Typora/typora-user-images/image-20231216165005039.png" alt="图十四  c28\lib下的数学运算库"></p></li></ul><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231216165251866.png" alt="图十五  ti-cgt-c2000_22.6.1.LTS\lib下的数学运算库"></p><ul><li><p>再对f28004x_headers_nonbios.cmd文件进行添加<br>找到D:\ti\c2000\C2000Ware_5_01_00_00\device_support\f28004x\headers\cmd文件夹，对该文件进行复制粘贴。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231216165618171.png" alt="图十六  f28004x_headers_nonbios.cmd所在地址"></p></li></ul><h3 id="删除多余文件，整理库文件"><a href="#删除多余文件，整理库文件" class="headerlink" title="删除多余文件，整理库文件"></a>删除多余文件，整理库文件</h3><p>由于使用eabi输出，所以可将ccs中与COFF输出相关的文件都删除掉。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231216164213022.png" alt="图十七  debug文件中的coff输出文件"></p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231216164300490.png" alt="图十八  Release文件中的coff输出文件"></p><h2 id="二-、对文件进行编辑修改"><a href="#二-、对文件进行编辑修改" class="headerlink" title="二 、对文件进行编辑修改"></a>二 、对文件进行编辑修改</h2><p>​1.删除source文件夹f28004x_usdelay.asm文件中函数声明的下划线。这步主要是为了适应eabi输出的需要，也即函数名前不加下划线。<br>​修改前：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">       .def _F28x_usDelay</span><br><span class="line">       .sect &quot;.TI.ramfunc&quot;</span><br><span class="line"></span><br><span class="line">        .global  __F28x_usDelay</span><br><span class="line">_F28x_usDelay:</span><br><span class="line">        SUB    ACC,#1</span><br><span class="line">        BF     _F28x_usDelay,GEQ    ;; Loop if ACC &gt;= 0</span><br><span class="line">        LRETR</span><br></pre></td></tr></table></figure><p>​修改后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">       .def F28x_usDelay</span><br><span class="line">       .sect &quot;.TI.ramfunc&quot;</span><br><span class="line"></span><br><span class="line">        .global  __F28x_usDelay</span><br><span class="line">F28x_usDelay:</span><br><span class="line">        SUB    ACC,#1</span><br><span class="line">        BF     F28x_usDelay,GEQ    ;; Loop if ACC &gt;= 0</span><br><span class="line">        LRETR</span><br></pre></td></tr></table></figure><p>​2.include文件夹下的f28004x_lin.h文件需要修改一个变量名，该变量名可以任意修改，修改原因是命名重复。<br>​修改前：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bp_16 IDLE:1;   </span><br></pre></td></tr></table></figure><p>​修改后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bp_16 LIN_IDLE:1;     </span><br></pre></td></tr></table></figure><p>​3.include文件夹下的f28004x_globalprototypes.h和source文件夹的f28004x_sysctrl.c均需要修改IDLE函数名，该变量名可以任意修改，修改原因也是命名重复。<br>​修改前：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void IDLE(void);   //（f28004x_globalprototypes.h）</span><br><span class="line"></span><br><span class="line">IDLE()   //（f28004x_sysctrl.c）</span><br></pre></td></tr></table></figure><p>​修改后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void IIDLE(void);   //（f28004x_globalprototypes.h）</span><br><span class="line"></span><br><span class="line">IIDLE()    //（f28004x_sysctrl.c）</span><br></pre></td></tr></table></figure><h2 id="三、从RAM执行程序时的软件配置"><a href="#三、从RAM执行程序时的软件配置" class="headerlink" title="三、从RAM执行程序时的软件配置"></a>三、从RAM执行程序时的软件配置</h2><p>​此时已经形成了完整的CCS工程文件夹，下面将对工程文件进行索引，而一般debug时希望工程从RAM中进行运行，所以在这里进行RAM中运行的配置。<br>​首先，右键项目浏览器的项目名，打开Properties（属性栏），设置成Debug，这里名字可以任意修改。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231217104654124.png" alt="图十九  Debug设置"></p><p>​后续添加文件路径的时候会涉及到一些缩写，这些缩写在如下位置做了定义：</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231217104905507.png" alt="图二十  缩写定义位置"></p><h3 id="添加索引路径"><a href="#添加索引路径" class="headerlink" title="添加索引路径"></a>添加索引路径</h3><p>​右键点击项目浏览器中的项目名，打开Properties（属性）。找到Include Options。按照下图中操作，创建相对路径。直接在对话框中输入 ${PROJECT_ROOT}&#x2F;include，表示工程文件夹中的include文件夹（绝对路径）。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231217105147717.png" alt="图二十一  索引路径添加"></p><h3 id="添加数学库文件路径"><a href="#添加数学库文件路径" class="headerlink" title="添加数学库文件路径"></a>添加数学库文件路径</h3><p>同样右键点击项目浏览器中的项目名，打开Properties（属性）进行设置。加入下列路径。<br>${PROJECT_ROOT}&#x2F;rts2800_fpu32_eabi.lib</p><p>${PROJECT_ROOT}&#x2F;rts2800_fpu32_fast_supplement_eabi.lib</p><p>其中默认的库文件是libc.a，根据本文开头提到的官网文档，可以直接删除。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231217155149461.png" alt="图二十二  数学库文件路径"></p><p>​快速运行库rts2800_fpu32_fast_supplement.lib是rts2800_fpu32.lib的一个函数子集，它是对rts2800_fpu32.lib中一些函数进行重写，提高运算速度，所以添加是有次序要求，需要进行设置如下：<br>​Link order中添加这两个库，<strong>排序rts2800_fpu32_fast_supplement.lib在前rts2800_fpu32.lib在后</strong></p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240112200935295.png" alt="图二十三  Link order的数学库"></p><h3 id="启用FPU和TMU"><a href="#启用FPU和TMU" class="headerlink" title="启用FPU和TMU"></a>启用FPU和TMU</h3><p>同样右键点击项目浏览器中的项目名，打开Properties（属性）进行设置。 关于编译器–fp_mode的设置等信息可以参考文献[4]的2.3节。<br>目前不推荐启用–idiv_support，在本工程中启用该选项会导致程序无法正确运行。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240112201246312.png" alt="图二十四  FPU/TMU设置"></p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20240112201328463.png" alt="图二十五  --fp_reassoc"></p><p>四、总结</p><p>​到此，CCS的TMS320F280049C主控模板文件创建完毕。<br>​下节将进行仿真器的配置以及程序下载流程。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TMS320F280049C主控的DSP入门设计（学习笔记一）-搭建可移植的CCS工程&quot;&gt;&lt;a href=&quot;#TMS320F280049C主控的DSP入门设计（学习笔记一）-搭建可移植的CCS工程&quot; class=&quot;headerlink&quot; title=&quot;TMS320</summary>
      
    
    
    
    <category term="DSP设计" scheme="https://lilongxin178.github.io/categories/DSP%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="DSP设计" scheme="https://lilongxin178.github.io/tags/DSP%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="工具" scheme="https://lilongxin178.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>关于负电阻的原理及应用的探究</title>
    <link href="https://lilongxin178.github.io/2023/11/30/%E5%85%B3%E4%BA%8E%E8%B4%9F%E7%94%B5%E9%98%BB%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8%E7%9A%84%E6%8E%A2%E7%A9%B6/"/>
    <id>https://lilongxin178.github.io/2023/11/30/%E5%85%B3%E4%BA%8E%E8%B4%9F%E7%94%B5%E9%98%BB%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8%E7%9A%84%E6%8E%A2%E7%A9%B6/</id>
    <published>2023-11-30T02:00:00.000Z</published>
    <updated>2024-01-12T12:40:23.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于负电阻的原理及应用的探究"><a href="#关于负电阻的原理及应用的探究" class="headerlink" title="关于负电阻的原理及应用的探究"></a>关于负电阻的原理及应用的探究</h1><h2 id="一、负电阻是什么"><a href="#一、负电阻是什么" class="headerlink" title="一、负电阻是什么"></a>一、负电阻是什么</h2><hr><p>一般来说，电压随电流变化的情形在纯电阻电路中可使用微分电阻R进行表示：<br>$$<br>R&#x3D;{dV\over dI<br>}<br>$$<br><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231122133945287.png" alt="图一  隧道二极管伏安特性曲线"></p><p>​由该图可看出，隧道二极管在A-B的阶段是符合前文所说的负微分效应的，但由于隧道二极管的该区域伏安特性并非线性所以该区域并不能称之为负电阻。</p><p>​接下来，我们再对负电阻做更加细致的定义：</p><p>​根据欧姆定律可知电阻二端的电压和电流成正比，其电流-电压关系的图形斜率为正，且会通过原点。</p><p>​那么就可推导理想负电阻其电流-电压关系的图形斜率为负，且会通过原点，因此只在图中的第二和第四象限出现。</p><p>​故可对该理想负电阻进行绘制伏安特性曲线：</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231122135127231.png" alt="图二  理想负阻抗伏安特性曲线"></p><p>​由以上推论及实际现象定义负电阻，即可简单定义为理想的负电阻应该为<strong>伏安特性曲线为线性且为斜率为负并经过原点</strong>的一种元件。</p><p>​历史以往研究时有注意到气体放电元件及一些真空管（例如负耗阻性管）会有负阻效应。不过实用且有经济效益的元件一直到固态电子技术普及后才出现。典型的负阻抗电路—负阻抗变换器—是由约翰·林维尔在1953年发明。而典型差动电阻为负值的元件—隧道二极管—则是由江崎玲于奈在1958年发明。</p><h2 id="二、实际负电阻元件构建"><a href="#二、实际负电阻元件构建" class="headerlink" title="二、实际负电阻元件构建"></a>二、实际负电阻元件构建</h2><hr><p>​集成电路兴起后，运算放大器由于其”虚短“”虚断“的特性，为构建一些理论中的器提供了巨大帮助，负电阻也在此应运而生。</p><h3 id="负电阻实际元件"><a href="#负电阻实际元件" class="headerlink" title="负电阻实际元件"></a>负电阻实际元件</h3><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231126135548211.png" alt="图三  负阻抗电路"></p><p>​</p><p>该图像为较为典型的负阻抗电路，其阻抗为：<br>$$<br>Z_i &#x3D; {V\over A} &#x3D;-Z<br>$$<br>​现在规定图中电流电压方向为正，由于运算放大器“虚断“的性质，我们可知该电路输入阻抗的绝对值为：</p><p>$$<br>|Z|&#x3D;R_3<br>$$<br>​那再由运放的”虚短“性质可知，可以看出该电路形成了一个放大倍数为两倍的同向放大器，所以当输入端设置电压为V时，输出端电压为2V所以此时R3上的电流在我们设定的状态下应该为-A。所以此时有：<br>$$<br>-A&#x3D;{V\over R}<br>$$<br>​该公式可直接推出该电路阻抗为<br>$$<br>Z_i &#x3D; {V\over A} &#x3D;-Z<br>$$<br>​从本质上来看，我们会发现这里是通过改变电流方向实现的一种模拟负电阻的电路。那我们该如何验证其是否是负电阻呢？接下来进行仿真。</p><h2 id="三、仿真验证"><a href="#三、仿真验证" class="headerlink" title="三、仿真验证"></a>三、仿真验证</h2><hr><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231126174749265.png" alt="图四 正负电阻并联仿真"></p><p>​使用 LTspice的直流扫描分析，设置V2从0V开始到2.5V步进0.1V，并给负电阻并联一个正电阻，那么由叠加定理可知，在理想电流源的情况下，正电阻与负电阻上所经过的电流应当相反。那么，开始仿真，测量两个电阻上所经过的电流。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231126175748739.png" alt="图五 正负电阻仿真结果"></p><p>​由测试直流分析可以看出，正电阻与负电阻的电流相反，且电流绝对值都为线性上升，所以，在该理想状态下，负电阻能够完美符合我们在前文中的标准。</p><h2 id="四、负电阻应用场景"><a href="#四、负电阻应用场景" class="headerlink" title="四、负电阻应用场景"></a>四、负电阻应用场景</h2><h3 id="4-1-负阻抗缓冲器"><a href="#4-1-负阻抗缓冲器" class="headerlink" title="4.1 负阻抗缓冲器"></a>4.1 负阻抗缓冲器</h3><p>​实际使用运算放大器时，我们往往会遇到运放驱动能力不足的情况，这种情况下，我们总是达不到我们所期望的电路效果。通常，当我们遇到这种情况时，我们通常使用一级跟随器（单位增益缓冲）。在这里我们可以尝试使用另外一种方式，即负阻抗缓冲器。当负载阻抗较小时，我们可以通过计算在输出端并联一负阻抗，此时输出阻抗趋于∞，且电路输出信号不会出现衰减的情况。<br>​与传统跟随器方案相比，该方案具有一重要优点，其使负载阻抗变得很大，几乎消除了负载电阻对电路的影响。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231129202122417.png" alt="图六 负阻抗缓冲器演示"></p><h3 id="4-2-高输入阻抗放大电路"><a href="#4-2-高输入阻抗放大电路" class="headerlink" title="4.2 高输入阻抗放大电路"></a>4.2 高输入阻抗放大电路</h3><p>​在进行运放电路的使用时，我们知道同相放大器具有输入阻抗高的特点，而反相放大器具有运放输入端虚地，电路工作稳定的特定。所以，我们是否能通过负阻抗缓冲器的原理类比出高阻抗的反向放大电路呢？答案是可以实现的，通过反向在输入端并联负阻抗电路，即可有效提高输入阻抗。设计方案如下：</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231129203142058.png" alt="图七 高输入阻抗放大电路"></p><h3 id="4-3-负电阻在LC振荡电路中的应用"><a href="#4-3-负电阻在LC振荡电路中的应用" class="headerlink" title="4.3 负电阻在LC振荡电路中的应用"></a>4.3 负电阻在LC振荡电路中的应用</h3><p>​RLC二阶电路的响应具有振荡的特性,特别地,当R &#x3D; 0 时,电路的响应为无阻尼振荡。为了得到无阻尼振荡特性,可用负电阻来“中和”电路中的正电阻。</p><p>​通过修改R4，可观察输出端波形幅值的衰减、稳定、增长的现象。<img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231129205756423.png" alt="图八 LC振荡电路"></p><p>​仿真文件地址：<a href="https://github.com/LILONGXIN178/img/blob/master/%E8%B4%9F%E9%98%BB%E6%8A%97LC%E6%8C%AF%E8%8D%A1%E4%BB%BF%E7%9C%9F.ms14">img&#x2F;负阻抗LC振荡仿真.ms14 at master · LILONGXIN178&#x2F;img (github.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于负电阻的原理及应用的探究&quot;&gt;&lt;a href=&quot;#关于负电阻的原理及应用的探究&quot; class=&quot;headerlink&quot; title=&quot;关于负电阻的原理及应用的探究&quot;&gt;&lt;/a&gt;关于负电阻的原理及应用的探究&lt;/h1&gt;&lt;h2 id=&quot;一、负电阻是什么&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="硬件探讨" scheme="https://lilongxin178.github.io/categories/%E7%A1%AC%E4%BB%B6%E6%8E%A2%E8%AE%A8/"/>
    
    
    <category term="运放的运用" scheme="https://lilongxin178.github.io/tags/%E8%BF%90%E6%94%BE%E7%9A%84%E8%BF%90%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>基于Typora的Markdown使用</title>
    <link href="https://lilongxin178.github.io/2023/11/26/%E5%9F%BA%E4%BA%8ETypora%E7%9A%84Markdown%E4%BD%BF%E7%94%A8/"/>
    <id>https://lilongxin178.github.io/2023/11/26/%E5%9F%BA%E4%BA%8ETypora%E7%9A%84Markdown%E4%BD%BF%E7%94%A8/</id>
    <published>2023-11-26T04:00:00.000Z</published>
    <updated>2024-01-12T12:40:40.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于Typora的Markdown使用"><a href="#基于Typora的Markdown使用" class="headerlink" title="基于Typora的Markdown使用"></a>基于Typora的Markdown使用</h1><hr><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><hr><p>​Word文件是目前我们日常生活中较为常用的文字文件，但我们会发现我们在使用中经常出现排版变化的问题。那为了将排版进行统一规范，我们可能需要一种统一的软件或者文件格式来进行规范。</p><p>​那我们会发现，有这样的一种标记语言——Markdown。</p><p>​那么既然我们想要去使用Markdown进行文件的书写，我们自然需要一个编辑器工具对其进行编辑使用。学习之初，有我的学长向我推荐了Typora这款编辑器，而我本人也对这款编辑器较为熟悉，所以，本篇博文将基于Typora对Markdown的使用进行探讨。</p><h2 id="二、Typora的快捷键设置"><a href="#二、Typora的快捷键设置" class="headerlink" title="二、Typora的快捷键设置"></a>二、Typora的快捷键设置</h2><hr><h3 id="2-1-常用快捷键"><a href="#2-1-常用快捷键" class="headerlink" title="2.1 常用快捷键"></a>2.1 常用快捷键</h3><ul><li>加粗： <code>Ctrl + B</code></li><li>撤销： <code>Ctrl + Z</code></li><li>字体倾斜 ：<code>Ctrl+I</code></li><li>下划线：<code>Ctrl+U</code></li><li>多级标题： <code>Ctrl + 1~6</code></li><li>有序列表：<code>Ctrl + Shift + [</code></li><li>无序列表：<code>Ctrl + Shift + ]</code></li><li>降级快捷键 ：<code>Tab</code></li><li>升级快捷键：<code>Shift + Tab</code></li><li>插入链接： <code>Ctrl + K</code></li><li>插入公式： <code>Ctrl + Shift + M</code></li><li>行内代码： <code>Ctrl + Shift + K</code></li><li>插入图片： <code>Ctrl + Shift + I</code></li><li>返回Typora顶部：<code>Ctrl+Home</code></li><li>返回Typora底部 ：<code>Ctrl+End</code></li><li>创建表格 ：<code>Ctrl+T</code></li><li>选中某句话 ：<code>Ctrl+L</code></li><li>选中某个单词 ：<code>Ctrl+D</code></li><li>选中相同格式的文字 ：<code>Ctrl+E</code></li><li>搜索: <code>Ctrl+F</code></li><li>搜索并替换 ：<code>Ctrl+H</code></li><li>删除线 ：<code>Alt+Shift+5</code></li><li>引用 ：<code>Ctrl+Shift+Q</code></li><li>生成目录：<code>[TOC]+Enter</code></li></ul><h3 id="2-2-部分功能演示-介绍"><a href="#2-2-部分功能演示-介绍" class="headerlink" title="2.2  部分功能演示&#x2F;介绍"></a>2.2  部分功能演示&#x2F;介绍</h3><h4 id="2-2-1-目录"><a href="#2-2-1-目录" class="headerlink" title="2.2.1 目录"></a>2.2.1 目录</h4><p>​输入[TOC]加Enter生成目录。该目录可随用户使用时自动更新，并且具有跳转功能，使用较为简单。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231126093735797.png"></p><h4 id="2-2-2-段落"><a href="#2-2-2-段落" class="headerlink" title="2.2.2 段落"></a>2.2.2 段落</h4><p>​使用换行键[Enter]可以建立新的一行,而使用<code>Shift</code>+<code>Enter</code>可以创建一个比段落间距更小的行间距。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231126094245026.png"></p><h4 id="2-2-3-代码块"><a href="#2-2-3-代码块" class="headerlink" title="2.2.3 代码块"></a>2.2.3 代码块</h4><p>​使用快捷键Ctrl + Shift + K，创建代码块。示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;hello,python!&quot;&quot;)</span><br></pre></td></tr></table></figure><h4 id="2-2-4-数学公式"><a href="#2-2-4-数学公式" class="headerlink" title="2.2.4 数学公式"></a>2.2.4 数学公式</h4><p>打开Typora选择数学模块</p><ul><li>点击“段落”—&gt;“公式块”（不推荐）</li><li>快捷键Ctrl+Shift+m       (快捷方式)</li><li>“$$”+回车                     （Markdown语法）</li></ul><p> 以上三种方式都能打开数学公式的编辑栏。</p><p>示例：</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231126094951006.png"></p><h4 id="2-2-5-上下标及高亮使用"><a href="#2-2-5-上下标及高亮使用" class="headerlink" title="2.2.5 上下标及高亮使用"></a>2.2.5 上下标及高亮使用</h4><p>​进入偏好设置：</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231126095114568.png"></p><p>​勾选以上的拓展语法，并进行使用。</p><h2 id="三、Typora图床设置"><a href="#三、Typora图床设置" class="headerlink" title="三、Typora图床设置"></a>三、Typora图床设置</h2><hr><p>​     使用Typora时如果不使用图床，我们插入的图片将会保存至本地，那么当我们发往博客或CSDN时就无法直接显示图片。因此我们需要设置一个图床，将图片上传至图床。这里我们可以使用<a href="https://github.com/Molunerfinn/PicGo/releases">PicGo</a>+<a href="https://so.csdn.net/so/search?q=Gitee&spm=1001.2101.3001.7020">Gitee</a>的方式，无需任何费用且上传速度也不错，唯一缺点就是上传再Gitee上私密性不强。</p><h3 id="3-1-Gitee使用及配置"><a href="#3-1-Gitee使用及配置" class="headerlink" title="3.1 Gitee使用及配置"></a>3.1 Gitee使用及配置</h3><p>​Gitee和GitHub都是较为常用的代码托管平台，和GitHub相比最大的都是就是其访问速度在国内环境下相对较快。所以我们将我们的图床远程仓库设置在Gitee上。<br>​Gitee地址：*<a href="https://link.zhihu.com/?target=https://gitee.com/">https://gitee.com/</a>*</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231126125303689.png"></p><p><strong>新建仓库：</strong></p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231126125341324.png"></p><p>​此处仓库名自己可任意填写。下面两个标出的红色框中的信息直接按照图中所示配置。</p><p><strong>创建私人令牌：</strong></p><p>​回到主页，然后点击自己的头像，选择账号设置。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231126125434995.png"></p><p>​打开后，找到私人令牌</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231126125528364.png"></p><p>​进入后点击生成新令牌<img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231126090555648.png"></p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231126090632411.png"></p><p>​简单对项目进行简述，并勾选图中所勾选选项。并输入密码进行验证。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231126091222223.png"></p><p>​将私人令牌的token进行复制保存。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231126091351166.png"></p><h3 id="3-2-Picgo安装下载及使用"><a href="#3-2-Picgo安装下载及使用" class="headerlink" title="3.2 Picgo安装下载及使用"></a>3.2 Picgo安装下载及使用</h3><p>​PicGo是一款开源免费且支持多平台。</p><p>​下载并打开Picgo进行安装。安装完成后进入主界面。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231126125604731.png"></p><p>​此处可以选择链接格式（markdown、HTML、URL、UBB、Custom等），另外也需要对图床进行设置，为了使用Gitee作为图床，我们应当先进入插件设置来添加Gitee。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231126091909225.png"></p><p>下面在图床设置中对Gitee进行配置。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231126092257130.png"></p><h3 id="3-3-Typora设置"><a href="#3-3-Typora设置" class="headerlink" title="3.3 Typora设置"></a>3.3 Typora设置</h3><p>​进入Typora，打开“文件”进入“偏好设置”</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231126125634886.png"></p><p>​在该设置中选择其用以下几种功能，并将上传服务选择为Picgo（app），并将应用程序地址填入绝对路径。</p><p><img src="https://raw.githubusercontent.com/LILONGXIN178/img/master/image-20231126125702215.png"></p><p>​现在只要我们在typora中粘贴任意一张图片，Gicgo就会自动将图片上传到我们的gitee仓库中，肥肠的方便好用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基于Typora的Markdown使用&quot;&gt;&lt;a href=&quot;#基于Typora的Markdown使用&quot; class=&quot;headerlink&quot; title=&quot;基于Typora的Markdown使用&quot;&gt;&lt;/a&gt;基于Typora的Markdown使用&lt;/h1&gt;&lt;hr&gt;
</summary>
      
    
    
    
    <category term="工具使用" scheme="https://lilongxin178.github.io/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="工具" scheme="https://lilongxin178.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Markdown" scheme="https://lilongxin178.github.io/tags/Markdown/"/>
    
    <category term="Typora" scheme="https://lilongxin178.github.io/tags/Typora/"/>
    
  </entry>
  
</feed>
